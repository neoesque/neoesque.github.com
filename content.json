{"meta":{"title":"neoesque","subtitle":"Making Life Better","description":"neoesque's Linux Blog","author":"neoesque","url":"https://blog.littlero.se","root":"/"},"pages":[{"title":"about","date":"2015-03-08T03:50:59.000Z","updated":"2015-03-08T03:50:59.000Z","comments":true,"path":"about/index.html","permalink":"https://blog.littlero.se/about/index.html","excerpt":"","text":""},{"title":"分類","date":"2018-06-07T14:08:43.000Z","updated":"2019-10-16T16:14:41.537Z","comments":false,"path":"categories/index.html","permalink":"https://blog.littlero.se/categories/index.html","excerpt":"","text":""},{"title":"","date":"2021-05-13T02:13:08.106Z","updated":"2013-04-28T14:58:30.000Z","comments":true,"path":"channel.html","permalink":"https://blog.littlero.se/channel.html","excerpt":"","text":""},{"title":"標籤","date":"2018-06-07T14:07:23.000Z","updated":"2018-06-07T14:09:26.000Z","comments":false,"path":"tags/index.html","permalink":"https://blog.littlero.se/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-05-13T02:13:08.102Z","updated":"2012-04-10T16:27:16.000Z","comments":true,"path":"404.html","permalink":"https://blog.littlero.se/404.html","excerpt":"","text":"window.location.href = '/';"}],"posts":[{"title":"旅行社飛機團票成本（真善美旅行社糾紛）","slug":"dispute-with-musictravel","date":"2020-07-07T14:51:17.000Z","updated":"2021-11-19T03:12:48.164Z","comments":true,"path":"post/dispute-with-musictravel/","link":"","permalink":"https://blog.littlero.se/post/dispute-with-musictravel/","excerpt":"本篇內容為 2020 年上半年與真善美旅行社之糾紛過程，簡單來說因為 Covid19 (a.k.a. 武漢肺炎、新冠肺炎) 疫情的關係，我決定不去蜜月旅行（真善美旅社，奧捷），但當時的時空背景台灣尚未把歐洲列為三級以上警戒，因此我們的團無法退費，按「國外旅遊定型化契約」第十三條（出發前旅客任意解除契約及其責任）：「…乙方如能證明其所受損害超過第一項之各款基準者，得就其實際損害請求賠償。」，因此我向真善美提出所有收據內容，包含歐洲費用與機票費用，然而真善美出示給我的電子機票中並無票價資訊，而是另外打一張明細給我要我付款，再次提出要求他們要出示跟航空公司來往的收據後，（業務）依然表明依法就是這樣的電子機票就合法，叫我趕快付錢，於是我只好走消保申訴流程了，本案已結案，真善美已在消保官面前出示收據，所以我也付了大概 15 萬左右給他們，本篇作為記錄，分享給網友跟旅行社來往的內容與旅行團的成本。 Blog 停更許久，其實草稿還有好幾篇要打 QQ，不小心拖稿到現在","text":"本篇內容為 2020 年上半年與真善美旅行社之糾紛過程，簡單來說因為 Covid19 (a.k.a. 武漢肺炎、新冠肺炎) 疫情的關係，我決定不去蜜月旅行（真善美旅社，奧捷），但當時的時空背景台灣尚未把歐洲列為三級以上警戒，因此我們的團無法退費，按「國外旅遊定型化契約」第十三條（出發前旅客任意解除契約及其責任）：「…乙方如能證明其所受損害超過第一項之各款基準者，得就其實際損害請求賠償。」，因此我向真善美提出所有收據內容，包含歐洲費用與機票費用，然而真善美出示給我的電子機票中並無票價資訊，而是另外打一張明細給我要我付款，再次提出要求他們要出示跟航空公司來往的收據後，（業務）依然表明依法就是這樣的電子機票就合法，叫我趕快付錢，於是我只好走消保申訴流程了，本案已結案，真善美已在消保官面前出示收據，所以我也付了大概 15 萬左右給他們，本篇作為記錄，分享給網友跟旅行社來往的內容與旅行團的成本。 Blog 停更許久，其實草稿還有好幾篇要打 QQ，不小心拖稿到現在 前情提要全世界的疫情在 2020 年一月時，大致傳染範圍還在中國，歐洲在一月底才在義大利有兩例中國人進入該國，所以對於我們二月底要去奧捷蜜月，我也是從一月就開始關注這件事，後來一月底義大利有案例時，我內心就覺得不妙，陸續開始關注歐洲的 Covid19 網站，尤其是奧捷的資訊，一直到二月中 (02/20) 後決定還是不要去好了，所以才跟真善美申請取消行程，不過因為我知道太接近出團日，基本上只能退部分金額，但是基本上按照法律他們還是要出示收據等相關證明我才繳付多少金額。 索取收據不過當我跟他們要收據時，他們只有出示歐洲那邊的團費，而沒有機票的收據。（中間因為他們說要索取收據所以並沒有馬上就處理，大概到三月底才又聯絡我們）。 不過當然就憑這樣也是有點難證明歐洲的團費真的支出，所以我按圖索驥找到這間公司（現在 Google 找不到這間公司的網頁了，囧，當時還找的到，不知道是不是倒了），網站上面有他們的聯絡方式，於是我就寄信問了一下是不是有這回事。 後來得到的回覆是，我們確實跟真善美有合約，但是跟你沒有，所以無法回答你的問題 XDDD 好吧，那我就當有這回事吧，所以基本上歐洲的團費每人是 1236 歐。 再來就是因為他們一直不肯出示機票錢又要我付錢，所以我只好走管道申請調解了。基本上根據我的研究，最好的方式就是直接走各縣市政府的消保官，他們是隸屬行政院消費者保護協會，基本資料我覺得可以參考這篇文章的解釋 背包客棧-整理–旅遊糾紛申訴方法，至於什麼旅行業品保協會就算了吧，根據 PTT 的網友描述，由於協會本身就是旅行業者組成的，他們會比較站在旅行業這邊，而且也不具備什麼法律效力，最好的方式還是直接走政府的，各縣市政府都有消保官，直接從行政院的網頁 行政院消費者保護會線上申訴系統 填寫後就會分派到該縣市的消保官了。 04/17 消保官公文填寫之後基本上會收到公文，第一次是只有請對方回答，如果對方不滿意就再上去該網站申請第二次調解，就會面對面了。 公文如下。 04/22 真善美第一次回答而我收到真善美的回答是這樣的。 好喔，大致上就是說市場機制跟個資所以不能給我。那只好直接再去網站申請第二次調解大家面對面了。結果很好笑的是我之後收到存證信函。 05/13 真善美存證信函 這實在有點靠北，因為我有跟他們業務說我按了第二次調解，然後他們直接寄存證信函給我幹嘛，不過因為法律上存證信函只是一種浪費錢的東西，就是跟對方說你再不聽我的我就要告你嘍，那我只好也浪費錢一下了。 回函 05/28 第二次開會通知可能高雄市的消保官最近有點忙 XD 我的案子有點晚通知第二次開會 06/10 開會因為開會沒有錄音錄影所以我直接描述了，當天是高雄分公司的女負責人 (根據網路搜尋應該是叫盧湘恬) 來，該帶的文件也都有帶來，基本上她有出示團票的訂位紀錄、每個人的訂位資訊、匯款紀錄。 訂位紀錄顯示每個人 32800 機場稅是 2624。 訂位資訊也確實有我跟我老婆。 匯款紀錄是花旗銀行的匯款單，2/20 的。 由於確實出示了我想要的，所以會議我也沒有特別表達什麼。大致上就是這樣。不過楊消保官人很好，特別跟業者提到說根據我國的法律規定，沒有消費行為的話税是應該退費的，盧負責人說阿聯酋過去不大會退這筆，但是還是會回去跟阿聯酋協調看看。然後雙方就簽下會議記錄就離開了。 回去後就直接把差額匯給真善美了。 後來九月的時候收到真善美盧負責人的 line 說阿聯酋可以退機場稅給我們，所以我又回收了 5248 元。 基本上整件事就這樣落幕了，當然機票錢是原價，團報怎麼可能票價還是 3 萬 2，但我也不知道阿聯酋的退傭是多少。因為真善美也不可能減免退傭的錢給我就是 XD 基本上遺憾的就是寄存證信函給我們跟沒有扣掉退傭這兩件事。","categories":[{"name":"遊記","slug":"遊記","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E8%A8%98/"}],"tags":[{"name":"法律","slug":"法律","permalink":"https://blog.littlero.se/tags/%E6%B3%95%E5%BE%8B/"}]},{"title":"婚禮準備","slug":"prepareWedding","date":"2019-12-12T08:20:32.000Z","updated":"2020-12-02T02:05:13.336Z","comments":true,"path":"post/prepareWedding/","link":"","permalink":"https://blog.littlero.se/post/prepareWedding/","excerpt":"記錄一下小弟婚禮籌備過程中的推薦廠商比較的過程就不說了，因為其實已經忘記了 XDDD 只有記錄最後的廠商，絕對都是優質服務。","text":"記錄一下小弟婚禮籌備過程中的推薦廠商比較的過程就不說了，因為其實已經忘記了 XDDD 只有記錄最後的廠商，絕對都是優質服務。 婚紗照 Pocky婚紗照是婚紗工作室搭配的，叫做 Pocky，當初在挑的時候就覺得 Pocky 的照片個性很強烈，我老婆也沒有太多意見，叫我選就好，於是就交給 Pocky 了，見面後果然攝影師的個性如同照片一樣很強烈 XD Pocky 的老婆也是新祕 Mandy 也是看起來酷酷的，但是夫妻倆當天拍攝都很好聊，哈哈。 地點是跟 Pocky 討論出來的，最後我們選定左營孔廟、駁二、旗津（棚內、沙灘），選擇婚紗照的婚紗的時候夫妻也都會出席一起選、給意見，說我們選擇的地點跟我老婆適合什麼樣的婚紗。 我有跟 Pocky 大概說我喜歡的照片的樣子，有事前做一些功課收集一些照片給他看，最後也有照出滿意的成品。 飯店 寒軒 飯店我們選擇的是寒軒和平店三樓，寒軒基本上也是高雄歷史悠久的飯店，由於歷史悠久自然不算是吃場地的飯店，但食物方面絕對 OK。我們選的價位是 13999，跟 12999 的差異在紅酒無限暢飲，另外我們也不全然是用他們預設的菜，我們有參考 15999 跟 12999 的菜色交換，最後會在算一個價錢給你。 我們選的價位對應飯店的服務其實也是蠻基本的，有簡單的 CandyBar、司儀 (不主持)、主桌專屬服務生、二進的小禮物、基本的背板…之類的，桌數跟價格高一點有的還有付樂團、主持，我們的價位沒有，但是需要什麼還是可以跟他們商量，服務態度很好幾乎可以滿足需求，後來像婚禮小物（我們買了\b小包裝的米）也是請他們當天早上順便幫我們放好，然後因為我們當初拍攝婚紗不是洗大的婚紗照出來，換成兩個桌框，然後我自己再去加洗卷軸，由於他們只有放大婚紗照的架子，但他們的美術還是想辦法幫我臨時改造了一下放卷軸的方法。 很簡單的 Candy Bar，沒有雞尾酒。 主桌佈置 婚攝 JP Joe婚攝我是看 PTT 大家都很推薦的 JP Joe 婚攝 (Facebook 連結)，用 Facebook 聯繫 Joe 詢問時間可不可以之後立刻就可以簽約啦，大約結婚前一週再跟他說細節，例如直接去新郎或新娘家，當天的流程，移動路徑等等，當天 Joe 是雙機拍攝，有他跟助理，Joe 就如同板上說的，相當詼諧風趣，我的阿姨們都很喜歡他 XDDD 而且 Joe 在我們結婚後兩週就先給我們數位照片了（有原圖&amp;調色可沖洗版）（因為他要出國），反而我挑照片挑比較久，在過年前三四天才給他要洗出來的清單，結果他竟然說趕看看過年前給我們，最後在過年前兩天收到，實在太感謝了 XD 這效率真的只能給 100 分。 值得一提的是板上說因為 Joe 很熟悉流程，而且還會幫忙婚禮大小事（例如迎娶要綁的車綵），我想說如果當天流程忘記就請 Joe 幫忙協助好了，結果我功課做太足，就不需要 Joe 出馬了，而且 Joe 還跟我說很少看到新郎這麼熟悉流程，我真的是第一次結婚（無誤 XD），只是筆記魔人發作而已，所有的婚禮流程我都校正了好幾次。 Joe 的交件是照片 120 張跟放在 Google Drive 的電子檔。值得一提的是因為我們是訂結一起，其實那天是要 7 點就到我老婆屏東市的家，Joe 也是沒有多收錢的。另外 Joe 他們移動也是有自備車子，而且迎娶時從屏東開到高雄我家，他跟 Vincent 已經在 standby 了，移動速度超快，只能說專業 XD 婚錄 Vincent婚錄是我老婆找的，叫做 Vincent (Facebook 連結)，V 帥（Joe 這樣叫他 哈哈哈）也是大家公認的水中婚紗寫真高手，加 Line 聯繫後確認時間就可以簽約啦，跟 V 帥確認細節也是在前一週給他流程、地址，其實也沒交代什麼，我完全信任他們 XD 然後因為跟簽約的工作時間有多一小時，所以 V 帥有多收一小時的超時工作費。他也是自己開車移動。跨高屏都沒收錢。 V 帥交件時間也是超級快的才 10 天就交件，超級有效率，會收到一個精美的隨身碟，裡面有精華、準備、文定、迎娶、迎賓、喜宴（一進、二進）、送客等 8 部影片。 新祕 Erin新祕就不是我的守備範圍了，是我老婆找的，叫做 Erin Chu，是人很親切的新祕，在去飯店途中她是跟我們一起坐新娘車，一路跟司機大哥有說有笑，也是個媽媽，在結婚後依然跟我老婆保持聯絡詢問我老婆懷孕的情況，推！ 妝容可以參考婚紗的照片。 婚紗 Lin Haute婚紗我們最後選定了 Lin Haute，主要是因為服務人員美儀的服務很不錯加上禮服也蠻多的（當然加價的也不少 XD），他的禮服分成三個等級-基本、加價、設計師款，東西不要的話都可以換成加價禮服（但設計師款應該是無法換到的），像我們不需要大的婚紗照跟小卡，最後就換成加價款禮服。 佈置 (背板) 婉君背板、地燈跟地貼我們是選擇跟 婉君道具 承租，婉君的選擇非常的多，也是約好時間去店裡面談需求，老闆就會推薦可以怎麼樣佈置，跟過去幫其他客人佈置的範例，道具大部分都是租的，只有地貼跟客製化的東西才是買斷。我們本來要交給他們佈置（因為一開始不想用鮮花），後來臨時決定要改鮮花佈置，就跟婉君改單，他們也是二話不說就 OK 了，背板原本以為很難架，結果我自己一個人花了不到一小時就搞定了，但是我不小心還搞壞他們背板的支撐鋁架 (汗…)，他們也沒跟我收費，實在是太感謝了！！一樣大推。 成品在下面。 佈置 (花店)、新娘捧花 DFlower我們本來一開始是沒打算用花的，後來去好市多看到好市多的花一把才 170 還多少，決定也自己用，但後來發現佈置好像不是我們的專長 XDD 然後我老婆又從 ptt 得知高雄有一間花店似乎非常平價，所以詢問後發現很實惠，於是我們就改成有鮮花的佈置了，然後還一起訂了新娘捧花、新郎胸花、主婚人胸花 x4、男花童的胸花跟女花童的頭飾，包一包不到一萬，真的超級划算。 花店的名稱是 DFlower 花事 高雄花店。 金屬架也是他們借我們的，一早就會來佈置，大概接近結束的時間就會來收了。 父母獻花獻給父母的花是老婆同學開的，叫 昌億花店，我們的婚紗照用的乾燥花也是跟他們訂的，質感很不錯。 秀禾服秀禾服是淘寶買的 XD 兩個人加起來才三千多 (臺幣)，因為我們問高雄的婚紗店租秀禾服單人一套都要 5000，而且只有 one size，兩個人租起來就要一萬，後來我老婆說不如去淘寶找看看，我就真的去淘寶找了，不看還好一看不得了，款式多， size 齊全，重點是價格超便宜，男生一套只要一千多，女生買到兩千多就很浮誇了，要更浮誇的大概三千多打死，超強 XDD 我跟我老婆都算瘦，size 還算好找，而且物流很快，訂了馬上就到臺灣了。 卷軸 印貼網當初在照婚紗工作室的時候就決定不要大張的婚紗照，因為那個不好收藏，完全不想掛起來 XD，所以就決定要照有印卷軸的，原本也是要找健豪，但是他是印展覽會場廣告的那種超級大張的，寬接近 2 公尺，我沒有要這麼大的 XDDD （而且照片 Pixel 其實也不夠），所以在網路又搜尋了一下，最後找到這家專門在印設計師產品的公司，印貼網，只要直接把照片上傳上去，然後調整角度就可以送出了。整體使用流程非常好，而且有問題客服也會加 Line 跟你討論，像我的照片因為 Pixel 不夠大，最後客服有幫我調整一下才輸出，客服服務也是很棒！最後輸出的成品完全不會失望。 婚紗本 健豪除了婚紗工作室印的一本婚紗本，我們自己還印了一本有生活照的，我們選擇的是尾牙都送很大的臺中工作室 健豪，由於我老婆的妹妹有健豪的會員，所以單本的價格非常實惠，印刷的成品也很不錯，交件速度也快。 西裝 (結婚) 舒禔西服舒禔西服 這家是掃西裝店時意外發現的價格實惠的店，由於有看到喜歡的而且價格實在太便宜啦，所以就直接下訂了，店員也還蠻會幫你搭的，推薦高雄結婚的朋友去逛逛哦。租一套三件式西裝 1800。 西裝 (婚紗照) 拓元西服拓元西服 這家是婚紗工作室合作的三家之一，款式多，店員也很親切，所以就決定在這家了，工作室合作可以穿兩套基本的，但是基本的就是基本的（廢話 XD），最後還是加價換了一套西裝。","categories":[{"name":"家庭","slug":"家庭","permalink":"https://blog.littlero.se/categories/%E5%AE%B6%E5%BA%AD/"}],"tags":[{"name":"人生","slug":"人生","permalink":"https://blog.littlero.se/tags/%E4%BA%BA%E7%94%9F/"}]},{"title":"2018 臺東之旅","slug":"Trip-To-Taidong-2018-summer","date":"2018-07-31T14:18:35.000Z","updated":"2018-08-05T14:31:29.374Z","comments":true,"path":"post/Trip-To-Taidong-2018-summer/","link":"","permalink":"https://blog.littlero.se/post/Trip-To-Taidong-2018-summer/","excerpt":"受到在臺東工作的女友弟弟邀約，暑期正值臺東熱氣球節，安排了三天兩夜的臺東之旅。跨度從臺東最北邊的新景點 - 金剛大道，玩到臺東南端的多良車站。海線跑完跑山線又從山線繞去跑海線。看著臺東的大海實在美不勝收，唯一要靠北的就是實在太熱了 XD 日期 景點 07/28(六) 侯記卑南豬血湯、成功豆花、三仙臺、都歷海灘、湯蒸火鍋 07/29(日) 鹿野高臺、小星星早餐店、伯朗大道（金城武樹）、忠勇自行車道（金剛大道）富山護漁區、老東台米苔目、鐵花村、寶桑豆花店、星星部落景觀咖啡 07/30(一) 朵特絲早餐店、臺東森林公園、綠房子午餐、櫻木平交道（太麻里車站）、多良車站","text":"受到在臺東工作的女友弟弟邀約，暑期正值臺東熱氣球節，安排了三天兩夜的臺東之旅。跨度從臺東最北邊的新景點 - 金剛大道，玩到臺東南端的多良車站。海線跑完跑山線又從山線繞去跑海線。看著臺東的大海實在美不勝收，唯一要靠北的就是實在太熱了 XD 日期 景點 07/28(六) 侯記卑南豬血湯、成功豆花、三仙臺、都歷海灘、湯蒸火鍋 07/29(日) 鹿野高臺、小星星早餐店、伯朗大道（金城武樹）、忠勇自行車道（金剛大道）富山護漁區、老東台米苔目、鐵花村、寶桑豆花店、星星部落景觀咖啡 07/30(一) 朵特絲早餐店、臺東森林公園、綠房子午餐、櫻木平交道（太麻里車站）、多良車站 行前準備🏨 住宿因為太晚安排了，有一天沒有搶到中華電信的會館，因此我們禮拜六是挑了一家便宜的民宿，禮拜日晚上則是住中華電信會館。 日期 住宿 07/28(六) 騰旅行民宿 07/29(日) 中華電信普悠瑪會館 07/28這天早上從屏東出發，可能是暑假加上週末，接近十點才出發的我們竟然接近兩點半才到臺東市，足足開了四小時啊 Orz (真是辛苦女友弟弟了，誒?!) 🍴 侯記卑南豬血湯因為我愛豬血湯，女友弟弟推薦的好吃豬血湯，還不錯，我們還叫了糯米腸、燙青菜、豬舌 🍮 成功豆花路過成功，弟弟推薦知名的成功豆花店，大排長龍啊~ 豆花真心推薦。 啊 因為我們是外帶，忘記照豆花了，請自行 Google XD 📷 三仙臺吃飽喝足後就繼續北上，本日是跑海線，一路來到三仙臺後稍作停留。 📷 都歷海灘然後我們本來是要今天就去金剛大道的，殊不知在弟弟快開到的時候…女友發現她的手機竟然不見了，趕緊撥給自己的手機，好險被一個好心人撿到，由於女友在三仙臺我們下去踏水時一個浪打來，七分褲就溼了，所以當時立刻去廁所更換，結果手機就這麼落在廁所了…所以我們只好往南走回去距離金剛大道半小時車程的三仙臺拿手機，由於時間已接近五點半，也不可能再去金剛大道了，我們只好往南看還有什麼景點，這個是弟弟推薦的，說他有在衝浪的朋友都蠻推薦這個海灘的，他也沒來過。 都歷海灘有點難到，順著 Google Map 一定錯，哈哈。正確的路是沿台 11 線有都歷衛生掩埋場指示牌。開進去後可以把車停在掩埋場外面。 都歷海灘沒有開發過，所以沒有清潔設備，踏水後洗腳請自備水。 🍴 湯蒸火鍋踏完都歷海灘天也黑了，我們就回去臺東市區吃飯，弟弟推薦這家在臺東算是高 CP 的火鍋。 🏨 騰旅行民宿女友在 Booking 上找的旅館，主要是考慮到便宜就住了，房間還算乾淨，但我們沒注意到我們訂的雅房在一樓，會有很多人在外面活動，洗個澡經過廁所都會看到別人，不是很推薦訂他的雅房類，早餐是摩斯的還不錯，但因為我們一早就要去看熱氣球看完就繼續往北開，沒有要回來，所以也沒吃到。 07/29本日是最拼的一天，繞完山線繞海線。開了 231 公里共 6 個小時的車。 📷 鹿野高臺由於我們沒有要坐熱氣球，只有要拍照，參考網路的意見早上場大約 06:30 到就好，算算時間大約五點多起來梳洗，從臺東市區走車程約 40 分鐘，抓 05:50 出發即可，我們打算看完七點半之後往北走在去找早餐吃。 六點半到的時候已經是一堆車子，還好可以隨便停 (會有人夾停車費 200 元)，我們運氣很好的找到離草皮一個蠻近的位置停車，不用走太遠，一到草皮時滿滿都是人啊，大家都帶著野餐墊，熱氣球都已經升空，於是我們也趕緊找個空地鋪上野餐墊與熱氣球合照一番。我們到的時候草皮幾乎曬不到太陽，但是過沒多久太陽爬升速度超快，草皮失去陰影後就瞬間熱了起來，人就開始散了，所以我們照片有些背景人比較少。 Olympus 45mm f1.8 拍起來太立體根本 P 的吧 XD 🍴 小星星早餐店大約七點十幾分熱氣球就開始下降，到七點半幾個特殊造型的就全部收了，剩下傳統的熱氣球，於是我們照完之後也就離開了，沿著台 9 線北上一路來到關山，查到這裡有一家不錯的早餐店叫小星星，評分很高，蛋餅是傳統蛋餅，好吃。 📷 伯朗大道（金城武樹）吃飽後繼續開著臺 9 線北上，來到池上鄉，這裡最有名的就是金城武樹啦，我跟女友還特地開了 Youtube 看了一下金城武的廣告 XD 但真的是人太多了，實在無法按照想要的樣子拍。有拍有紀念就好。 📷 忠勇自行車道（金剛大道）離開金城武樹之後既然在池上當然就是先買個池上便當在上路，下一個景點是金剛大道，位於臺東幾乎最北邊的長濱鄉，車程有點遠，順著台 9 轉台 30 再轉台 11 就到了，台 11 沿路都有設涼亭給旅客休息，所以我們就找個涼亭看海吃便當。 金剛大道是近年興起的網紅拍照點，筆直的大道背後就是藍天及大海，怎麼拍都好看，可惜我們去的當下兩邊都是雜草居多 XD 如果兩邊也是綠油油就完美了。 📷 富山護漁區富山護漁區是弟弟推薦的景點，以前還沒有圍起來，現在政府圍起來每個人收門票 40 元，裡面顧名思義就是個漁場保護區，魚群的數量真的驚人，此處為岩石地形，退潮時看起來還算安全，所以這裡還蠻多家長帶小孩的。 🍴 老東台米苔目一路回到市區之後，女友帶我來吃我喜歡的米苔目，這家也是老字號，店面應該是改裝的，看起來很現代感，已經沒有老店的氣息，東西整體來說還算 OK。 📷 鐵花村吃飽後跑來鐵花村，胡鐵花，是胡適的爸爸，曾在臺東當知州，臺東有條鐵花路就是為了紀念他，而鐵花村就位於鐵花路上。這裡有很多文創的攤販在買東西，也有熱氣球燈籠，是個散步的好地方。 🍮 寶桑豆花店在去鐵花村之前女友本來就要找我吃豆花，但吃飽實在太飽，散完步之後才覺得可以吃甜點了，於是就跑來這家分數也是頗高的豆花店吃豆花~ 豆花呢？！ 因為上來後覺得好吃就立刻開吃了忘記拍照，哈哈哈，但好吃~真心推薦 ☕ 星星部落景觀咖啡這裡是弟弟推薦的看臺東夜景的好地方，距離臺東市也不遠，車程不到半小時，有一些吃得跟飲料可以點。 開上山途中看到月亮倒影在海面，實在是太美了。 店家有提供煤油燈，還蠻有氣氛的，但是燃燒的煤油味真心不好聞。水果盒是我們在市區買去吃的。 如果臺東機場有飛機起降會直接從正上方飛過，跑道是筆直的面對這家景觀咖啡的。 🏨 中華電信會館沒什麼好介紹的，靠近臺東火車站，因為我不知道離市區遠，想說：啊，火車站附近應該很熱鬧吧，結果完全相反 XD 有需要的朋友可以找我代訂。 07/30🍴 朵特絲早餐店這家也是隨便 Google 找到的，店的特色是珍珠紅茶牛奶，珍珠網路寫總是很快銷售一空，我們因為早上不想吃這麼甜就沒點，他的土司很有特色，除了滿滿的蔬菜裡面還有蘋果片，算是很清爽的早餐。老闆還有兩個可愛的女兒一直乖乖的坐在旁邊。 📷 臺東森林公園臺東市區可以走走的公園有兩個，分別是臺東森林公園跟附近的海濱公園，但是後來考慮森林公園可能比較多可以拍的點（琵琶湖、活水湖），所以我們就決定來森林公園走走。 🍴 綠房子午餐一樣還是亂 Google 看到的，特色是葡萄汁跟家常菜，而且臨近臺東森林公園，剛好也在我們回去的方向，就在台 11 路上，我們去的那天客人不多，所以料理準備的很快，而且是真的好吃！大推！ 十蔬水餃，裡面真的很多蔬菜，好吃。 網友大推的葡萄汁，真材實料，好喝。 📷 櫻木平交道（太麻里車站）吃飽後我們就順著台 11 一路往南走，一路會經過兩個比較有名的車站分別是太麻里車站跟多良車站，太麻里車站附近近期有一個點 hen 有名，就是櫻木平交道，也就是灌籃高手主題曲的背後有海的平交道畫面。 以下為複習畫面 平交道後面是湛藍的海洋。 📷 多良車站多良車站被譽為全臺灣最美的車站，但是因為站務量減少，現在已經是純觀光車站了。由於可以看到海，所以地勢勢必是比較高的，要上去這個車站之前可要爬一段路。現在還在使用的鐵軌在車站旁。 逛完多良之後時間抓得很好大約三點我們就一路往南回高雄車站坐高鐵結束此次的臺東行了。","categories":[{"name":"遊記","slug":"遊記","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E8%A8%98/"}],"tags":[{"name":"臺灣","slug":"臺灣","permalink":"https://blog.littlero.se/tags/%E8%87%BA%E7%81%A3/"},{"name":"臺東","slug":"臺東","permalink":"https://blog.littlero.se/tags/%E8%87%BA%E6%9D%B1/"}]},{"title":"京都、大阪之旅","slug":"Trip-To-Japan-Osaka-Kyoto-2018","date":"2018-06-06T16:00:00.000Z","updated":"2020-03-30T13:48:02.808Z","comments":true,"path":"post/Trip-To-Japan-Osaka-Kyoto-2018/","link":"","permalink":"https://blog.littlero.se/post/Trip-To-Japan-Osaka-Kyoto-2018/","excerpt":"日本櫻花第二彈！！此行跟女友去的，目的除了賞櫻之外還有一個很重要的行程就是女友要去地主神社還願，這次行程安排在 04/05 ~ 04/10，有跨到清明節假期（因為我三月剛去南美，假已經快沒了 囧\\），從高雄飛關西空港，去程搭虎航，回程搭 Peach，主要停留城市有三天京都跟兩天大阪。 日期 城市 04/05 ~ 04/08 京都 04/08 ~ 04/10 大阪 窮游行程在此","text":"日本櫻花第二彈！！此行跟女友去的，目的除了賞櫻之外還有一個很重要的行程就是女友要去地主神社還願，這次行程安排在 04/05 ~ 04/10，有跨到清明節假期（因為我三月剛去南美，假已經快沒了 囧\\），從高雄飛關西空港，去程搭虎航，回程搭 Peach，主要停留城市有三天京都跟兩天大阪。 日期 城市 04/05 ~ 04/08 京都 04/08 ~ 04/10 大阪 窮游行程在此 行前準備✈️ 機票因為是櫻花季其實本來就沒有打算可以買到特別便宜的，覺得適合的價格就買了，來回每人約一萬，以清明假期來說就一般般價格。 出發地 目的地 時間 價格 航空公司 高雄小港 大阪關西 2018/04/05 09:00-13:00 每人 6159 含 15kg 行李 虎航 大阪關西 高雄小港 2018/04/10 10:55-13:30 每人約 4300 含行李 Peach 🏨 住宿我們在京都第一晚訂的青年旅館是 PieceHotel，靠京都車站非常近，交通算是超級便利，後面則是一路都住 Airbnb，其中第二三天在京都的還有電動腳踏車可以借，但是在發文的當下因為日本開始限制沒有執照的 Airbnb，所以現在已經找不到我們的住的那家了 XDDD04/08 住的那家離大阪 (近鐵) 上本町車站很近，除了離地鐵近之外，選這裡是考慮最後一天要回關西空港我們要搭利木津巴士，上車地點就在這裡，非常方便。 日期 城市 旅館 2018/04/05 京都 PieceHotel 2018/04/06-2018/04/07 京都 Airbnb (已下架) 2018/04/08-2018/04/09 大阪 Airbnb 🚌 車票、門票此行到關西空港之後就立刻搭 Haruka，從關西直奔京都最省時，女友在臺灣就找好旅行社訂好票了。同樣地我們去大阪有一天要去環球影城，為了節省時間我們也是在臺灣就找旅行社購好票。至於利木津巴士則是要現場買票而且還要當天才有效，所以隔天早起是免不了的 Orz至於城市內 (京都、大阪) 的捷運交通就是靠 ICOCA or SUICA 還有京都的公車一日券 600 日幣跑來跑去。 日期 種類 取得方式 2018/04/05 Haruka 車票關西空港到京都 在臺灣購買 2018/04/05-2018/04/07 京都市內交通 公車一日券 600 日幣 (跟公車司機購買或者旅館也可能有)地鐵 ICOCA &amp; SUICA 2018/04/07-2018/04/09 大阪市內交通 地鐵 ICOCA &amp; SUICA 2018/04/09 環球影城門票 在臺灣購買 2018/04/10 利木津巴士車票大阪到關西空港 當日現場購票，每人 1550 日幣 網路由於最近中華電信正在促銷，所以我跟女友就各別辦了 149 的費用，流量是 1G，以 7 天來說是綽綽有餘了。 04/05高雄本次旅行出發點是高雄，由於搭的是廉航，沒有餐點，本來要在機場的便利商店買個御飯糰坐飛機時墊肚子，結果兩個人就完全忘記了 =.= 高雄小港機場內完全沒有便利商店，慘，看來只能一路餓到京都了。 關西空港一下飛機就感受到關西機場的忙碌，出關滿滿的人 = = 還以為要趕不上 Haruka 了，還好幸運的在一小時內出關，現在是兩段式，第一段會由工作人員協助擷取指紋，然後到移民官時即可快速進行確認。關西空港出來就直接接火車站了。快速的瞄了一下月臺在哪就準備衝上 Haruka 號。 🍴 京都車站前地下街 Porta東洋亭漢堡排如同傳聞般的美味，份量更是出乎意料的驚人 marukoharuko【京都】百年老店！極品漢堡排～東洋亭本店 到京都已三點，一路都餓著肚子，於是一出京都車站第一件事請就是 找 吃 的。由於車站出來就有站前地下街，所以我們看了一下迅速決定去吃 東洋亭，女友點了一個漢堡排午餐ハンバーグランチ、我點了一份オムライス，兩份套餐價都是 1223 日元，首先出場的是丸ごとトマトサラダ (圓圓的番茄沙拉?!) 我最愛番茄了，這道開胃菜超讚的啊。 對於當時已經餓翻的兩人來說，什麼都超好吃的啦（但這家是真的好吃 XDDD） 稍早之前發生插曲，因為有朋友託我買京都的明信片，所以我們就去京都車站前的郵局買明信片，買完的時候走出來剛好在跟女友用臺語對話，結果就一對爸媽年紀的夫婦走來說你們是臺灣人嗎？我本來以為是有什麼需要幫忙的，結果那個媽媽就亮出兩張公車一日票，說因為他們要離開京都了，用不到，把票給我們，於是我們就賺到兩張公車票。臺灣人就是熱情 XD 在國外用臺語說話也是有好處的 🏨 Piece Hotel在京都每人每晚日幣￥3000 以下的住宿，這兩間 Piece Hostel 絕對都能排上前十名了 haruhii[京都住宿推薦] Piece Hostel Kyoto：簡約設計風格青旅、平價高 CP 值、免費早餐、松下 NA97 吹風機、近京都車站 吃飽後就先去旅館放行李，Piece Hotel 就位於火車站附近，走路約 7 分鐘即可，由於是一間青年旅館，所以價格十分親民，但服務一點也不馬虎，該有的是一應俱全，廚房、浴室設備都很齊全，我們訂的雙人房型基本上房間雙人床佔了 80%，剩下的地板面積約可以放下兩個 26 吋行李箱就沒空間了，但是枕頭跟床都不錯睡，房間也相當乾淨，要不是實在太搶手，我們本來打算都住這家的。隔天早上的早餐也是相當豐盛，有咖喱有飯有味噌湯有麵包。CP 超高！ P.S. 吹風機已經變成 Dyson 放好東西之後時間也沒很多，我們立刻前往清水寺，由於我們有一日公車券了，所以就直接坐公車開始我們的旅程~ 📷 清水寺、石塀小路、八坂神社清水寺以及清水寺周邊的許多景點、坂道、小徑是非常棒的 1 日散步路線 不羈京都推薦 1 日散步地圖 然後走著走著就來到位處清水寺內的地主神社啦，也是此行的重點之一，由於女友之前在地主神社許過戀愛願，很巧的是我之前一個去地主神社的同事也幫我拿了一個戀愛御守給我，覺得是在太巧合，所以我們決定回來還願。 石塀小路是與寧寧之道垂直的一條很小的傳統街道，非常安靜，石頭路配木板牆，如果穿著和服來這拍照一定很棒。 位於清水寺旁的八坂神社是日本國三千多座八坂神社的本社。由於我們走到八坂神社已經天黑，我們就沒有走去隔壁的知恩院，當天晚上神社裡面也是很熱鬧，有攤販、也有一群人在 (快凋謝完的) 櫻花樹下吃吃喝喝。 🍴 燒肉弘商店弘燒肉系列的店鋪肉品質都不會讓人失望，我想以後我在京都想吃燒肉，應該會把弘燒肉系列店鋪當作優先選擇店鋪 Erica[京都美食] 美味燒肉-焼肉ホルモン弘商店四条高倉店 女友原本說已經在網路預約好了弘燒肉，於是我們就跟著 Google Map 移動到了肉屋弘商店，殊不知女友預約的不是這家 = =” 好在另一家在不遠處，走路約六七分鐘而已，所以也還可以在預訂時間內到達。 聽說生牛肉必點，所以為了嚐鮮就點了，結果小後悔，不是很喜歡這麼生的牛肉 肉屋弘商店很可愛的小烤爐。 04/06📷 仁和寺不過在春天，最吸引人的要數仁和寺的櫻花「御室櫻」了。 好運日本行京都必遊賞櫻景點，世界文化遺產【仁和寺】的御室櫻。 隔天一早按照追櫻行程，女友一路緊盯著 ptt 網友回報的花況，我們來到比較晚開的御室櫻所在地「仁和寺」，希望可以滿開。 果不其然是滿開啊！ 哈 哈 哈 結果其實已經超過滿開了 XD 綠芽都發出來了 🍴 平價丼飯 なか卯千萬不要因為他很便宜就小瞧這碗親子丼滑嫩的蛋液絲毫都不馬虎，雞肉也是香嫩可口，以平價連鎖的丼飯店來說這水準高得嚇人 哈比 Hobbit 美味親子丼 500 円有找！！平價丼飯也不隨便。日本連鎖餐廳なか卯 由於下午想去原谷苑，坐公車中途要在立命館大學前轉車，於是想說在這裡吃一下再去原谷苑（因為不知道那裡有在賣便當）。晃了一下就發現這家平價丼飯 なか卯，如果不想吃丼飯的，附近也有くら寿司可以選。 📷 原谷苑在深山裡有一個「原谷苑」，那兒是花之仙境，是我見過最燦麗動人的。 莉塔京都「原谷苑」，我所見過最動人的櫻。 之所以知道原谷苑是因為女友有在看 Youtuber Spice 擇旅的介紹，加上櫻花很多地方都滿開完了，所以決定來原谷苑這碰運氣。 原谷苑因為是私人庭院，所以來這裡是要收費的，有趣的是價格是隨著花況而變，我們那天去是每人 1500 日幣！但都到了其實還是只能付了，因為從外面看真的覺得超級讚！付錢進去後果然覺得沒有白付啊。 從原谷苑離開之後因為今天沒有續住 Piece Hotel，我們一早把行李寄放在旅館，現在要回去拿，然後再移動到今晚住的地方。 🍴 551 蓬萊 HORAI 肉包燒賣下次有機會來大阪，不妨來試試好吃的 551 肉包！有小時候的味道喔！ 歐拉歐拉玩日本‧大阪市｜551 蓬萊肉包燒賣 ~ 為什麼要來日本吃肉包？ 會買這家肉包其實是因為我們這兩天經過京都車站每次都看到這家大排長龍！從原谷苑回來之後剛好也有點肚子餓，於是就來排隊湊個熱鬧一下，結果一吃真的驚為天人啊，是個還會再買來吃的肉包。真心推！ 🍴 長次郎壽司我覺得這間是絕對值得推薦，且價位 OK 的好店！ jane7810062018 日本*京都*美食 -【CHOJIRO 長次郎迴轉壽司】四条木屋町分店 晚上移動到今晚住的旅館後因為位處邊緣地帶（在京都西北邊），也沒什麼東西可以吃，女友在行前就找了這家平價壽司。基本上就是中規中矩的壽司店，還行。 04/07今日的行程因為我們昨晚挑的 Airbnb 房東有提供電動輔助腳踏車，所以今天的行程基本上就是可以悠哉悠哉的騎腳踏車。在京都市內騎車是很舒服的一件事，日本的道路規劃的很好。 由於中午要跟女友在日本的友人吃飯，於是想說先在京都市中心附近活動好了。由於女友早餐想吃松屋，所以我們就騎到最近的松屋（其實也騎了 5 公里，好險有輔助電動腳踏車，一路騎的輕鬆），這家松屋就在京都御苑附近。 📷 京都御苑京都御苑已經成了京都人的休閒公園，一年四季景色皆宜，也能參觀到珍貴的建築，碰上祭典時非常熱鬧有看頭，到京都遊玩別忘了排上這裡。 樂吃購！日本走入古代日本皇室的宮廷生活──京都御苑 吃完早餐後我們就從最近的京都御苑開始走起。 至於京都御苑是什麼地方呢，根據女友的日本友人表示，連他們自己都沒去過（笑），大致上來說就是一個很大的公園，只是這個公園以前住天皇。 由於平安神宮也在附近，但是因為時間來不及逛，所以我們就去門口繞了一圈而已。 🍴 Le Bouchon牛排煎的恰到好處然後最棒的是看著上面的香草奶油慢慢的融化當牛肉碰上香料奶油二者果然是最佳拍檔, 咬下時牛肉的肉汁慢慢滲出再混合奶油香味讓人滿足的一個字都說不出來 MIO 日本食玩買日記 [京都＊美食]CAFE LE BOUCHON ~ 寺町通上的可愛法式餐館&amp;神奇的午間特價牛排 中午女友約了日本友人來吃飯，地點就是這家 Le Bouchon，Google 評價 4.4 顆星還不錯。也是一間高 CP 的好店。 ☕ Blue Bottle Coffee Kyoto用 15 分鐘的時間，等待每一杯手沖藍瓶咖啡，是非常值得的一件事情 Viento。碧安朵【遊京都】藍瓶咖啡 Blue Bottle Coffee 用完午餐後，女友提議去就在附近有咖啡界 Apple 之稱的 Blue Bottle 咖啡，剛好在京都開了日本第二間店（另一家在東京）。這間就位於南禪寺附近，所以也是騎腳踏車就可以到。 我們點了一杯拿鐵，超濃郁，真的好喝，另外買了一些咖啡豆回去給同事泡，但同事表示喝不出特別之處，哈哈哈。 📷 鴨川京都鴨川，總描繪出小孩在河邊玩樂，中學生踏單車回家，夕陽映照着河邊矮坡的畫面。走訪鴨川二日，卻發現陰天或晴天下的景致竟可以此寧謐，卻又略見不同。 MATCHA 為何內行人玩京都，一定會去鴨川？美景整天都逛不盡，周邊漫步攻略全公開 喝完咖啡之後接下來就是要往上賀茂神社騎去啦，我們一路都沿著鴨川騎，騎到中途看到一片人群在休息的地方，我們也在櫻花樹下稍作休息，此行最重的道具終於登場！就是野餐墊 XD 這傢伙真的超級重的。 一路騎著鴨川感覺愜意~ 可惜天公不作美，我們野餐完沒錯就就開始下雨，一路往北騎都是飄雨的狀態。 還看到一群熱鬧的人在那邊搗麻糬。 📷 上賀茂神社位於京都的賀茂別雷神社 (通稱：上賀茂神社)，歷史非常悠久，是古都京都文化財也是世界文化遺產之一。一起到這裡參加各種祭祀活動、品嘗當地美食、漫步探索日本的歷史。 Kokoro.S 上賀茂神社 京都 呈現古代日本歷史的上賀茂神社 正好有神職人員在立沙。 🍴 豬一拉麵天啊~是我可以吃完一整碗的好吃飯實在太好吃的飯了!!!! 受不了!!!! ayin13【京都 eat-♥-豬一拉麵】醬油拉麵，輕鬆吃喝 離開上賀茂神社之後天色也黑了，我們就把腳踏車騎回北大路地鐵站 (此時又下起了雨，小崩潰)，改坐地鐵前往京都市區吃晚餐，今天的晚餐也是在網路看人家推薦的豬一拉麵，不得不說他的飯真的超級好吃！！！拉麵也是超級好吃啦，五顆星。 而且店員不多就三位，然後老闆跟店員還跟我們說中文（帶有腔調，應該是真日本店）。 04/08🍴 Freshness Burger酪梨漢堡看起來都好好吃啊啊啊 愛吃鬼芸芸 FRESHNESS BURGER，意外驚喜的美味漢堡店 隔天早上房東先生就把我們載回北大路車站，這個車站有逛街的地方叫 Kitaoji Vivre，因為蠻早的，商場還沒開，但是已經有不少餐飲店開門了，快速的 Google 了一下之後決定來吃個蠻多人推薦的漢堡 Freshness Burger。我點的是很多人推薦的酪梨漢堡，女友好像是炸雞堡。看看那個酪梨的分量！真的不錯吃，值得推薦。 吃完早餐後，我們依照 Google Map 的指示，先從北大路車站坐到京都車站在轉 JR，順利的抵達大阪梅田車站，由於我們在大阪的住宿地點不在梅田站附近，所以必須先寄放行李之後才能去玩，我們在之前就做好功課 JR 梅田車站地圖，不過實際上發現到現場找就好，因為車站真的是實在複雜了，預先看好有看跟沒看一樣，從地鐵冒出來根本不知道在那裡 = = 找到 Locker 放完行李後，就繼續依照 Google Maps 的指示坐 JR 大阪環狀線來到大阪今昔生活館。 📷 大阪今昔生活館想不想體驗一下江戶時代的大阪？那就到大阪最近超級人氣的景點「大阪生活今昔館」來場時空穿越之旅吧！ [userid] 最到位的和服體驗在大阪！大阪生活今昔館忠實復刻大阪江戶時代！ 會選擇來大阪今昔生活館的原因是因為這裡租借和服非常便宜啊~ 半小時每人才 500 日元！而且配合古早的江戶時代 (17~18 世紀) 建築照相別有一番風味，算是可以殺殺時間的景點。 🍴 麺のようじ這趟日本京都大阪自由行，Wanchen 爸媽最喜歡的就是這家麺のようじ shps89060328 大阪美食 麺のようじ 雞湯拉麵 (雞鹽拉麵) 必吃雞叉燒 逛完大阪今昔生活館之後肚子也餓了，會來吃這家 麺のようじ 也是因為看到 Youtuber 推薦的。口味其實不差，但是我的心還是在豬一那，哈哈哈。 📷 大阪城看似有點遠，但相信我～ 光是途中遇到的各個美景，便足夠讓人忘卻距離這回事！ leon4e404【大阪景點】春季日本賞櫻必遊—大阪城公園，四月櫻花盛開！ 其實大阪城是臨時加的行程，因為吃完麺のようじ發現其實時間還蠻多的，就問女友要不要去大阪城走走，於是就這麼定了。一樣 Follow Google Map 的地鐵指引，很快的就來到大阪城了。 大阪城也是大阪的名勝之一，所以也是人山人海，基本上我們到的時候已經沒有什麼櫻花了，就是以一個觀賞古蹟（其實現有的大阪城是 20 世紀重建的，也沒這麼古蹟）的心情來逛逛。大阪城超大，也是逛起來很舒服的公園。 其實日本人也想玩堆石頭遊戲吧，但是還是印加人堆的比較好啊 XDD 離開大阪城之後我們就先回到大阪梅田車站拿行李後，往我們今晚住宿的地方前進。 🏨 HG Cozy Hotel来大阪三次，这家民宿是至今为止最舒服最满意的一家。离近铁上本町特别近，也就五分钟左右。进门后的房间布局和采光，包括灯光都让人舒适，特别干净，有一种回家的感觉。房东 ayako 会主动关心你入住的情况，而且他们家是需要登录入住护照的，比较正规，公寓的安全性和安静程度也比较理想，还有特别的小零食，很好吃。总体满意度可以有 10 分，很完美。今后再去大阪，还会选择住在这家。 毅峻 Airbnb 留言 這家 Airbnb 位於大阪上本町車站附近，會挑這家的原因之一是因為他緊鄰大阪喜來登都酒店，是我們回去關西空港時要搭乘的利木津巴士的上車點之一。房間品質不錯、乾淨，大部分的家電都有，也有個小陽臺可以曬衣服。 🍴 福太郎大阪燒我是一直到買了「米其林京都大阪 2016」後，才知道福太郎！ 阿因為這趟就是米其林必比登美食之旅，所以第一間大阪燒，就選了福太郎。 osakaleo2016 冬關西 D1.3 福太郎 大阪燒 蔥燒‧米其林必比登美食推薦 大阪燒也是此行的重點之一啊~ 早早就想跟女友來大阪吃大阪燒了，於是就挑了這家知名且連當地人也喜愛的福太郎本店。味道真的很好吃，所以我們隔天又來吃一次！ 📷 道頓堀、心齋橋從美食到血拼 盡在道頓堀與心齋橋 Kousuke DEKI 凝集大阪魅力！在心齋橋和道頓堀一定要做的 10 件事 來大阪必經的一定是來道頓堀跟心齋橋血拼啦~ 吃完大阪燒之後心滿意足的就來逛街啦。這裡的店豐富到實在是眼花繚亂，除了購買藥妝，我還入手了一雙 Adidas Boost。 04/09本日的重頭戲是要去日本環球影城玩啦~ 由於我們在上本町，距離環球大約要 40 分鐘，所以我們大約抓 8 點出門，在上本町車站內的超商買了墊肚子的早餐就直接去坐車了 📷 日本環球影城其實環球影城根本沒啥好特別介紹的，大家來玩的爽度和實際體驗的經歷文章根本無法傳達。而文章就算寫的再好玩，也不會有『推坑』作用，因為環球影城多值得來一趟大家都心裡有數 jane781006 大阪環球影城遊記分享，簡單心得＋設施介紹＋門票購票 有大家最期待的名偵探柯南真實版難密室逃脫、非常真實又精采的 FINAL FANTASY XR 乘車遊、魔物獵人 THE REAL 和美少女戰士獨家照相區，這篇文章我會不破梗不爆雷的跟你們介紹和分享哪一個好玩、必玩 icebonla【2018 日本環球影城 UNIVERSAL COOL JAPAN】名偵探柯南/太空戰士/魔物獵人/美少女戰士四大設施攻略 抵達環球時很幸運的時間抓得還不錯，8:50 左右就已經在大門口等待，而此時已經人山人海，由於我們在臺灣就已經買好票，所以也不用再去排隊買票，省了很多時間啊~ 由於女友最推薦（也是網路最推薦）第一名的遊戲就是哈利波特！於是我們一入園後第一個就直接衝哈利波特，很幸運的一小時內就玩到了！而且哈利波特在 2018 年 3 月剛升級完，現在不用戴 3D 眼鏡就能有裸視 3D，整體聲光效果搭配真的身歷其境。 然後我們就晃到小小兵區玩小小兵。 環球影城今年的 Cool Japan 區遊戲是名偵探柯南/太空戰士/魔物獵人/美少女戰士，快速的查了一下評價之後發現大家對太空戰士跟魔物獵人比較好評（柯南要收費），但因為小弟沒有在玩魔物獵人，所以就跟女友說那我們去玩太空戰士好了，太空戰士這個是戴 VR 眼鏡加上坐雲霄飛車的遊戲，整個來說我就看到了人類遊戲的大未來啊！超級好玩的，連女友都直呼過癮！ 亂晃的時候突然遇到小小兵見面會 看了一下發現其實該坐的都坐到了，剩下的都是不敢坐的（例如飛天翼龍）加上無聊的（例如大白鯊？！），所以我們就亂逛想說去找一些 show 來看好了，但是因為已經接近傍晚，其實場次不多，我們就亂挑，就挑到這個還不賴的小提琴三重奏。 聽完小提琴後又跑來看小小兵的 show。 🍴 福太郎大阪燒因為實在是太好吃了，所以我們決定在大阪的第二天再來吃一次 XD 04/10往關西空港由於利木津巴士的票只能當天買當天用，所以只好當天一早趕快去排隊買票，我們大概六點多就起來了，整理到七點出門，根據利木津巴士近鐵上本町班次表，大約是 20 分鐘一班，然後一小時可以到 2 航廈（Peach 在 2 航廈），我們的飛機是十點多的，其實七點出發後來發現有點早，因為 2 航廈只有 Peach，登機超級快的，所以在 2 航廈的免稅店有很多時間可以慢慢挑伴手禮，我們還吃了一些東西墊肚子，不然在飛機沒得吃。同時 2 航廈還有超多的扭蛋機，我在那裡也扭了好幾顆打算順便當伴手禮 XD","categories":[{"name":"遊記","slug":"遊記","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E8%A8%98/"}],"tags":[{"name":"日本","slug":"日本","permalink":"https://blog.littlero.se/tags/%E6%97%A5%E6%9C%AC/"}]},{"title":"墨西哥簽證 2017/11","slug":"mexico-visa-2017-11","date":"2017-11-15T14:29:41.000Z","updated":"2019-10-16T16:11:59.270Z","comments":true,"path":"post/mexico-visa-2017-11/","link":"","permalink":"https://blog.littlero.se/post/mexico-visa-2017-11/","excerpt":"明年 (2018) 年要去秘魯，在今年六月時就先搶到超便宜的機票，從首爾到利馬只要一萬六不到！飛機是坐墨西哥航空，在墨西哥中轉，然後墨西哥規定即便是轉機也要簽證（翻白眼），原本想說簽證不就是簽證嗎…結果沒想到墨西哥臺灣文化辦事處的評價… 摁 白眼翻到後腦勺了… 於是乎參考了網路的資料之後，加上我們同學已經有人辦成功，今天就換我去打魔王了～","text":"明年 (2018) 年要去秘魯，在今年六月時就先搶到超便宜的機票，從首爾到利馬只要一萬六不到！飛機是坐墨西哥航空，在墨西哥中轉，然後墨西哥規定即便是轉機也要簽證（翻白眼），原本想說簽證不就是簽證嗎…結果沒想到墨西哥臺灣文化辦事處的評價… 摁 白眼翻到後腦勺了… 於是乎參考了網路的資料之後，加上我們同學已經有人辦成功，今天就換我去打魔王了～ 網路資料方面可以參考 墨西哥簽證一次過關心得 2017.6 墨西哥停留簽證（Visa de Visitante）申辦心得 兩篇都是今年的，算是很有參考價值。以下直接進入主題，簡單來說我今天辦簽證準備的資料如下： 填好第一頁的申請表 + 空白的第二頁 點我下載申請表，英文填寫 (收走) 護照正本 (收走貼 VISA) + 護照資料&amp;簽名那頁整面的影本 (收走) 身份證正本 (退回) 沒戴眼鏡的 2 吋大頭照一張 (收走) 存摺正本 (退回) + 存摺影本 (收走) 簡易行程 (退回) + 電子機票 (退回) 名片 (收走) 剛剛好的現金 (每個月浮動的新臺幣，等值 36 美金)，2017 年 11 月是 1092 元，網站可查 墨西哥商務簽證文件暨文化辦事處在世貿大樓 15 樓 ( Google Map )，門口會貼今天可以接受幾個人申請簽證（例如今天是 30 個），不曉得現在是不是人比較少了，我七點半去的時候是第 3 個，八點也才 5 個，九點還不到 20 個！！前兩個都是竹科男，一個要去墨西哥旅遊前一晚就住在臺北，一個是要去工作的一早開車上來辦。大家都超拼的 XD 九點整辦事處的小姐就會放人進去抽號碼牌，她會在旁邊盯着你抽，然後接下來就是叫號了，今天是開兩個櫃檯，所以一號二號就先上了，結果二號很快就被打槍了！！財力證明準備的不對 Orz 他只有印半年的對帳單，於是馬上就換我了，小姐會叫你把全部的資料都丟進去櫃檯裡面，把剛剛說的 1 ~ 7 都放進去，小姐就會自己在那裡翻來翻去，然後我存摺其實印了半年的記錄，最後多的影本都被退回來了（真的很奇怪，對帳單不是也是印存摺的交易記錄而已 XD 為何對帳單要一年，存摺只要三個月），小姐看到一半把我的申請表第一頁拿給我說 Place of birth （中文寫出生國，但我那時候想說跟護照一樣好了）他們是要國家，不是護照上的那個（臺灣護照是寫城市），所以叫我補個 R.O.C.，然後我的公司也只有寫名字 Chunghwa Telecom，小姐說大部分都有 “股份有限公司” 的字樣，雖然我的名片也只有公司名字沒錯，但叫我再查清楚公司的名字，我查了一下原來中華電信的正式英文真的有 Co., Ltd.，就補上去，基本上如果看一看沒問題，她接下來會問一些簡單的問題，例如她就問我是不是第一次去墨西哥，然後問我要幹嘛的（轉機），同行人員有幾個人，他們簽證都辦了嗎，然後提醒我現在簽證只有半年，其實我有點早，如果我的旅行延期要小心簽證的問題。接下來就是照相、壓指紋（左右手食指），然後就是付費，就可以拿到一張證明了，上面會寫取件時間，我是兩天後就可以拿（也就是禮拜三辦禮拜五就可以取件了）。出去坐公車時看時間是 9:20，才花十分鐘左右！而且一次過！感謝網路。 最後說一下網路說的一些重點 財力證明最簡答的就是走 A 了，所以就是印存摺三個月內的記錄，每個月至少要有一筆五萬以上的餘額，然後記得要辦的日期往前推七天內有交易記錄哦。印的時候一頁 A4 只能印一面（真的很浪費 QQ），封面 &amp; 內頁有明細的都要，然後記得要** A4 置中** 護照影本同財力證明，一定要 A4 置中，護照邊緣要清晰 申請表的工作職稱跟公司他會對名片 (的英文)，所以名片有英文的也帶一下吧 當時填申請表的筆可帶可不帶，我有帶他就叫我用同一隻筆簽第二頁，但是我看現場其實他們有準備筆，所以沒帶應該沒關係 手機關靜音就可以，我查中華電信的英文名字時小姐也是直接叫我拿手機查 XD 後記： 結果小弟友人一行三人去挑戰之後竟然連續失敗，不是存摺影本有一行模糊（才一行！！），就是說大頭照不合格，結果他們立刻去快拍機重照，結果有開美肌模式的過了，沒開美肌的還是被嫌棄大頭照（暈），所以用快拍機的記得開美肌模式啊。","categories":[{"name":"遊記","slug":"遊記","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E8%A8%98/"}],"tags":[]},{"title":"推文分享 DDoS 教育部網址不起訴處分過程","slug":"non-prosecution-of-ddos-ministry-of-education-Taiwan","date":"2017-10-28T14:57:41.000Z","updated":"2018-06-07T14:27:51.000Z","comments":true,"path":"post/non-prosecution-of-ddos-ministry-of-education-Taiwan/","link":"","permalink":"https://blog.littlero.se/post/non-prosecution-of-ddos-ministry-of-education-Taiwan/","excerpt":"承 被調查局請去喝茶，在過了快半年多之後，我都以為沒事然後快忘記他的時候，就收到了人生第一張刑事傳票。這張傳票是從高雄地方法院檢察署發的 (很奇怪對吧！後面會說原因)，傳票上會有被傳人地址、姓名、案號跟案由、應報到日期與處所，還有最重要的是他會說你是被告 XD (或證人)。 這篇文章是紀念性質，主要是說一下如何找律師資源跟學習到的法律知識，最後是感謝我的家人跟朋友的關心。","text":"承 被調查局請去喝茶，在過了快半年多之後，我都以為沒事然後快忘記他的時候，就收到了人生第一張刑事傳票。這張傳票是從高雄地方法院檢察署發的 (很奇怪對吧！後面會說原因)，傳票上會有被傳人地址、姓名、案號跟案由、應報到日期與處所，還有最重要的是他會說你是被告 XD (或證人)。 這篇文章是紀念性質，主要是說一下如何找律師資源跟學習到的法律知識，最後是感謝我的家人跟朋友的關心。 收到這張傳票的時間也是他媽的超扯，傳票通知我應到日期是 2016/08/11(四)，地址是高雄市橋頭區經武路 868 號 (也就是高雄地方法院橋頭辦公室)，然後我收到的時間是 8 月 9 號，也就是那個禮拜二！(寄到我的戶籍地址去，順帶一提一般來說一定會被老媽唸到爆炸 XDDDD 我足足被唸到現在兩年了還在唸)。 當天 (2016/08/09) 下班時接到我媽的電話，開頭就是一陣罵問說你又怎麼了 blahblah…，然後就在 line 傳了照片給我看 (感謝科技，不然我覺得我媽可能說不清楚那張傳票的內容 XD)，看了一下罪名後發現原來是 2015 年被調查局約談的事，看起來是被調查局告了，但是時間緊迫啊！開偵查庭時間竟然是兩天後，這時候不得不說臺灣政府根本存心搞人 = = 也太扯了，兩天前才通知，如果我出國沒收到不就 gg (但實際上可以一次未到沒關係，後面會說)。 知己知彼百戰百勝鍾亞達律師這時候第一件是是冷靜，先來個之前學過的 美國海豹部隊呼吸法，okay…冷靜後就是開始找解決方案，因為基本上兩天後就要開庭，我什麼都沒準備啊啊啊啊，所以先來找律師吧。摁…首先打開 Google （誤）大海撈針啊，怎麼可能知道哪家律師事務所比較好 XD，這時候我突然想起被調查局抓走回來之後我有請我一個後來走法律專業的大學同學推薦一個律師 鍾亞達。於是我立刻播了電話給鐘律師，聊了一下之後，他很阿莎力的叫我隔天一早趕快去找他。 然後 08/10 一早我就直奔他服務的律師事務所了，稍微幫他複習了一下 2015 年去調查局的情況之後他稍微幫我分析了一下，首先就是我那天根本不該去，調查局用電話非書面收到根本可以不用理他，基本上雖然電話通知也是合理的，但是因為沒有強制力，所以那天根本不該受他的威脅去，但是都已經去了，事已至此，他建議的第一步是：跟檢察官請假，什麼！出庭還可以請假？！是的這是可以請假的，但是以一次為限（正常的情況下可請一次，再一次沒去的話檢察官有機會發佈通緝令），鐘律師說因為目前什麼都沒準備，去了也不知道會問什麼，所以與其直接去面對檢察官，不如先請假把出庭時間延後，再慢慢思考怎麼應對，於是他叫我先打電話跟書記官請假（書記官的聯絡方式在傳票上都會有寫）之後寫書狀傳真過去，然後叫我順便問問書記官有沒有其他資訊可以提供，例如可以問看看本案有幾位被告啦之類的，因為對於這種公共議題，鍾律師說其實是可以訴諸媒體的，畢竟教育部黑箱課綱一案，在民進黨政府時代就直接整個翻盤，整個社會氛圍也確實覺得國民黨政府時期的教育部是不對的，因此他覺得如果被告很多，就聯合起來辦記者會就搞定了 XD 可惜理想很豐滿，現實很骨感。我詢問書記官之後雖然書記官很大方的跟我說了資訊，但是被告只有兩位，也就是除了我之外只有另一位（也太衰），但是書記官人還不錯（網路寫這個基本上是看書記官爽不爽跟你說，他沒有義務要交代的這麼清楚），把另一個被告的名字也跟我說，然後說這位也是高雄人，至此我終於瞭解難怪這個案子為何會辦在高雄了。以下是鐘律師幫我擬的書狀。(一般來說找律師擬書狀就要收幾千元不等的服務費，但其實這是固定格式，從法院的網站也有得下載，例如 桃園地方法院檢察署請假書狀，所以其實自己賺也可以) 再來鐘律師說第二部分是考慮請求轉移管轄，因為被告（就是我）的居住地在臺北市，然後教育部也在臺北市，因此基本是符合轉移管轄的要件的（兩個要件其一是犯罪發生、結果地都是同一地點，其二是被告、告訴人都在同一地點）。但是基本上我大中華民國法律沒有規定請求一定會成功，只是人民的權利，但是不是檢察官的義務，基本上也是看見檢察官高不高興，鐘律師判斷一般機率都不高，因為轉移管轄權需要另外分卷宗、分案號，對他們來說很麻煩。因此我考慮了一下就之後再說吧，反正回高雄是小事。 然後鍾律師就幫我分析了一下刑法第 360 條【無故以電腦程式或其他電磁方式干擾他人電腦或其相關設備，致生損害於公眾或他人者，處三年以下有期徒刑、拘役或科或併科十萬元以下罰金。】可能的偵辦方向主要就是第一句的以電腦程式或其他電磁方式干擾，所以基本上如果我真的沒有做，或者他們查不到 IP 就無法起訴我了。 另外還跟鍾律師聊了一些法律面的考量，主要是如果能不起訴當然就不起訴，最差的情況是緩起訴，但緩起訴一般會搭配一些條件，例如罰金、或者社會服務，他說緩起訴也是好的結果，因為過了緩起訴的時限之後就會被轉成不起訴，因此在警察那都還是查不到犯罪的（還是可以申請良民證），這個記錄只有在法院自己內部才看得到，所以他覺得在偵查階段請律師還是有好處的，不要爲了省錢就不請，如果最後還是被檢察官起訴了，到法院還是可以拼無罪，差一點是緩刑，這種本刑五年以下的基本上沒在關人的，監獄已經擠滿人了 XD 接下來跟鍾律師談到比較正式的部分是要不要委任律師當這次的辯護人，但是如果案子在高雄他無法幫我（這也是他前面提到為何要轉移管轄的原因），他們在南部有合作的律師事務所，他可以幫我轉介，但是價錢要自己去談他無法介入。我接着就問他一些辯護人的細節，如下： 偵查庭階段，辯護人基本上沒什麼角色，因為偵查只是檢察官在比對兩方說詞、證據，通常辯護人（律師）只是最後確認筆錄到底有沒有不利於我方的說詞並修正而已。 若要委任偵查庭的辯護人，錢只有全部偵查庭的部分，如果被起訴，法庭的錢是另外算的。 鍾律師人不錯，後來聊到假設之後轉移管轄成功的話，想要請律師可以找他，因為是朋友介紹的所以可以算我便宜一點 XD 基本上他說偵查庭的部分他們有包全部偵查庭的，也有記次的，但是當然他們希望包全部偵查庭的比較好（貌似跟開發票 or 什麼有關…?），包全部偵查庭就是付一次錢，不管出幾百次偵查庭都沒問題，記次的就是出一次收一筆，出一次收一筆這樣。我算了一下他報給我的價格大概出庭三次等於包全部偵查庭的錢。但是他說很少偵查庭會這麼多次（除非是很棘手的案子），而且我這個案子看來相對單純，也許一次就沒了（一次就被起訴?! XD），所以他可以給我記次的選擇。至於價格的部分，優惠後的包庭大概就是我一個月的薪水吧 =.= 啊多麼痛的領悟～ 所以當下當然沒答應，他說可以給我時間考慮，至於今天的一小時諮詢費跟擬書狀的錢都不用收了（撒花）。 財團法人法律輔助基金會基本上請律師真的太貴了拉，而且我對自己蠻有信心的 XD，所以決定先多找律師聊聊天就好，於是 Google 了一下發現 財團法人法律扶助基金會 有在提供免費的 20 分鐘諮詢，沒魚蝦也好只好加減聊了，於是快速的用網路預約後，當週的禮拜六馬上就去了。 結果這次遇到的女律師專長是民事案件…所以基本上是雞同鴨講了…，我說我被用刑法 360 條起訴，她還翻了一下才知道（我內心是內牛滿面啊 QQ），說檢察官問的話老實說就好…blahblah…，只好當作花 20 分鐘找律師聊天了 = =” 但還是有一些收穫啦，這位女律師說能帶到偵查庭的證據還是可以儘量準備，也許到時候能直接派上用場。現場基本上也是可以呈上證物的。 評律網中間我還用過 評律網，但是覺得像大海撈針，索性放棄。 裁判書查詢正所謂知己知彼百戰百勝，基本上要知道檢察官會問什麼首先要知道到底過去有哪些判例，但是基本上偵查階段的報告是不會公開的，法院只有公開判決書（也就是被起訴之後，法庭的判例），所以只好去 司法院裁判書查詢 查看看過去有什麼 DDoS 跟妨害電腦使用罪的判例，但是只能說相當少， DDoS 沒幾個判例，妨害電腦倒是很多，例如男友偷偷用密碼解開女友的手機結果被告的這種 = =，但是 DDoS 的真的很少，我記得只有一例是真的被查到 DDoS 的程式攻擊遊戲橘子還是哪一家公司導致真的有損害。所以基本上看看這些還是有幫助的。看完之後更覺得我不會被起訴了（欸～） 黃帝穎律師後來我又跑去 ptt 法律版發文求救，借問衆鄉民的概念，然後我就收到如雪片般飛來的信（誤），鄉民人都還不錯，有些會私信我說他們在某某律師事務所可以提供協助（應該也是收費的吧，沒打去問不知道），然後有個鄉民提到說其實很多民意代表都有免費的法律諮詢，其實也可以打去問看看，然後他順便推薦給我一個律師 黃帝穎，黃律師是前民進黨法律顧問，專門打擊馬英九?(誤)，反正看 wiki 是還蠻厲害的 XD，於是乎想說既然是很會打刑事案件而且這件事情跟國民黨也有關，不如就去諮詢看看。黃律師的聯絡資訊在 他的 Facebook 都有，所以我就播了聯絡電話，基本上也不是本人接的啦，他有小幫手，然後就約了一下可行的時間，然後我就請假就過去找黃律師了。 不得不說薑還是老的辣。 到了預約的那天我帶了滿手的資料過去找他，黃律師人也很好，聽我說了一下之後幫我分析要如何攻防，但是首先他問我想不想要轉回臺北，我說如果可以的話也是方便，但沒有也沒關係，可以試看看，然後他就很迅速的直接幫我擬了一張書狀給我還連信封都給我，叫我自己去寄。然後我忘記拍照了 Orz。 然後隨即進入正題，再說一次黃律師也說我那天根本不應該受威脅就去了 QQ，他覺得可以要求筆錄無效 :P，他建議我先立刻 刪除推文，我說刪除推文不就表示認錯嗎？他說對就是要表現出知道錯了所以刪除推文，如果檢察官在問何時刪除的就說忘記就好，重點是表現出知道錯了，他說緩刑的要件之一是態度良好，有無悔過態度。然後就說我當時去調查局不應該說這麼多的，基本上我如果去那裡什麼話都不說，他們是真的拿我沒辦法的，只能抓我抓到一定的時間就一定要放人了，在證據不足的狀態下，也就是無法證明那是我本人推的狀態下他們也無法告我，所以他跟我說這種情況說我帳號可能被盜了是差不多的，基本上這樣會變成調查官要跟 Twitter 要 IP，然後證明這是我本人的 IP 推的，但是因為 Twitter 跟臺灣沒有法律協議（Google 跟 Facebook 有，但是好像僅限重大刑事案件），所以他估計很難拿到我的 IP。沒有 IP 就無法證明是我本人推的，也就是無法告我。 上面是先消除我有犯罪動機的部分，他說接下來是處理犯罪事實的部分。基本上只要我說沒有連線只是純粹轉貼，而且轉貼之前也不知道這個是真的攻擊網站還是假的攻擊網站，轉貼後也沒有點擊進去看，然後檢方也查不到我的 IP 那這邊就比較好處理。 然後這是唯一有收我錢的律師，但是給的意見真的最受用就是，而且黃律師說你這個也算公益案件，最後只收我一些 (他叫我不要透露 XD)。然後說如果真的轉到臺北有需要可以找他。 上戰場結果就在跟律師都搞定如何回答之後…就這麼又過了半年，只能說法官真的很忙 XD，我一度以為案子要拖了兩年，連電視出現的案子都比我的還早開庭 -.- 看來我這個真的是小事而已，於是就在我又歡樂的快忘記的時候，傳票又双叒叕出現拉～～～ 這次終於是提早了快一個禮拜後才要出庭的通知，時間是 2016/12/19，但是地點換了！不是在橋頭了，是在高雄市區了（撒花），地點在高雄地方法院 (高雄市前金區河東路 188 號)，時間是下午於是我就請整天，早上坐高鐵想說順便回去雄中找以前的老師好了。 時間差不多了就拿着傳票跟身份證去報到處報到，報完到之後他們會叫你到指定的偵查庭地點前面等，不知道是不是高雄市政府快窮死，我那間偵查庭外面的走廊暗的要死，我以為自己在玩惡靈古堡，但是因為提早了快十五分鐘，結果在外面等了蠻久的，法警才出來收傳票，收完叫你繼續等，時間到了就被傳進去了。（結果也沒有檢查有沒有手機之類的物品，所以其實要錄音也許是可以的，但我沒錄拉，被抓到真的 gg） 進去後發現臺前只有兩個人，一個是檢察官，一個是打字感覺比我還慢的書記，然後終於看到另一個被告了，是個比我還年輕的弟弟啊！然後一開始檢察官一樣先確認身份，然後開始偵查，不過說真的這場檢察官幾乎都是問另一個被告，其實我就是插花的而已，檢察官問到下一場時間都快到了還沒開始問我，最後就草草的隨便問了我一些問題。 一開始檢察官主要問另一個原告都是針對他有攻擊事實的一部分，現場檢察官有準備他們 Server 的連線記錄 (可能是 Firewall log)，印了一本超厚的像字典一樣的書，問原告這個 IP 是不是他的，然後也直接承認了 O_o，然後問一些攻擊手法，因為檢察官不是念資訊的，真的要完整解釋手法也很困難，而且貌似調查局的調查官的報告沒有太詳細，檢察官還誤解一部分資訊，大概審了接近一個小時後才輪到我，一開始檢察官說抱歉讓我特地從臺北下來（咦，這麼謙虛的檢察官），然後就隨便問了我一些問題而已，大致上跟黃律師猜的差不多，就是為何要 PO，那則推還在嗎，為何刪除，最後就是問我認不認罪，結果我說這個要看到底我的攻擊是不是成立（模糊 XD），然後隔壁的原告弟弟還幫我說話，叫我不要認罪，一陣混亂之後檢察官就要宣判了，他判原告弟弟下次出庭帶有功於社會的一些文件證明過來，就判他緩起訴，然後叫我下次不用來了。然後我們兩個就一起走出庭了。 後來跟那個弟弟邊走到捷運邊聊天，才發現原來他是 84 年次的，是個中輟生，現在正在自己創業，平常會輔導高中高職資訊社（雄中、雄工…etc），果然英雄出少年，比我小十歲已經在創業了（汗…)，這次事件純粹是好玩，他說他 11/26 那天調查局 (新聞) 跟一群警察七點多衝進他家，他奶奶嚇死了，叫他起床，結果第一次他以為奶奶在開玩笑繼續睡覺 XD 結果沒想到他奶奶還是一直叫，後來才發現是真的，然後他家機房的電腦就全部被沒收了，後來調查結束後整個 Format 還給他，但是他也不敢用，怕硬碟被調查局塞東西了 XD 就趕快賣掉重組一臺比較省事，不過他沒想到會有另一個我被拖下水，哈哈哈哈。總之後來換了一下名片，加了 Facebook 好友。就當這次事件是多認識朋友吧。 後來我幾乎又忘記這件事之後約半年，在 2017/05/27，我就收到不起訴處分拉～ 再度撒花，這個案子總算是告一段落了。親自走一趟，學了不少法律知識 XD","categories":[],"tags":[{"name":"法律","slug":"法律","permalink":"https://blog.littlero.se/tags/%E6%B3%95%E5%BE%8B/"}]},{"title":"安裝 Redmine - postgresql, nginx, rbenv","slug":"install-redmine-with-postgresql-nginx-rbenv","date":"2016-01-31T12:48:05.000Z","updated":"2016-04-10T03:28:18.000Z","comments":true,"path":"post/install-redmine-with-postgresql-nginx-rbenv/","link":"","permalink":"https://blog.littlero.se/post/install-redmine-with-postgresql-nginx-rbenv/","excerpt":"Redmine 是一套專案管理軟體，我們單位之前都用 Trac 不過 Trac 更新速度慢功能也沒什麼在增加，所以最近換單位要重建基礎服務後，學長決定把 Trac 改到 Redmine。Redmine 是用 RoR 的技術寫的，所以主要就是需要 Ruby，DB 的部分則是 mysql, postgresql 都可以。前端的部分可以用 Apache 也可以用 nginx。本片主要介紹我比較習慣的 postgresql + nginx 的組合。至於 Ruby 因為 Ubuntu 14.04 比較舊，所以使用 rbenv 搭建 Ruby 2.2 的環境。","text":"Redmine 是一套專案管理軟體，我們單位之前都用 Trac 不過 Trac 更新速度慢功能也沒什麼在增加，所以最近換單位要重建基礎服務後，學長決定把 Trac 改到 Redmine。Redmine 是用 RoR 的技術寫的，所以主要就是需要 Ruby，DB 的部分則是 mysql, postgresql 都可以。前端的部分可以用 Apache 也可以用 nginx。本片主要介紹我比較習慣的 postgresql + nginx 的組合。至於 Ruby 因為 Ubuntu 14.04 比較舊，所以使用 rbenv 搭建 Ruby 2.2 的環境。 在網路找到兩篇參考文章，此文基本上就是各取所需組合起來的，請參考最下面的參考資料。 安裝套件首先更新 Ubuntu 全部的 pkg 確保都是最新的。 12sudo apt-get updatesudo apt-get -y upgrade 然後安裝 Ruby 跟 Passenger 安裝的相依工具 1sudo apt-get install -y build-essential zlib1g-dev libssl-dev libreadline-dev libyaml-dev libcurl4-openssl-dev PostgreSQL 的套件 1sudo apt-get install -y postgresql postgresql-server-dev-9.3 nginx 的 1sudo apt-get install -y nginx-extras ImageMagick 的 1sudo apt-get install -y imagemagick libmagick++-dev 版控工具 1sudo apt-get install subversion git 建立 redmine 使用者帳號建立一個 user 供 Redmine 服務使用 12sudo adduser --disabled-login --gecos 'Redmine' redminesudo su - redmine 以下開始用 redmine 這個帳號操作 安裝 Ruby這裡使用 rbenv 來建立跑 redmine 的環境 12git clone git://github.com/sstephenson/rbenv.git .rbenvgit clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build 把 rbenv 加入 shell 變數 123echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.bash_profileecho 'eval \"$(rbenv init -)\"' &gt;&gt; ~/.bash_profileexec $SHELL -l 接着可以準備安裝 Ruby 了 1rbenv install 2.2.4 安裝完畢後可以確認一下 12rbenv global 2.2.4ruby -v 以下的操作先回到可以用 sudo 的帳號 接着先建立給 Redmine 用的 postgresql 資料庫 123sudo -u postgres createuser -P redmine# 輸入想要的密碼兩次sudo -u postgres createdb -E UTF-8 -O redmine -T template0 redmine 安裝 RedmineRuby 環境準備好之後就可以裝 Redmine 了 123sudo mkdir /home/redmine/redminesudo chown redmine:www-data /home/redmine/redminesudo -u redmine svn co http://svn.redmine.org/redmine/branches/3.2-stable /home/redmine/redmine 先設定 puma 1curl -Lo /home/redmine/redmine/config/puma.rb https://gist.githubusercontent.com/jbradach/6ee5842e5e2543d59adb/raw/ 首先需要改一下 Redmine 的設定 1sudo -u redmine vi /home/redmine/redmine/config/database.yml 改成如下 1234567production: adapter: postgresql database: redmine host: localhost username: redmine password: \"********\" encoding: utf8 關於 EMail 的部分也可以改一下 1sudo -u redmine vi /home/redmine/redmine/config/configuration.yml 如下 1234567production: email_delivery: delivery_method: :smtp smtp_settings: address: \"localhost\" port: 25 domain: \"example.com\" 接着是安裝 Redmine 需要的相關 Ruby package (請變成 redmine ) 12345echo \"gem: --no-ri --no-rdoc\" &gt;&gt; ~/.gemrcecho -e \"# Gemfile.local\\ngem 'puma'\" &gt;&gt; Gemfile.localgem install bundlerrbenv rehashbundle install --without development test 產生 Token (編碼 cookie 用)，建立 db 與初始資料 123rake generate_secret_tokenRAILS_ENV=production rake db:migrateRAILS_ENV=production rake redmine:load_default_data 至此我們已經可以先測試了 1ruby script/rails server webrick -e production 打開瀏覽器，填入 http://localhost:3000 看看有沒有畫面出現，有的話我們可以 ctrl + c 先回來。 首先我們需要啓動 redmine 的 script 1234sudo curl -Lo /etc/init.d/redmine https://gist.githubusercontent.com/jbradach/17e73fa6ddc365bb0242/raw/sudo chmod +x /etc/init.d/redminesudo update-rc.d redmine defaultsservice redmine start 然後 nginx 的部分也很簡單，抓一下設定即可 (可以把 default 移除) 123sudo curl -Lo /etc/nginx/sites-available/redmine https://gist.githubusercontent.com/jbradach/31ad6d9c84c3be3b5730/raw/sudo ln -s /etc/nginx/sites-available/redmine /etc/nginx/sites-enabled/redminesudo service nginx restart 這時候看瀏覽器 http://localhost 應該就有 redmine 了。 參考資料 Redmine 3.2 を Ubuntu Server 14.04.3 LTS にインストールする手順 Install Redmine with Nginx, Puma, and MariaDB/MySQL on Ubuntu 14.04","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"}]},{"title":"被調查局請去喝茶","slug":"make-tea-in-investigation-bureau","date":"2015-11-26T14:54:44.000Z","updated":"2015-12-17T04:37:55.000Z","comments":true,"path":"post/make-tea-in-investigation-bureau/","link":"","permalink":"https://blog.littlero.se/post/make-tea-in-investigation-bureau/","excerpt":"啊，沒想到這輩子有機會被馬英九政府請去喝茶，一切都是從某個禮拜四早上說起，本來當天要去臺中出差，結果當天還在公司集合時，大約九點就收到一通電話，接起來後對方表明是臺北市調查局的盧先生，希望請我去 泡茶 啊！不是，是做個說明，要把通知書傳真給我，因為我趕着出發，我說你要現在傳真嗎，因為我現在不方便接傳真，等等要到臺中出差，可以先跟我說案由是什麼嗎，對方就建議我把出差取消，而且說我一定要到現場才方便跟我說案子，我說如果今天就一定要過去那幹嘛一定要傳真給我，我就說那不用了，我直接過去就好，問了對方地點 (臺北市基隆路上的臺北市調查局) 跟聯絡方式後跟他說大約一小時後到。","text":"啊，沒想到這輩子有機會被馬英九政府請去喝茶，一切都是從某個禮拜四早上說起，本來當天要去臺中出差，結果當天還在公司集合時，大約九點就收到一通電話，接起來後對方表明是臺北市調查局的盧先生，希望請我去 泡茶 啊！不是，是做個說明，要把通知書傳真給我，因為我趕着出發，我說你要現在傳真嗎，因為我現在不方便接傳真，等等要到臺中出差，可以先跟我說案由是什麼嗎，對方就建議我把出差取消，而且說我一定要到現場才方便跟我說案子，我說如果今天就一定要過去那幹嘛一定要傳真給我，我就說那不用了，我直接過去就好，問了對方地點 (臺北市基隆路上的臺北市調查局) 跟聯絡方式後跟他說大約一小時後到。 到了之後先去警衛室換證，然後坐在那裡等警衛叫調查官來帶你，進去後我就問盧先生說，我是因為什麼案子來的，他就說因為絲滑 (小聲)，然後我就笑了 XDDDDDD，我說是教育部那個哦，他就說對啊，無奈貌 XDDDD，然後一開始先去會客的地方把我的通知書給我，看了一下罪名是妨害電腦使用罪，簽了一張確實收到通知書的文件就說等等要帶我去調查室做筆錄，調查室超級簡陋的拉 XDD 沒冷氣，裡面除了我、盧先生還有另一個是 key 電腦的年輕人，年紀跟我差不多姑且稱乙好了。我一開始被帶進去後看到盧先生沒關門，想說要不要關門啊，我就問他，盧先生說：可是關了這個房間會很悶 XDDDDDDDDD 沒冷氣！！！有點扯，好吧我想說反正我也不 care 是不是被偷聽 XDD 就算了，我說好吧那開門好了，然後就是會遞 茶 水給你，然後就大概說一下接下來就會進入正式的筆錄流程，不過很奇妙的是好像沒有錄音跟錄影… 一開始會先做基本的詢問，就是問姓名、身份證字號、戶籍地址、是否有前科、是否有清寒證明或原住民可以免費請律師，然後接下來就是正式的詢問了，首先他先問我學歷是哪裡，成大工程科學所，還問我主修什麼，就說計算機組，然後又問我的工作經驗，答曰：研發替代役進去中華電信，然後他就問我在中華電信數分做什麼 (突然覺得他有我的基本資料了啊 XDD 都知道我是數分的了)，我就說一直都是系統管理員管 Xuite 的，然後問我過去在哪些單位待過，我就說內容處、雲端處、匯流處，不過好像大家聽到內容處都想說這什麼 XD，所以他又問是內…?，內容處就是 content 的內容，最後他說所以你有資訊背景啊；然後他就拿出一些我的資料，比方說我的 Twitter 頁面 https://twitter.com/neoesque，然後因為我的 Twitter 頁面又有連接到 http://about.me/neoesque，然後我的 about me 又連到 Facebook、Google+、LinkIn、GitHub，anyway 我就不是個匿名的人啊 XDD；一開始的詢問是，問他們印下來的這個 Twitter 是不是我的賬號，答曰：是，然後問我的賬號是不是都是我本人發的，答曰：是，我沒有粉絲 QQ；然後問我在網路還有哪些 ID，答曰：只有 neoesque 或我的英文名字 Yi-Chieh WANG；接下來是問我還有在哪些社群活動，我說：都有誒，很多，你想得到的都有 Facebook、Twitter、Google+、微博、人人也都有我的賬號 (調查官應該傻眼了 XDD) 反正後來也沒記錄這麼多 = = 再來就是重點了，他直接問我的某推是不是我親自推的 https://twitter.com/neoesque/status/627456198271369216 就是這則，答曰：是，然後問說我的動機是什麼，我說分享時事而已，順便表示贊同學生；然後問我 DoS、DDoS 是什麼，要記錄在筆錄上的，所以就稍微解釋 Distributed Denial of Service 就是一群人進去便利超商，每個人都買了一萬件商品，讓櫃檯處於忙碌的結賬狀態，無法服務其他人，然後很有趣的是前面說的乙先生會拼，調查官說哎呦你也懂哦，乙說因為我也是學資訊的 XD；然後問說為什麼我要加 #慎入 的 tag，答曰：因為我知道 DDoS 會對 Server 造成很大的負擔，是告訴網友請小心再點；然後又問了我知不知道網域 owner 時誰的，網站又是誰寫的，我說我怎麼會知道，我在網路看到的誒 XD，我絕對不是作者；接下來就問我有沒有點擊該連結，我說有啊，因為我是網站管理員，要看一下現在別人都怎麼攻擊的，所以我點進去後看了一下程式碼就離開了；後面接着就是他們印出那個網站的原始碼，要我解釋 (莫名其妙) XDD，不過還好叔叔是有練過的，我還看得懂 js，我就在那邊解釋了起來他是開一個 iframe，然後遇到固定的 timeout 就會 refresh 一次 blahblah；然後他問我知不知道有哪些人也點擊了這個網址，我最好會知道 XDD；又問我點擊完後有沒有看教育部的網址，（當時教育部的網站早就被別人打趴了 T 口 T），我就說沒有，沒確認；最後就是再問一些我在哪裡點擊的，不過我忘記前租屋處的地址了 XDD，總之最後寫了一個那附近的地址然後備註不祥；最後就是問以上是否都是實話，不是實話生兒子沒屁眼 (誤)，沒啦，就是是否都屬實這樣。 然後筆錄完就是他們會印三份，然後就是蓋章這樣就結束了。 在離開筆錄室之後就跟調查官聊了一下，反正就是閑聊，內容大概就不方便透露了 XD。接下來就是等收信，如果檢察官要起訴就會收到要出庭的信，沒有事就是不會受到信了。","categories":[],"tags":[{"name":"喝茶","slug":"喝茶","permalink":"https://blog.littlero.se/tags/%E5%96%9D%E8%8C%B6/"},{"name":"調查局","slug":"調查局","permalink":"https://blog.littlero.se/tags/%E8%AA%BF%E6%9F%A5%E5%B1%80/"}]},{"title":"日本東京、箱根自助之旅","slug":"Trip-to-Japan-Tokyo-Hakone","date":"2015-06-06T03:36:14.000Z","updated":"2017-11-02T15:05:01.000Z","comments":true,"path":"post/Trip-to-Japan-Tokyo-Hakone/","link":"","permalink":"https://blog.littlero.se/post/Trip-to-Japan-Tokyo-Hakone/","excerpt":"第一次到日本玩，因為是跟高中死黨和他女友一起去，他很熟日本，所以我們一行四人 (加我妹) 就選擇自助，這次旅行的地點主要在東京 &amp; 箱根，一共六天五夜，是大多數到日本玩的旅客都會走的路線。時間是 4/1 ~ 4/6，也就是清明節假期，請兩天玩六天。","text":"第一次到日本玩，因為是跟高中死黨和他女友一起去，他很熟日本，所以我們一行四人 (加我妹) 就選擇自助，這次旅行的地點主要在東京 &amp; 箱根，一共六天五夜，是大多數到日本玩的旅客都會走的路線。時間是 4/1 ~ 4/6，也就是清明節假期，請兩天玩六天。 機票 &amp; 交通旅行在去年 2014 年九月就開始規劃了，因為日本旅行四月是旺季，有機會卡到櫻花季，所以一定要及早規劃，機票的部分是委託旅行社買 JAL 日本航空的機票，因為 JAL 每人的托運行李是兩個，23 公斤/件，也就是總重可達 46 公斤，如果有要到日本搬家電的真的是不錯的選擇，我同學這次就是要搬家電，所以就選擇 JAL。 我們從高雄出發到成田機場，來回一個人一萬四，雖然是六天五夜，不過實際上大概只有玩五天，因為第一天 4/1 搭班次 JL812 從高雄飛是 9:25，抵達日本是 13:50，加上到旅館可能也四五點了，然後最後一天 4/6 搭班次 JL811 是傍晚 18:25 的飛機，回到高雄是 21:45。日本航空來回我們都是坐到 波音 767。 JAL 的飛機餐有哈根達斯 =w= 另外飲料同學強力推薦點梅酒蘇打 (梅酒ソダ - うめしゅソダ) 在飛機上還看到圓形的彩虹！！ 另外在日本境內的交通方式很簡單，在東日本就是買 Suica (西瓜卡) 就好了，雖然日本鐵路有 JR &amp; 數家私人鐵路公司也有自己的 PASMO，但是現在 Suica 都通吃就是，Suica 在出機場往車站走就會看到販賣機了。 另外我們此行會到箱根，交通是坐網路鼎鼎有名的小田急浪漫特快，基本上如果只是要坐一般座位也不需要搶就是，不過如果是要坐它的展望席，則要在一個月前搶 (比方說買 7/7 就要在 6/6 淩晨搶)，訂票頁面，展望席分前後，當然是前展望席是最好的，原本我沒搶到展望席 (因為我記錯時間了 QQ)，不過後來我每天晚上有事沒事就 Reload 一下訂票頁，後來很幸運的在一個禮拜後的晚上被我搶到 3 前展望席 + 1 後展望席，而且前展望席還是第一排！幸運到有剩，本來想說我去坐後展望席就好，結果我後來跑去跟同學擠 XDD，至於回新宿，因為我們會去御殿場所以基本上就是坐小田急的高速巴士回去，在小田急遊客中心可以預約座位，後面會提到。買到票只是先保留，記得要付錢！日本人還真不錯，付錢的時間我記得好像是一個禮拜，不像臺鐵兩天內就要付款完。 浪漫號展望席就是直接一整片的大玻璃窗可以看到美景，直接感覺自己就是列車駕駛 XDD 住宿我們行程規劃是 4/1 - 4/2 住新宿，然後 4/3 去箱根玩，4/4 - 4/5 在住新宿，在新宿的四晚我們都住同一間 格蘭貝爾 (Granbell Hotel)，就在新宿火車站附近，從東口出來走路約十分鐘，距離還 OK，床都是席夢思的，而且是 2014 年新開幕的所以房間都很新，這家可說英文，缺點就是比較貴一些，一間雙人房 4033 / 天。然後去箱根當然就是要泡溫泉啦，我們選擇的是老牌子一之湯，它在箱根很多地方都有設旅館，我們訂的是新館 (塔ノ沢一の湯新館)，一泊二食，每個人 4016/天，實在是有夠貴 = =，這家也可以說英文，不過新館交通實在有點不方便，距離車站還要走一下下山路，如果要到箱根的遊客建議定強羅的飯店比較方便 (但強羅的一之湯只有日文)，強羅幾乎可以說是箱根的交通中心。 4/1 東京NEX 成田機場 - 新宿車站一到成田機場後很順利的就出關啦，移民官完全不說話的，進入日本需要壓指紋，移民官會跟你比動作，壓完之後就 OK 了，出了機場就可以直接看到 JR 的旅客服務中心了，在這裡可以買到 NEX 的車票到東京市內，票價現在在促銷來回 4000 日幣/人，超級便宜。基本上說英文是可以通的，不過注意的是只有去市區的票會先打座位，到時候要回機場時要在新宿 (出發地) 再打車位。 繼續往車站走的方向也可以順便買到在東日本遊玩必備的西瓜卡。 從成田機場到新宿要 1 小時 20 分左右。 其實去年本來沒有打算要看到櫻花的，不過我們運氣真的太好了，剛好搭上櫻花滿開～坐 NEX 的時候一路上都有櫻花看，日本真的處處是櫻花誒 *0* NEX 列車有中日韓英語言，不過臺灣人本來就看得懂漢字 XD 其實沒中文也不是問題。 帥氣的 NEX 車頭。 NEX for Narita Express 成田快車 小田急旅客中心 箱根周遊券因為我們要到箱根玩，在日本箱根地區的旅遊交通主要都是小田急企業提供的，然後他們在新宿車站就直接有小田急旅遊服務中心，所以出新宿車站之後在靠小田急百貨那側就可以找到了，這裡會有可以說中文的大陸人 (是的，此次旅遊凡事會說中文的店員/服務員都是大陸人)，所以直接說需求，他就會依照需求建議你買什麼票。 我們預計 4/3 一早去箱根周遊，然後 4/4 早上去小王子博物館，接着下午去御殿場的 Outlet。因此我們買了箱根周遊券，基本上就是箱根的交通工具都可以搭乘，包含盧之湖的海盜船、空中纜車、登山纜車、登山巴士、小田急高速巴士，都不限次數搭乘，票有兩天跟三天，我們只玩兩天，票價日幣 6000。其實箱根的券有兩種另一種是富士箱根周遊券，本來看官網我們以為要買富士箱根周遊券，因為我們要做小田急高速巴士回新宿，不過買票時那個服務生說買箱根周遊券也可以免費坐，只是要先預約 (怕沒座位)。然後因為御殿場回新宿的高速巴士會跟箱根 (或 Outlet) 過來的交通車有兩個會合點：東明御殿場 (東明高速公路口) 與御殿場火車站，巴士從火車站發車所以如果要從御殿場車站上車要比較早一點 19:05，如果是高速公路口則晚五分鐘 19:10，所以我們從 Outlet 坐交通車坐到東明御殿場的巴士站再換車時間會比較充裕一些 (不過也才多五分鐘就是)。 至於前面提到一個月前就買好的浪漫號車票不需要換票，直接用周遊券過就可以進入車站內，到時候如果真的要驗票直接拿印出來的購票證明就可以了，不過其實在車上也沒有列車長來看就是。 買完票之後就是直接殺去旅館 checkin 啦，格蘭貝爾從新宿東口出來比較近，新宿車站實在是大到誇張，JR 加私營鐵路加捷運一共有十來個月臺，出口分北中南，東口、西口在北邊，中央東口跟東南口、南口、新南口，總之是個只能乖乖跟着 Google Maps 走的車站 XD 格蘭貝爾飯店嗯。基本上就是小到不行…有夠窄，不過大致上來說是乾淨明亮的空間。 日本免不了的是都有免治馬桶，不過這個真的是我做過最高級的了，除了加熱的坐墊，還有排氣 (臭味?!)、吹乾屁屁、起身幾秒後自動沖水的功能，完全全自動，簡直驚訝。 山頭火因為今天晚上同學已經在一個禮拜前透過日本友人已經預約了新宿有名的燒肉六歌仙，所以我們晚餐想說先隨便填填肚子就好，山頭火在臺灣也有，不過沒吃過 XDD，這裡發生一件小插曲，就是拍日本人店內千萬不要拍到他們的臉！我不小心被老闆制止了 Orz…，總之來日本記得大部分的室內拍照 OK 別拍到臉就好 一樣貼心的有中文菜單 開動！叉燒超級好吃的 T 口 T BicCamera吃飽後回到車站附近跟同學想說先去 Bic 一下，此行還有一個目的就是買 Marumi 的 CPL (偏光鏡)，為什麼要到日本買呢，因為 Marumi 是日本品牌在日本買便宜非常非常多！另外一個就是因為價位便宜可以直接攻頂 /0_0\\，我要買的是 MARUMI EXUS CPL 46mm 這個在臺灣賣 3150 跟一個 62mm 這個售價是 4590，換句話說在臺灣買的話我至少要花八千啊啊啊～但是在日本原本價錢就低，加上日幣便宜、BicCamera 的 8% 免稅 + 7% off 折價券，根本是 3C 敗家天堂 QQ，可惜我 m43 頂級鏡頭都不小心湊齊了…不然來日本買至少省兩三萬有 XD 直接說最後的入手價好了：兩片 CPL 合計日幣 17344，換成臺幣大概只有 4600，直接省了 40% 以上啊，可怕誒！對了 BicCamera 都有會說中文的大陸人，語言基本上也不是問題，不過其實也沒有要說什麼就是，我一開始也是找一個店員拿圖片給他，問 これはどこですが 然後他就會帶你去了，結賬時才知道有會說中文的人。 目黑川夜櫻因為第一天到日本也不算早了，所以晚上只有排一個看夜櫻的行程，目黑川在中目黑站，直接搭東京 Metro 日比谷 (Hibiya) Line 就可以到了。下車站後依照 Google Maps 就可以走到目黑川了，一到就會看到一整排依河而生的櫻花，美！ 出賣一下我妹 XD 目黑川這裡拍夜櫻其實有點難，因為他沒有打燈，只有燈籠跟靠周邊的環境光，其實還蠻暗的，那附近算是住宿區，因此要不就是拉高 ISO，要不就是放大光圈放慢快門，前者畫質下降，後者景深會變小，如果可以帶腳架也許是不錯的選擇，不過去日本玩帶腳架是有點誇張了，總之蠻考驗拍照的功力，夜櫻也可以考慮去千鳥淵，同學隔天還去那邊賞夜櫻。 六歌仙 六歌仙 超多人推薦必吃的店，同學在一個禮拜多前就請日本友人打電話來預約，結果還是只有排到 21:45 分的，店內就有時間板子，沒預約的話現場要等到到 23:00，生意真的是很好。 我們四人被安排在一個小包箱，然後我忘記拍菜單了 XDD，可以跟他要中文的菜單，點菜別擔心，直接報號碼跟份數給服務生就好。 我們點基本款吃到飽雪之宴，每個人日幣 6800，真的是要價不菲，可是真的是超級超級好吃的，CP 值超高啊！ 一開始他會先上幾個基本盤 超好吃 der～ T 口 T 在臺灣還沒吃到這麼好吃的燒肉 也是有海鮮的 河豚… 第一次吃 😨 心態上會覺得蠻可怕的 干貝 4/2 東京賞櫻 - 新宿御苑、上野公園、淺草寺、晴空塔新宿御苑第二天，很幸運的是個好天氣加上前後這幾天是櫻花滿開的日子！原本行前我跟同學是想把看櫻花放在最後一天，今年不知道為什麼滿開日比較晚在四月初，不過看氣象預報 4/3 之後都是下雨天，聽說日本氣象廳一向都很準，所以行前決定第二天就殺去看櫻花，最後一天變成採購。 新宿御苑進去要收費，每個人 200 日幣。 裡面也是有新人在拍婚紗的 一堆櫻花樹滿開真的很壯觀 上野公園 &amp; 宇奈とと在新宿御苑待了大概一個早上，中午決定到上野公園附近吃有名的宇奈とと，是鰻魚飯專賣店，這樣一碗日幣 1000。 同學還點了一杯啤酒，頗有日本人的味道? 吃完飯後我們就去上野公園了。這裡的櫻花更密！ 櫻桃小丸子會看到的情節，一群上班族在櫻花樹下喝酒作樂 上野公園內也有星巴克，可以喝個咖啡休息一下在離開 離開上野公園也可以到阿美橫丁逛逛，就是一個類似西門町的地方，有賣衣服的、鞋子之類的，也有 RedWing 的店不過不見得比較便宜 XD，可以來逛看看。 うさぎや兔屋銅鑼燒隨後我們來到了也是在上野的兔屋銅鑼燒，也是非常有名的老店。 紅豆銅鑼燒😍 淺草寺離開上野後我跟我同學就在分開走晚上的行程，他要去千鳥淵看夜櫻，我跟我妹則是往晴空塔 Skytree 的方向前進，基本上跟着 Google Maps 一切就都沒問題了… 除了…搞錯月臺，我跟我妹以為月臺都互通的，所以看到車站就直接衝進去，結果竟然沒互通 XDD，所以只好去找站務員跟他說我走錯月臺了，講英文的可通，就領了一張如下的紙，到正確的月臺給另一個站務員就好了，他們一定很常遇到，哪有月臺不互通的啊 XDD 總之還是順利的到達了淺草捷運站了 雷門！ 淺草寺也都是櫻花 最後面的本堂 (觀音堂) 本堂旁邊有外國小女孩穿和服與大家拍照 本堂旁邊的五重塔 葵丸進逛完淺草寺跟附近的商家 (附近有些藥妝店可逛) 後大約就是晚餐時間了，想說吃完飯在去晴空塔，同學推薦這家葵丸進 一樣有中文菜單 @@” 我妹點的蝦天丼，日幣 1800 我點的特上丼，日幣 2580 因為上來前就已經淋醬汁了，實在有點鹹，而且軟軟的，味道是很美味不錯，不過不是脆脆的就覺得怪怪的，可能臺灣的天婦羅比較不道地 XD，總之也是好吃的一餐！ Skytree吃完飯後坐地鐵就可以來到晴空塔啦，本來是我妹想要上去，不過…排隊買票的人超多的 = = 早知道就要先預約了 0rz… 所以其實最後也沒上去，要去看夜景的記得先預約買票，都在裡面逛街 XDD 不過裡面就很好逛了，日本百貨公司都九點就關了，我們也沒什麼時間逛 裡面有龍貓專賣店跟拉拉熊 那是會動的龍貓 還有免不了的櫻花 XDD 櫻花季來日本不看到櫻花實在太難了 逛完之後就繼續坐着地鐵回到新宿了，從東口走到格蘭貝爾會經過一個小神社 - 花園神社，裡面種着白櫻花，結束日本行第二天～ 4/3 箱根隔天一早我們就準備出發到箱根拉～今天的早餐也是經過什麼吃什麼，我們經過了 First Kitchen 聽說是一家日本小有名氣的速食店，價格也很平民，所以當然要來朝聖一下。 小田急浪漫號吃完之後一樣回到新宿車站，小田急浪漫號的搭乘位置在小田急百貨那側，不過基本上跟着指標都還算好認就是，進入車站直接用第一天買的 箱根周遊券 磁卡票就可以進去了。 車上最中間應該是 6 車廂號吧，也是有販賣處的 第一排的 view 真的不是普通驚人 過了一個多小時總算是到箱根啦～～～ 箱根湯本咖啡廳據說到了箱根車站必吃的就是這一家，箱根咖啡 必點的就是這個啦，箱根布丁 當然咖啡廳不止布丁，也是有賣一些其他有的沒的，像是炸雞、麵包之類的，我跟我妹點了一份炸雞跟兩個布丁，合計日幣 960。 箱根的玩法箱根周遊券，顧名思義，就是箱根這裡的旅行可以繞成一個圓，順時針或逆時針都可以。 如果是逆時針，依序做的交通工具就是 箱根湯本 -(登山電車)- 強羅站 -(登山纜車)- 早雲山 -(空中纜車)- 桃源台 -(海賊船)- 箱根町 -(登山巴士)- 箱根湯本。 如果是順時鐘，則是 箱根湯本 -(登山巴士)- 箱根町 -(海賊船)- 桃源台 -(空中纜車)- 早雲山 -(登山纜車)- 強羅站 -(登山電車)- 箱根湯本。 然後所有的交通工具都不需要付費，直接用周遊券即可通行。 箱根神社很悲劇的是昨天還是大晴天，今天是大雨…不過其實行前就知道了，只是不知道這麼慘，坐浪漫號一路上氣候就越來越差，到了箱根可能是下午熱對流，雨勢漸漸變大。 我們本來的打算是走順時鐘的路線，所以要先去做登山巴士到箱根町，登山巴士的站牌就在箱根湯本車站出來的對面。不會等太久就有一班車 (時刻表都有時間)。 車程大約二三十分鐘就到了我們的目的地 - 箱根町，這裡有箱根神社可以參訪，所以我們就先去了，不過雨真的是很大！ Orz… 本來走到一半大家就想放棄了 = = 箱根神社第一鳥居，距離神社還有幾百公尺而已，但是雨實在太大了，幾百公尺也是極為艱難 途中我們還走進去某間商店避雨 Q_Q”，店家那位媽媽人很好，可惜不會說英文 = =”，本來要問距離裡面還有多遠，然後開始拿着地圖雞同鴨講就是，哈哈哈 走着走着，總算是看到神社的旗幟了 旁邊就是盧之湖，這天氣真的很悲劇，霧超大，一看就覺得不妙的那種… 終於到神社了 T 口 T，褲子、鞋子已經差不多全濕了 水手舍那裡剛好遇到臺灣團 XD 接着走過參道 (要爬大約三到四層樓的階梯上去) 就是本殿啦… 廣場正在修補 看看這個雨勢，真的是超級大 九頭龍神社 真的有九頭龍 關於箱根神社，可以參考 日本見聞錄 - 箱根神社 這個網頁的敘述。 經過一番努力，走回接駁車的地方，想必船也沒開，本來想說看看能不能做巴士繞過盧之湖，結果一上車說上面的交通工具 (空中纜車) 也沒有營業 嗚嗚嗚，看來真的只能回飯店了 只好默默的看了一眼海盜船乘船處就坐回程的登山巴士回到箱根湯本 T 口 T/ 改天有機會再來箱根了。 一之湯新館一之湯新館 位置在塔之澤站，可由箱根湯本站乘箱根登山鐵道至塔之澤站下車，沿山路步行約 8 分鐘。結果我們不知道我們做登山巴士到塔之澤站，還靠 Google Maps 找了一下，他在外面的路上完全沒有告示牌 = =… 建議訂房直接到 官網訂 就好，新館的好處是比較好搶，英文也可以通，不過真的要說交通方便建議還是訂強羅站的，因為箱根的交通中心是強羅。不過一之湯強羅就不能說英文了，也比較搶手的樣子。 坐登山巴士到塔之澤，走了一下山路還是到了 房間真的很大，我們定的是一泊二食的方案，所以房型好像沒得選，不過房間超大，很不錯 房間的溫泉我留給我妹泡，我自己去泡大衆池 😳，不過其實因為時間太早了，大衆池都沒人 XDD 和服初體驗！ 泡完溫泉大約五點多我們就準備下去用餐啦，結果我們本來還想點生魚片，結果一問那個服務生才說生魚片是需要先預定的 = =…，我們沒有先預定所以就沒得吃了，哎呀此行真的不少意外。 在店員的推薦下點了兩瓶櫻花酒，然後同學說很難喝！！ 溫泉蛋 飯後還有附上一球冰淇淋。 房間外就有一株盛開的櫻花，晚上注意到戶外的溫泉池上面都有櫻花花瓣，美 4/4 箱根 - 小王子博物館、御殿場 Outlet、回新宿小王子博物館今天的行程上午是我指定的 XD，亞洲唯一的小王子博物館就在箱根拉，怎麼可以不來，今天的行程規劃很簡單，上午小王子博物館，下午就去御殿場 Outlet。 箱根除了小王子博物館，臨近的地點還有玻璃之森，也是很漂亮的地方，不過可惜我們時間不夠，無法塞這些行程，箱根如果認真玩可能要排兩天整才玩的玩，他的地位有點類似臺北陽明山 XDD 從我們住的一之湯塔之澤要到小王子博物館，首先要坐登山電車到強羅站在換登山巴士。 塔之澤是個無人車站，很幽靜的車站 等沒多久，電車又準時出現拉。日本的交通工具真的準時的可怕。 箱根的登山電車跟阿里山小火車一樣，是採用之字形的建設，所以火車會來回來回，其實是約爬越高，並不是倒退走，我妹一開始還問我怎麼倒回去了 XDD 到了強羅，站外不遠處就是轉登山巴士的地方啦，全部的站牌都有寫往哪個景點去，很好找，再不然那裡也都有站一個服務生在服務，如果不懂的可以直接問，日本觀光業真的是很貼心啊，連站牌都有專人服務。等待車子的途中有一列電車要往箱根湯本開，我拿了相機要照相，司機還很開心的微笑 say hello XDD 乘坐指定的登山巴士之後就到了小王子博物館啦～～～～ 廣場就有小王子的星球 B612 裡面也有展示廳，不過內部禁止拍攝就是，大部分是作者生平的介紹，最後有全世界小王子譯本的收藏。 你看到蛇吞象還是帽子？ 最深處有間玫瑰教堂，可以做手工書籤，有專人教你怎麼做 完成！！ 發現教堂裡面的小玫瑰 在小王子博物館撿到野生日本小女孩一枚 (誤)，超可愛的啦～而且不怕生 館內有一家咖啡廳，不過我們預計是要到 Outlet 吃，所以就沒在這裡停留了。 最後面就是可怕的紀念品區，我差點失心瘋了 XDD，每一樣都想帶回家啊 T 口 T 最後挑了日本小王子譯本、一個小王子陶瓷裝飾 (放桌上那種)、紙膠帶跟一本筆記本。 御殿場 Outlet在小王子博物館要到 Outlet 有兩個方式，一個是到小王子博物館外面就有的站牌坐紫線的登山巴士 (也就是從強羅站到小王子的那臺) 到御殿場，不過這個有個問題是這線的登山巴士一小時才一班，我們沒有先抓好時間結果剛好錯過 = =”，另一個方法是往前走一些些，我記得是仙鄉樓前站 (大約差 70m 而已)，那裡有小田急箱根高速巴士可以坐，我們很順利的不久後就來了一臺，這個巴士比較大型，車上還有插座可以充電！然後這個因為只是來回 御殿場 - 箱根 的所以不需要跟來往 御殿場 - 新宿 那個一樣要先預約，我們上車後根本沒人。 不過箱根高速巴士只有到御殿場火車站，坐到火車站後要再轉車，我們一開始坐到那裡找不到接駁車，後來詢問路人才知道坐哪班車，也就順利的到御殿場了。 御殿場在天氣好的時候可以看到富士山，不過延續昨天的壞天氣，今天都陰天陰天的，所以沒看到富士山。這個 Outlet 不算大。分東側西側，日本品牌的折扣比較多，如果是美國、歐洲牌子其實算起來沒有在美國買便宜，但是日本品牌真的是超級便宜，我在這裡買了 BANDAI 的玩具海賊船兩艄、羅的模型，一雙鞋，一個紳士帽，同行的就我買最多 XDD，這裡的店有的貨幾乎都被陸客掃光了，同學有點小失望，一些店有可以說中文的店員，不過購物其實即便是英文也是 OK 的。 前面有提到，從御殿場回新宿需要先預約座位，我們約了 19:10 的，所以算好時間我們就離開御殿場，坐接駁車回到東明御殿場站，等待回新宿的高速巴士。 新宿 - Manneken 比利時鬆餅、元祖壽司回到新宿後我們發現一家就在車站出口大排長龍的鬆餅店，所以基於人類的好奇心，我們也就排了 XDD 這樣三個合計 474 元日幣，合臺幣才 120 左右真的是很便宜誒。 不過這個其實是買來當晚上的點心的。今天的晚餐是要吃同學推薦的元祖壽司。 備有玄米&amp;煎茶兩種可以泡 接下來就直接上圖啦～ 因為我也忘記哪些是哪些了 T 口 T 如果需要菜單上的也可以直接點。 我跟我妹吃了 11 盤 ( 125 元 x6 + 200 x3 + 250 x1 + 600 x1 )，總計日幣 2376，兩個人吃超級飽的也好吃！同學點了 15、16 盤的樣子。 這家店偶爾也會看到外國人進來，然後也有日本上班族，不過日本人好像都只拿最便宜的然後就吃他個好幾盤。 #小小觀察 曬個當天在 Outlet 的戰利品。 4/5 東京迪士尼海洋樂園從新宿要到迪士尼樂園只要跟着 Google Maps 的指引轉車就沒問題啦，到了迪士尼站之後要轉他們內部自己的電車系統，一樣是要錢的 Q_Q，除非是買他們的套票。不然像我同學是從臺灣這邊旅行社代購的比較便宜的票就不能免費乘坐了，所以我們一樣是刷 Suica 進去，因為要到海洋有點距離，如果是陸地樂園就不需要坐他們的環狀電車了。 這是我去的第三座迪士尼，香港、奧蘭多、日本！ 我們去玩的時候剛好是復活節～ 也是有穿的很華麗的小公主來玩的… 終～終～終～於到啦～ 處處都是復活節 海洋的中心是一個人造港，也是水上遊行表演的地方 不過由於我們比較晚出門，結果到海洋已經開了，本來我們是想做最有名的遊樂設施 - 玩具總動員瘋狂遊戲屋，不過人實在是太多了，我們一入園就去竟然直接本日的 Fastpass 都沒有了 = =，不愧是最有名的遊樂設施 所以我們就趕緊先去換另一個 FastPass - 地心探險之旅。不過因為這個實在太熱門了，抽到的時間是下午一點的。 驚魂古塔搶到後我們緊接着就先去排第一個遊樂設施 - 驚魂古塔，他就是一個在黑暗的高空中上升又落下的遊樂設施，不過我們排這個實在排太久了，我們排了兩個多小時有…排到一半我們又可以去抽下一個 Fastpass 了 = =，討論了一下決定下一個是印第安納瓊斯，我就自己拿着我們四個人的票出發了。 我們那天是禮拜日去的，結果一堆日本學生妹都穿制服去玩。倒是外國遊客比例比日本人低蠻多的。 第二張 Fastpass - 印第安納瓊斯 已經是五點了 = =” 由於驚魂古塔在距離入口處約一半的地方，然後印第安納瓊斯在最後面，來回至少也花了半個小時，我以為我同學他們會快到了，我全程都用衝的，結果我回來之後他們才前進了五步吧 XDD 這真的很扯，以後到迪士尼真的不能排假日 (不過這次真的是不得已的，因為考量到後面都會下雨，所以才調換時間)，回程看到古堡前面的廣場有些復活節裝飾，反正閑着也是閑着，我就問我妹要不要去拍照，反正隊伍繼續給我同學排。 最後總算是順利坐到驚魂古塔了，就是一個在黑暗中上上下下的東西，哈哈，坐完驚魂古塔，算算時間也差不多可以坐地心探險，我們就先去坐了。 然後午餐基本上就是看到什麼吃什麼。 好吃的烤雞腿，一隻 500 日幣 中午遊行下午時間我們先暫時回到中央廣場區要看下午的遊行 我不知道為什麼那個男的要對我笑…我只是想拍他女友的大玩偶啊，這樣怎麼玩遊戲啊啊啊啊 然後從上圖可以看出來當天是下雨的…所以復活節特別遊行也沒有了 T 口 T… 換成一般表演 = = 看完之後我們一樣就先隨意亂逛，然後在裡面的餐廳吃個下午茶 吃完距離坐印第安納瓊斯還有一些時間，所以我跟我同學就先暫時分道揚鑣了。我妹說這次都還沒找玩偶拍照，所以就決定去找迪士尼海洋明星 - 達菲 拍照嘍。地點在 漁村迎賓小屋 這裡預估時間還蠻準的，我們進入時說約一小時，還真的一小時就排到了，因為工作人園真的很嚴格把關，進入之前會先問你是要自己拍還是用他們的，我說用我們自己的，他就不會安排工作人員拍了，然後還發生一件小插曲，因為我不知道只能拍一張，結果我拍完第一張橫的還拍了一張直的，不過動作很快 XDD 所以有拍成功，但是工作人員這時候說不行哦，只能拍一張而已 = =，不過也沒有要求我把照片刪掉啦，人還不錯。 印第安納瓊斯 &amp; 憤怒雙神時間過得很快，也快到下午五點，就準備到 印第安納瓊斯 集合了 然後印第安納瓊斯旁邊有另一個也可以抽 Fastpass 的遊樂設施 - 忿怒雙神，所以我們就順便換了一下，這個人好像比較不多，我們換到六點左右的。原本我妹還在考慮要不要，因為這個是雲霄飛車，特色是他有兩個 360 度的環，會被倒吊，所以會怕，不過後來還是拖她去坐 XD 晚上遊行都坐完之後就天黑了，晚上的迪士尼呈現另一種美 火山偶爾會噴發 晚上時間一樣回到廣場看晚場遊行 &amp; 煙火 其實本來我是有錄影的…不過除了一些意外，影片都不見了，只剩下最後 30 秒 XDD 整個在搞笑，不過晚上表演很精彩就是，可惜了中午那場，這次來除了櫻花也留下不少遺憾，哈哈 由於在迪士尼沒吃晚餐，晚餐我們回到東京車站吃斑鳩，也是很有名的拉麵店，要吃什麼先去販賣機點，付完錢拿到單子後就可以入場了。 一碗 1000 元日幣，這個價位很平易近人。 照慣例，曬一下在迪士尼的戰利品 4/6 築地市場、東京車站築地市場很快的來到了最後一天了，今天一早跟我同學決定衝築地市場吃生魚片，我們挑了一家他每次來都會吃的店，不過這家店跟他以前來已經不一樣了，多聘了幾個中國大媽，講話嘮叨死了 = =，就不想吃某個還一直被推薦，最後只好還是點了 XDD (耳根子很軟的人)，早知道來這裡說英文 大媽推薦的海鮮丼 - 日幣 2500 元 我妹點的 同學喜歡吃海膽，點了一個海膽丼 吃完早餐後心滿意足，我們還稍微晃了一下築地市場，基本上就是傳統的魚市場，根本不像觀光客該來的，我們在逛的時候還聽到外國人用英文說這裡好沒有日本味，事實上也是真的，這裡根本就是日本國外吧，到處都外國人。逛完後，我同學今天排定要回新宿採購電器，所以我就跟他再度分道揚鑣，我跟我妹要去東京車站逛逛。 也有皮卡丘，不過真的沒在賣什麼 東京車站 其實本來出來是想走到皇居的，不過今天天氣大好 = =，實在有點熱…就懶得走了 XDD，我妹說想去日本郵局找明信片，於是跟我妹到車站附近的郵局剛好他跟一家百貨公司相通的因此想說買完後直接在百貨公司喝咖啡度過最後悠哉的日本時光，順便把日幣花光好了 在東京中央郵便局旁的 JP Tower 不便宜的咖啡…早知道去星巴克，還可以買到特大杯的 時間算算差不多了，就準備回新宿跟同學回合了。 回到新宿車站 NEX 坐車處 在等車時看到很妙的雙層火車 Byebye 新宿，Byebye 日本，下次一定要再來把遺憾補完，哈哈","categories":[{"name":"遊記","slug":"遊記","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E8%A8%98/"}],"tags":[{"name":"日本","slug":"日本","permalink":"https://blog.littlero.se/tags/%E6%97%A5%E6%9C%AC/"}]},{"title":"Walt Disney World Resort in Orlando, Florida","slug":"Walt-Disney-World-Resort-in-Orlando-Florida","date":"2015-03-14T13:02:38.000Z","updated":"2018-06-20T13:33:28.491Z","comments":true,"path":"post/Walt-Disney-World-Resort-in-Orlando-Florida/","link":"","permalink":"https://blog.littlero.se/post/Walt-Disney-World-Resort-in-Orlando-Florida/","excerpt":"續上篇，延續美西行之後，大家各自散會後，我就一個人獨自踏上往東岸的旅程，因為我要參加的 SUSEcon 14 是在奧蘭多舉辦。","text":"續上篇，延續美西行之後，大家各自散會後，我就一個人獨自踏上往東岸的旅程，因為我要參加的 SUSEcon 14 是在奧蘭多舉辦。 洛杉磯-奧蘭多因為是美國本土的飛機，所以在不是在洛杉磯機場的國際航廈，我是坐達美航空，我覺得達美航空網站還不錯有繁體中文，而且他的 App 做得也很好，還有行李的運輸進度，達美在洛杉磯是第五航廈，所以跟同伴分開後我就從國際航廈走到第五航廈 (中間跨了第四航廈，不過走路也不到十分鐘而已還蠻近的)，首先是要 check-in，結果走到第五航廈有點嚇到，因為沒有櫃檯是 check-in 的，只有量行李重量託運的櫃檯 = =”，繞了一下發現原來都是自助的 (後來發現達美有開櫃檯 check-in，大概是中午休息時間?!)，不過這樣也好，自助就不會被問一堆英文了。 他的自助機一樣也有中文界面可以選，所以都可以很安心的點，包含行李有幾件也都照機台上面的指示做即可。 不過因為我的班機是晚上九點四十三的，但是同學回台灣的班機是下午兩點的，所以其實我們差不多中午十二點就回到洛杉磯了，中間還差了九小時，所以我在台灣的時候就先辦了新貴通的 Priority Pass，準備進去第五、六航廈的貴賓室，這中間有考慮的點是洛杉磯第五航廈的貴賓室沒有淋浴間，只有國際航廈才有淋浴間 (國際航廈的貴賓室是長榮的，Holy Eva Air!)，本來我是想說休息時就順便洗澡，不過想想還是算了，因為如果我進去國際航廈的貴賓室等於我要安檢兩次 (進去國際航廈、出來、再進去第五航廈)，走來走去跟排安檢太浪費時間了，所以我最後還是放棄了，直接進去第五航廈好了。 結果在海關安全檢查時發生一件小插曲，就是我第一次過美國國內的安檢，不知道他們檢查的這麼嚴格，我只是把筆電跟平板還有手機擺在同一個托盤裡面，結果就被海關攔下來檢查筆電 (似乎是做硝煙測試) = =，然後那個外國人海關還一直說奇怪的中文，聽不太懂，都想叫他直接說英文好了，不過檢查完沒事就跟他說 byebye 了。這裡過的就是新的 X-光機 會照出全身的那種 &gt; /// &lt; 進入免稅區之後其實國內線沒什麼可以逛的，就一些綜合商店賣水賣書之類的那種，我逛了一下就直接進去他們的貴賓室了，進去時出示機票跟 Priority Pass 的卡片，然後他會要你簽名，就可以進去了，這裡我怕打擾人所以沒拍照，不過基本上就是食物、飲料 (除了酒) 都免費的，進去之後也有沙發跟桌子可以用，還有墊腳的沙發，讚，座位也都有插座可以充電，我就很悠哉的一直吃吃喝喝，連晚餐都省了囧。 美國國內線似乎都是小飛機，飛到奧蘭多的是波音 737-900，翼尖小翼變成在夜晚看的到的最大特徵。 因為這班是紅眼班機，洛杉磯是十點半離開，到奧蘭多要飛四小時，加上西岸飛東岸加時差三小時，到奧蘭多已經早上五點四十了，真的會累。不過一下機場看到奧蘭多機場也蠻大蠻漂亮的，而且終於抵達了瞬間覺得精神都來了，下飛機後要先坐捷運才會到機場本身領行李。 交通這次在奧蘭多六天都要住在 HYATT REGENCY Grand Cypress 裡面，因為 SUSEcon 跟他們有談優惠，每晚 149 美金 (未稅)，以四星級跟迪士尼樂園隔壁的飯店來說這種價格真的是經濟實惠了，不過交通變成是最大的問題，因為如果是住迪士尼樂園的飯店在機場就會有接駁車，而且奧蘭多的大眾運輸其實不是很發達，所以從機場到這家飯店比較麻煩。有幾種選擇可以用，第一種是最簡單但是最貴的就是坐計程車，單程大概 45 美金，另外一種選擇是坐公車，不過這個要轉來轉去的拖著行李有點麻煩，或者選擇只有 Orlando 才有的 Mears，點 Mears Shuttle 就可以預約他們的 Shuttle Bus 了，這種 Bus 是類似共乘的機制，他會來回各大奧蘭多的飯店跟機場，所以剛好他有到我住的君悅飯店我就直接預約來回了，價格很便宜我記得來回才 34 美金，不過因為我是坐 RedEye flight 所以到奧蘭多當地是早上五點多 (快累壞了 = =)，櫃檯都還沒開，又是一台 Kiosk，直接掃描網站預約並付款後單子上的條碼就可以了。 會印出 Receipt 跟 boarding pass，上車時把 boarding pass 給司機就好了。 走到指定的上車地點就可以看到司機大哥啦。 前面說是共乘，幸好是一大早，所以我這台車司機只有另外繞了一個方向去接另一組客人到迪士尼樂園未來世界 (Epcot)，但是到飯店也一小時之後了。 Chech-in 之後拿到的房卡，有 SUSEcon 特製的房卡，還蠻不錯的。 我的房間在九樓 view 還不錯！ 到達飯店 check in 後約莫八點了，因為沒有在機場洗澡，所以進房後就先梳洗一番，房間是雙人房的 (所以 149 美金真的很便宜！)，超級大的。 浴室是乾濕分離的，廁所也是分開的，很不錯。 梳洗完之後就直接在飯店內買了早餐吃。 吃完之後就準備去迪士尼樂園啦，Hyatt 有提供免費的接送服務，不過要先去跟他們大廳的門房預約，理論上應該都會有位置，因為我坐了兩天的接駁車車上人都不多，五六位而已。 奧蘭多迪士尼樂園門票 &amp; FastPass+先來說說迪士尼樂園的門票問題，迪士尼樂園門票實在是不便宜，要便宜的進去迪士尼我查了 PTT 後有幾種做法，第一種是找認識的迪士尼員工帶你進去 [免費]，好，我沒有認識的…，第二種是找住在奧蘭多的居民幫買票，因為當地有優惠，但是聽說現在抓的比較嚴格需要住奧蘭多的證明，所以結論就是乖乖買官方票好了，買官方票又有兩種選擇，一種是在官方網站買，另外一種是到現場買，我是比較推薦直接在網路買啦，一來是不用現場說英文 (還是很怕交談的意思 XD)，另外一個理由是奧蘭多迪士尼是用 FastPass+，直接在網站或 App 就可以預約 FastPass+，跟傳統的 FastPass 需要衝去抽票不一樣，所以早點預約也比較好規劃怎麼跑點嘍~ 迪士尼的票分單日、多日，然後可選的有 Base Ticket、Park Hopper(單日可跳園區玩)、Water Park Fun(可去水上樂園)、Park Hopper + Water Park 四種，像我主要是玩 15 &amp; 16 兩天，然後每天都只玩一個園區不跳園，所以就是買兩日+Base Ticket，共 188 美金，然後我去的時候因為剛好接近聖誕節 (明明就還有一個多月…)，迪士尼樂園晚上有個叫 Mickey’s Very Merry Christmas Party 但是是另外售票的…，不過其實可以不買文章後面會說明，所以小弟也不爭氣的買了 Q_Q，票價 67 美金，最後結賬時含稅共 271.58 美金 (奧蘭多稅 6.5%，16.58 元)，實在是有點可怕…，結賬後就會收到一封 Email 啦，附件有張 PDF 上面有條碼，印出來備用，到時候到櫃檯就拿著護照、刷的信用卡跟這張條碼去領票就好啦。買完票之後就可以到這個網頁先預約你在當日的 FastPass+ 啦~ 魔法王國 換到的門票是米妮的！ 我的規劃是第一天去魔法王國 (Magic Kingdom)，第二天去動物王國 (Animal Kingdom)，奧蘭多迪士尼很有趣的地方是因為他那邊有四大王國：魔法、動物、Epcot(未來世界)、好萊塢跟兩大水上世界，是全世界最大的迪士尼，然後來往各園區的交通都在魔法王國入口處旁邊會看到接駁的公車，從售票處到魔法王國的交通非常有趣，可以選擇坐船或者坐捷運進入魔法王國！！可能是奧蘭多天生湖泊就很多的關係。如果是選擇坐捷運中間會經過他們的飯店，也有一些迪士尼裝潢可以看。 往魔法王國交通船入口 往魔法王國單軌電車入口 既然有船坐，當然就是要坐船啦！！遠遠的就可以看到招牌城堡啦。 當天天氣好得不得了…大家都短袖，我還穿厚外套出門欸 (想說會待到晚上，而且是十一月半啊，奧蘭多緯度還是比台灣高很多啊，外國人超猛)， 米老鼠與華特迪士尼先生 分區奧蘭多迪士尼魔法王國一共有六個區塊，分別是美國大街 (Main Street, U.S.A.)、冒險世界 (Adventureland)、拓荒 (Frontierland)、自由廣場 (Liberty Square)、夢幻世界 (Fantasyland)、明日世界 (Tomorrowland)。以圓的方式繞一圈排列，最中央就是城堡。 城堡表演一進去時剛好看到城堡前的表演 中午遊行 Move It! Shake It! Dance &amp; Play It! Street Party然後緊接著中午有 大遊行 Move It! Shake It! Dance &amp; Play It! Street Party 啦。 額，其實有人問我自己一個人玩迪士尼會不會無聊，其實我覺得是還好啦，一個人比較自由想排什麼 FastPass 就自己安排，而且國外小孩子都很 High (坐遊樂器時)，加上迪士尼如果你是自己一個他通常不會安排別人跟你一起坐同一排，所以其實還好。我倒是看了很多遊行，然後中間穿插遊樂設施。 Space Mountain、 Splash Mountains、Big Thunder Mountain Railroads奧蘭多迪士尼有三大必坐的過山車遊戲，分別是 Space Mountain、 Splash Mountains、Big Thunder Mountain Railroads， Space Mountain 就是在烏漆麻黑的空間的雲霄飛車，速度感很快！大概是裡面最可怕的一個；然後 Splash Mountains 就是類似六福村的火山歷險，會有水濺起來，因為六福村有了這個我就沒坐了 :P；另一個就是 Big Thunder Mountain Railroads 這個是類似礦坑雲霄飛車也是很刺激！ 其中 Splash Mountains、Big Thunder Mountain Railroads 都在 Frontierland，Space Mountain 在 Tomorrowland。 Disney Festival of Fantasy Parade下午 Magic Kingdom 又有另一個遊行 Disney Festival of Fantasy Parade，一樣在美國大街找個位置吧~ 遊行影片 貼心的迪士尼有身障優先，我在迪士尼樂園發現很多阿公阿婆都坐代步車玩，可見迪士尼對身障人士真的很友善。 迪士尼的建築物都很卡通味，不過我分不出來什麼建築是什麼卡通就是。 偶爾也有一些大街上的表演可以看。不過歌我完全不會歌詞。 Mickey’s Very Merry Christmas Party時間也很快轉眼間就來到晚上了，前面說過迪士尼在接近聖誕節有特殊活動叫 Mickey’s Very Merry Christmas Party，因此到晚上時，有購票的民眾需要重新入場換憑證 (手環一個)，不過我後來發現有購票的民眾只是位置比較好 (在舞台正前方一大塊) 而已 = =，沒購票的還是可以看到一樣的表演跟煙火之類的，只是位置很差在中間廣場的最外圍。這裡還發生一個小插曲是因為他在活動快開始都會廣播，不過聽不太懂，也沒什麼特別留心，結果原來他就是在廣播如果有買票的民眾請重新入園，我是等到有人在驗票才發現要重新入園，幸好還是來得及趕上活動前。 重新入園後會被服務生綁一個手環，這手環的材質類似塑膠的，活動前會有人檢查是否有這個環，沒有的就會被趕出去中間活動區域，結果活動後我要拆還真的不容易拆，連釦環都很緊。 晚上活動有冰雪奇緣，所以城堡被裝飾的很像結冰的樣子！ 晚上的 Party 基本上晚上我都是全程錄影，不多說直接看影片 晚上活動城堡秀 Frozen Mickey’s Very Merry Christmas Party 晚上夜間遊行晚上還有一個夜間遊行 魔法王國城堡秀 魔法王國閉園煙火 奧蘭多迪士尼有兩個園區是每天都一定有煙火的，就是魔法王國跟 Epcot。我住的飯店房間剛好面向這兩個園區，所以每天晚上都可以看到煙火！讚！ 放完煙火後離園時美國大街開始下起了人造雪，還蠻漂亮的 動物王國第二天我規劃的是去動物王國，其實人家說四大樂園都很好玩，不過我對好萊塢比較不熟，然後 Epcot 好像遊樂器材比較多，但是小弟到奧蘭多第三天就開始會議了，真的只有兩天可以玩，所以最後考慮還是來走走看看風景、動物好了，於是跟第一天一樣，先做飯店接駁車到售票處，然後因為第一天坐船，所以今天我選擇做電車。 一早人就很多啊… 坐到魔法王國入口處之後就會看到接駁處了，走過去轉公車 (免費)，一下子就到了動物王國啦~動物王國是世界上迪士尼樂園最大的樂園。 入口處 我覺得奧蘭多迪士尼真的很先進啊！在入口處刷了指紋就會亮綠燈表示 OK 就可以進入了，整個電子化的很徹底，不錯不錯。 跟角色唯一的合照 XD 分區動物王國主要就五個區塊：Oasis、Discovery Island、Africa、Asia、DinoLand U.S.A.。Oasis 綠洲區主要就是入口處，後面接著 Discovery Island ；Discovery Island 這裡也是 Tree of Life 坐落點，整個園區的核心，旁邊其他區域都跟 Discovery Island 有橋相通，這裡比較有名的就是 It’s Tough to Be a Bug!，這裡也有園區最大的紀念品店跟兩間餐廳；Africa 這裡最有名的就是獅子王的音樂劇了；Asia 這區比較有名的就是 Maharajah Jungle Trek 有點類似在遺蹟中逛動物園的感覺還有 Flights of Wonder 鳥類表演跟遊樂設施 Expedition Everest；DinoLand U.S.A. 則是恐龍區，展示跟恐龍有關的東西，這裡有 Finding Nemo 音樂劇可以看，跟遊樂設施 DINOSAUR。 The Tree of Life一進入園區就可以看到動物王國的招牌 The Tree of Life 啦~ 高 44 公尺，寬 15m 的人造樹，真的很壯觀。 Expedition Everest一進去我就先去坐了 Expedition Everest-Legend of the Forbidden Mountain (聖母峰歷險—禁山傳奇)，他是動物王國唯一一個過山車遊戲，所以就先來坐。 Maharajah Jungle Trek因為 Expedition Everest 在亞洲區內，所以坐完之後就先走了一下 Maharajah Jungle Trek 各種奇怪的建築物 叢林裡面鳥就直接在你頭上，近距離接觸 很多種鳥類 DinoLand U.S.A.走著走著就來到恐龍區了 這裡一樣有個遊樂設施可以坐，時光機器，會一直旋轉，就很像把旋轉咖啡杯裝在雲霄飛車上 = =，不會到很暈不過也是一個小變態的遊戲就是。 DINOSAURDINOSAUR 是一個回到過去看恐龍結果卻失控的故事，反正就是坐車子看恐龍 XD 因為也是重點遊樂項目，所以隊伍很長，展示廳裡面有一些化石，跟 CARNOTAURUS 牛龍 的電動化石。 啊，然後排隊中剛好照到正妹一枚 Festival of the Lion King獅子王慶典在非洲區，也是必看的啦。 It’s Tough to be a BugIt’s Tough to be a Bug 是 3D 的電影，片長不長，還蠻有趣的 早上本來還出太陽的，結果下午竟然開始下起大雨…看來奧蘭多的氣候跟台灣也差不多啊… 不過我完全沒料到會下雨，所以沒帶傘也沒帶雨衣 = =”，只能儘量找有遮的地方或者等雨小在快速移動到下一個地方。途中經過一隻烏龜，解說員說這隻活了一百多年了 =口=。 Flights of Wonder本來想說下雨去看表演好了，因為時間也差不多，所以就走回亞洲區看 Flights of Wonder 結果表演到一半就因為雨太大沒辦法表演了 T 口 T 後來亂走又經過大猩猩區，發現大猩猩避雨的樣子跟人類好像，還蹲著一臉憂鬱的樣子，實在很有趣啊 走到大猩猩區最裡面會有玻璃隔著近距離觀看大猩猩，那裡也有解說員，走到這裡因為雨變大蠻多的，在這裡等了蠻久的 0rz… Kilimanjaro Safaris最後我跑去看我以為下雨不會有的行程就是 Kilimanjaro Safaris，不過雖然說是 Safari 其實也沒有很可怕，就是他們開車然後載著你進去繞一圈看野生動物，大部份的動物都遠遠地，很安全。直接上圖，這裡我是轉接 75mm 那顆照，m43 的等效就是 150mm 所以動物都很大一隻 XD，其實有的距離沒有想像中遠… 有點兇的牛? 長頸鹿也是有的 大象區長著很妙的樹啊，解說員形容這個樹像是倒長的一樣樹枝還比較像根。 犀牛 還有豹！奇怪這些動物都關在一起不會發生什麼事嗎 = = 我看起來沒有很明顯的區隔欸。 奇怪動物 2 長角羚羊? 解說員說的英文動物其實我根本不知道是什麼啊 T 口 T 繞一圈其實也不長，還蠻有趣的。 紀念品兩座樂園可以買到的紀念品完全不一樣，動物王國就是迪士尼的動物類的像是松鼠兄弟之類的，這跟我想的有點不一樣 XD，因為第一天去魔法王國其實紀念品沒有買齊 0rz… 本來想說動物王國會不會有其他可以挑，結果比較有名的大概就是獅子王、松鼠兄弟之類的 = =” 要注意一下就是。 奧蘭多回台灣基本上從迪士尼回到飯店就是逆著走一趟流程就是了，坐車回魔法王國門口，再坐飯店接駁車回飯店，然後接著就是三天的議程，第四天下午就要回台灣啦~ 我買的回程機票也是達美航空，從奧蘭多回到洛杉磯國際機場，然後行李可以直掛回台灣，也就是到洛杉磯之後完全不需要管行李，直接到國際廳報到就好了，回台的班機也是長榮的，結果我以為在那裡就可以說中文，可是似乎那天人很多，櫃檯服務人員是隔壁航空來支援的樣子 QQ，只好繼續說一下英文，她會問你是不是還有一件達美的行李… blahblah 之類的，原本出發前還在擔心回台的飛機，現在看起來都是多餘的，行李都是可以直掛的！從國內廳到國際廳也是走十幾分鐘就到了還算快。 進入海關檢查時可能是離開美國，檢查的超級隨便的啊 XD，筆電也放揹包就好，然後也沒有過 X 光機，只有過金屬探測器，美國人真是嘖嘖。過完海關就是趕緊衝免稅區買東西嘍~ 回台灣可能因為逆風 (地球自轉?) 的關係所以比較久要十四小時，這中間也是供兩餐，回到台灣踏到地上還是覺得家鄉好 :P","categories":[{"name":"遊記","slug":"遊記","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E8%A8%98/"}],"tags":[{"name":"美國","slug":"美國","permalink":"https://blog.littlero.se/tags/%E7%BE%8E%E5%9C%8B/"},{"name":"迪士尼","slug":"迪士尼","permalink":"https://blog.littlero.se/tags/%E8%BF%AA%E5%A3%AB%E5%B0%BC/"}]},{"title":"K760 Linux fn/多媒體鍵切換","slug":"K760-Linux-fn-多媒體鍵切換","date":"2015-03-12T07:38:17.000Z","updated":"2015-03-14T05:44:37.000Z","comments":true,"path":"post/K760-Linux-fn-多媒體鍵切換/","link":"","permalink":"https://blog.littlero.se/post/K760-Linux-fn-%E5%A4%9A%E5%AA%92%E9%AB%94%E9%8D%B5%E5%88%87%E6%8F%9B/","excerpt":"羅技 K760 鍵盤是一個一對三的藍芽鍵盤，而且是太陽能的，免換電池，使用上還蠻方便的，可是原生是適用 Mac / iOS 裝置，小弟公司電腦裝的是 Linux，其實拿來用也不錯，不過就是有個缺點就是羅技沒有針對 Linux 出鍵盤管理程式，所以沒辦法改掉多媒體鍵，在 Linux 很少用到多媒體鍵，反而是 function key 比較常用。 所以在網路先找到了 K810 on Linux 的解法，這個人有 OpenSource 他的程式碼，並且搭配了 udev 的修改，這樣電腦藍芽連接到鍵盤就會自動設定了，但是 K760 的 KeyCode 跟 K810 不一樣，所以又找了一下發現 這篇 有人抓出 KeyCode 了。","text":"羅技 K760 鍵盤是一個一對三的藍芽鍵盤，而且是太陽能的，免換電池，使用上還蠻方便的，可是原生是適用 Mac / iOS 裝置，小弟公司電腦裝的是 Linux，其實拿來用也不錯，不過就是有個缺點就是羅技沒有針對 Linux 出鍵盤管理程式，所以沒辦法改掉多媒體鍵，在 Linux 很少用到多媒體鍵，反而是 function key 比較常用。 所以在網路先找到了 K810 on Linux 的解法，這個人有 OpenSource 他的程式碼，並且搭配了 udev 的修改，這樣電腦藍芽連接到鍵盤就會自動設定了，但是 K760 的 KeyCode 跟 K810 不一樣，所以又找了一下發現 這篇 有人抓出 KeyCode 了。 於是小弟就改了一下程式碼，然後放在 GitHub，請直接 git clone https://github.com/neoesque/k760-linux-fn-conf.git，然後 ./build.sh 生出來的執行檔就可以控制了。但是注意的是你的 Linux Kernel 要記得編譯進去 [Device Drivers]-[HID support]-[/dev/hidraw raw HID device support]，確定 /dev/hidraw* 有出現之後就可以打 k760_conf -d /dev/hidraw0 -f off 就可以把多媒體鍵變成 function key 了。 如果出現 write: 0 were written instead of 7 也沒關係，還是會設定進去才對。 相關資料 Logitech K810 Keyboard Configurator How can I make the function keys the default on a Logitech K760 Bluetooh keyboard?","categories":[{"name":"3C","slug":"3C","permalink":"https://blog.littlero.se/categories/3C/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"}]},{"title":"用 Pushover 收 Ingress 成就點攻擊通知","slug":"ingress-email-attack-notify-to-Pushover","date":"2015-01-07T05:53:43.000Z","updated":"2016-12-20T14:21:56.000Z","comments":true,"path":"post/ingress-email-attack-notify-to-Pushover/","link":"","permalink":"https://blog.littlero.se/post/ingress-email-attack-notify-to-Pushover/","excerpt":"Ingress 是 Google 在 2012 推出的虛擬實境 (Virtual Reality) 的遊戲，基本上就是一個打打殺殺的遊戲，遊戲裡面分兩個陣營 Resistance (藍軍) 跟 Enlightened (綠軍)，在台灣好死不死剛好跟兩大政治陣營顏色一樣，看起來全世界是藍大於綠，但是台灣台北剛好綠大於藍，不知道是不是大家選的顏色剛好也有政治傾向 (笑)，不過遊戲歸遊戲，其實裡面的人倒是不大會聊政治，遊戲內有自己的通訊功能，但是很爛，所以大家還是會用第三方軟體溝通，通常大家都直接用 Hangout，不過也有少部份地區聽說是用 Line 之類的。 這遊戲有內建的被攻擊通知，可是他完全不能過濾你想收哪些通知，反正腳被攻擊或者 MOD 掉了就是直接無差別通知，不過有時候只想收特定 Portal 的攻擊通知，這時候該怎麼辦呢？原本我都用 IFTTT 這個 Notify when guardian portal is under attack #ingress 不過類似這種的有個缺點就是 IFTTT 是類似 polling 的，所以他是固定時間去問一次 Gmail，有時候我收到通知的時候都已經半個小時後，點都被打掉了 XD，搞屁，實在不夠及時，昨天在研究 Pushover 時突然發現他有 E-mail gateway，配合 Gmail 建立 Filter 時就可以 Forward E-mail，根本就是及時的 Push。 實驗了一下發現效果不錯，至少比原本的 IFTTT 及時太多了，雖然還是有腳會被打掉之類的，不過如果對方真的要打其實也阻止不了，通常八炮連發根本擋不住，但是還是具有一些拖延對方效果就是了，而且也可以當成整理特殊點的攻擊 Log。","text":"Ingress 是 Google 在 2012 推出的虛擬實境 (Virtual Reality) 的遊戲，基本上就是一個打打殺殺的遊戲，遊戲裡面分兩個陣營 Resistance (藍軍) 跟 Enlightened (綠軍)，在台灣好死不死剛好跟兩大政治陣營顏色一樣，看起來全世界是藍大於綠，但是台灣台北剛好綠大於藍，不知道是不是大家選的顏色剛好也有政治傾向 (笑)，不過遊戲歸遊戲，其實裡面的人倒是不大會聊政治，遊戲內有自己的通訊功能，但是很爛，所以大家還是會用第三方軟體溝通，通常大家都直接用 Hangout，不過也有少部份地區聽說是用 Line 之類的。 這遊戲有內建的被攻擊通知，可是他完全不能過濾你想收哪些通知，反正腳被攻擊或者 MOD 掉了就是直接無差別通知，不過有時候只想收特定 Portal 的攻擊通知，這時候該怎麼辦呢？原本我都用 IFTTT 這個 Notify when guardian portal is under attack #ingress 不過類似這種的有個缺點就是 IFTTT 是類似 polling 的，所以他是固定時間去問一次 Gmail，有時候我收到通知的時候都已經半個小時後，點都被打掉了 XD，搞屁，實在不夠及時，昨天在研究 Pushover 時突然發現他有 E-mail gateway，配合 Gmail 建立 Filter 時就可以 Forward E-mail，根本就是及時的 Push。 實驗了一下發現效果不錯，至少比原本的 IFTTT 及時太多了，雖然還是有腳會被打掉之類的，不過如果對方真的要打其實也阻止不了，通常八炮連發根本擋不住，但是還是具有一些拖延對方效果就是了，而且也可以當成整理特殊點的攻擊 Log。 這類通知的程式還蠻多的，iOS 有 Prowl， Android 有 Notify My Android，不過上述兩個就是沒有一個是跨平台的，還有另一套新秀 PushBullet 也不錯，不過他沒有 E-mail GW，所以這些都不符合我的需求，因為我裝置亂七八糟的，iOS (iPhone 5s)+ Android (平板 SH-06F)，所以最後決定還是用 Pushover 實作。 Pushover 的收費是只收 client 一次性費用，也就是 iOS、Android、電腦，各收 client 的錢，一個月有 7500 筆通知可用，超過可另外加購，基本上 7500 則通知/月 非常夠了，一次性的終身費用各兩三美元 (我是全買了大概也才 300 新台幣) 非常划算，申請完賬號後回到首頁應該會看到如下的 User key 下面有顯示一個 E-mail，我們先記起來等等會用到。再來是要新增一個 Application，基本上不新增也可以，只是全部的通知會顯示為 Pushover E-mail Gateway，為了分類還是建議創一個 App，所以我們到 Pushover-Powered Applications &amp; Plugins 這頁，會看到如下的頁面 因為我已經有三個 Apps 了，如果第一次進去應該會是空空的，我們先點 Create a New Application 會看到下面頁面 填一填按下 Create Application 送出就好了！回到剛剛的列表頁應該會看到剛剛創立的 App 名字，點進去會看到 App Key，如圖 一樣把這把 Key 記起來，目前已經完成一半了！我們需要的就是 User Key + App Key，基本上寄信就是把你要的信 FW 到 user_key+a=app_key@api.pushover.net 就好了！ 我們回到 Gmail 的 FW 設定頁，點 Add a forwarding address，新增剛剛組出來的 E-mail，比方說可能會是 abcdefghijklmnopqrstuvwxyz1234+a=567890abcdefghijklmnopqrstuvwx@api.pushover.net 就填進去，按下 Next 會提示說需要寄一封確認信，請到剛剛填的 E-mail 收信，這時候請轉移到隨便一個 Pushover 的 client，比方說我用 iOS 當例子： 會看到裡面有個 confirm the request，直接點下去就好了，到這裡已經完成 80% 了，最後一步就是建立 filter &amp; FW 到 Gmail Settings - Filter 點 create a new filter，在 Has the words 填入 Ingress Damage Report (Portal_name_1 OR Portal_name_2 OR …) 點 Continue 這裡可以順便分 label 不然就是直接勾 Forward it to 選你的 pushover mail 就大功告成了。 然後等你設定的 Portal 被人打就會收到如下的戰報了： 看吧！寫這篇部落格時，收了戰報還是來不及反應被夷平了 QQ","categories":[{"name":"遊戲","slug":"遊戲","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E6%88%B2/"}],"tags":[{"name":"ingress","slug":"ingress","permalink":"https://blog.littlero.se/tags/ingress/"},{"name":"pushover","slug":"pushover","permalink":"https://blog.littlero.se/tags/pushover/"}]},{"title":"美西峽谷行","slug":"USwest-canyon","date":"2015-01-03T13:12:33.000Z","updated":"2018-07-02T15:24:00.705Z","comments":true,"path":"post/USwest-canyon/","link":"","permalink":"https://blog.littlero.se/post/USwest-canyon/","excerpt":"故事的開始是 2014 年 6 月時，跟大學同學約了 11 月要到美西玩，從台灣出發 6 人，美國當地還有唸書+工作的同學 3 人，一共九人，反正是跟著玩 XD 就直接答應了，當時六月直接上長榮的網站剛好有特惠機票可以買，桃園﹣洛杉磯不到三萬 (29xxx) 就搞定了，旅遊時間是 11/7 (五) ~ 11/14 (五) 離開美西，11/7 禮拜五當天請了一個下午，回家整理一下，集合地點在松山機場外的客運站，我們坐客運到桃園機場。客運每 20 ~ 30 分鐘一班，還算蠻多班次的。","text":"故事的開始是 2014 年 6 月時，跟大學同學約了 11 月要到美西玩，從台灣出發 6 人，美國當地還有唸書+工作的同學 3 人，一共九人，反正是跟著玩 XD 就直接答應了，當時六月直接上長榮的網站剛好有特惠機票可以買，桃園﹣洛杉磯不到三萬 (29xxx) 就搞定了，旅遊時間是 11/7 (五) ~ 11/14 (五) 離開美西，11/7 禮拜五當天請了一個下午，回家整理一下，集合地點在松山機場外的客運站，我們坐客運到桃園機場。客運每 20 ~ 30 分鐘一班，還算蠻多班次的。 行前準備差不多就網路整理的那樣，反正記住最重要的只有護照跟信用卡就可以出國了 XD，不過因為這次是峽谷行我多準備了一些藥品跟撒隆巴斯，常備藥的部份我是去林青榖家醫診所拿，一包 500 的樣子裡面有十種藥，也可以順便跟他拿調整時差的藥 (估計是安眠藥之類的)，他會說一次吃半顆就好，應該還算蠻有效果的，至少我到美國的前兩天跟回來台灣後都有吃還算調整的不錯，而且同學打呼也都聽不到 XD 起飛我們搭的班機是 23:55 的飛機，原本同學說飛往美國因為會檢查的比較嚴格，所以最好是兩個小時前到機場，我們九點半到機場，進去後根本就沒多檢查什麼，跟原本的一模一樣，再加上自助通關 (可以到桃園機場辦，我是先在台北辦好)，我們大概花了一小時就進入免稅區了。 本次搭的飛機是波音 777-300ER，可惜沒搭到 Hello Kitty 的，那個引擎真的是巨大的有點誇張，飛行途中也很吵就是了 = =，飛行大概一個半小時之後就會被叫起來吃第一餐飛機餐，左宗棠雞的樣子不過不知道為什麼是不辣的 XD，還有另外兩種選擇，忘了是牛肉跟什麼，長榮的飛機餐還不錯吃，吃完第一餐後就關燈休息，由於飛行時間約 12 小時，而且到達洛杉磯當地是晚上 7 點半，第二餐好像是隔了八九個小時之後了，這餐有粥，還有魚鬆可以配，超級感動好吃的 XD，不過我沒照相, 看起來就是一般的粥，飛機上的飲料一般就是牛奶、啤酒、蘋果汁之類的，我喝過番茄汁，覺得還是不要點比較好 XD 第一次坐這麼長途飛行的班機，同學耳提面命，一定要帶拖鞋去換啊！不然飛機上腳會水腫，我乖乖照做，隔壁的同學沒帶拖鞋換，飛機飛了一陣子之後還真的覺得腳變大了，靴子很卡，所以記得一定要帶拖鞋去換，我是拖了一咖登機箱，夾角拖放裡面，安全檢查完進去免稅區之後就可以先換起來。 抵達洛杉磯第一次到洛杉磯機場，第一眼就是實在是很大啊，國際航廈也很新，因為是自助旅行，所以抵達後跟在美國工作的同學會合就先直奔租車的地方，本次旅行是跟 Hertz 租，出航廈後就會看到接駁車了。不過這次租車還蠻扯的，一開始是發現我們同學的名字沒在姓名牆 (他會列出今天租車的顧客名字車位是幾號)，不知道是不是因為我們沒先付錢，所以我們只好去櫃檯問，結果到了櫃檯，那個先生竟然開始推銷我們其他車種，說我們如果九人的話租兩台轎車太小了，一開始推薦我們租金破千的，嚇死人﹣馬上拒絕，後來推薦我們 Jeep SUV，確認車種之後又推銷我們車險，這種東西好像加減保比較好，所以我們有保車險，後來發現幸好車子真的有換，不然我看要容下我們幾個的行李箱還真的有點困難，連 SUV 的後車廂都差不多塞而已。結果光是租車就搞了兩個小時，我們離開 Hertz 已經十一點多了 = =。 巴斯托當天的行程預計是開到洛杉磯與拉斯維加斯的中點處﹣巴斯托 (Barstow) 過夜，車程大約兩個小時，所以我們抵達時已經一點多了，實在是有點累，不過也許是時差的關係，精神是還好，我們第一天住的飯店是 California INN，由於已經半夜衣著也是台北的穿著對美國來說這樣穿實在是有夠冷，大家一到時就哎哎叫，趕緊躲進去建築裡面，基本上內裝還算乾淨，而且一到就馬上洗澡準備睡覺，沒拍內裝，不過還算是 OK 的小飯店。 外圍就是沙漠… 這家的早餐還提供蠻多種類的，自助烤麵包，也有蘋果，還不錯。 隔天一早出發時因為隔壁就是加油站，所以決定先加滿油再出發，美國這裡都是自助的只是每家加油站的方法好像不太一樣，在美國的同學只熟悉一兩種，遇到不會的就要研究一番。 再來因為是長途旅行，所以需要載水上車隨時可以補給，所以我們就找了一家路過的超市，美國的超市跟台灣看起來差不多，不過就是食物區蠻可怕的，每種都堆得跟山一樣 XD，而且蔬菜都擺的很整齊，不像台灣菜會先分裝好。 肉類也是很壯觀 買完之後就繼續驅車往內陸開啦~沿路大部份都是沙漠，不過偶爾也是會有經過很大的湖，景色很漂亮。 胡佛水壩往內陸開的同時會經過 Hoover Dam 胡佛水壩，所以我們也稍作停留。 胡佛水壩跨於科羅拉多河上，建於 1931 年只花了 5 年就完成了，是美國最大的水壩，名字得自當時的美國總統胡佛。且胡佛水壩剛好是州的邊界橫跨兩個時區，所以可以看到兩個大時鐘在不同的水塔上，表示跨時區了，過了這裡時間要撥快一小時。 大峽谷接著就是 400 km 的長征了，要從胡佛水壩開到大峽谷。我們抵達大峽谷時已經快八點了，還沒進峽谷之前就先在峽谷外的牛排館吃飯了，抵達牛排館時外面是 1 度…白天我們在胡佛水壩應該還有十幾二十度啊！！！ 大家一開車門第一件事就是哇哇叫 XDDD，美國的國家公園似乎都是白天收費，晚上進去就不用錢，我們當晚就住在大峽谷裡面的 Moswik Lodge，我們這次是逛大峽谷的南緣 (South Rim)。 房間也算很大，我們還加了一床，一房五個人住還 OK 浴室的水龍頭也在外面這樣可以加速盥洗 東西放好之後我們決定先去看星星，下圖是半夜長曝，因為月光實在太亮了，長曝後效果不錯，大峽谷一覽無遺，天空也有星星，EM5 的防手震在沒有腳架的情況下，4s~8s 還可以接受 (咦 不小心工商廣告了)。拍的當下其實因為沒看過大峽谷，拍完一看就覺得實在是了不得的峽谷… 其實也不是什麼天文專家，星星看起來都差不多 囧\\ 大概跟台灣在完全無光害地區看到的是一樣吧。 大峽谷第二天一早我們決定先去看日出然後早上走 Hermit Rest Route，大峽谷南緣有兩個 Route 可以走，分別是： Hermit Rest Route(Red)、Kaibab/Rim Route(Orange)，其實還有一個 Village Route(Blue) 不過這應該是來往各旅館的，不算 tour route，這裡有接送巴士的資訊，照片因為去了太多點根本分不出來誰是誰了 = =，直接上圖 一早的大峽谷日出 三種 Route 示意圖 所到之處都是大、很大、實在太大了，就是遼闊的很可怕，那個峽谷看過去都看不到終點。而且天氣真的很好，很舒服。 在某些點可以看到切割大峽谷的科羅拉多河。 這些 Route 基本上都是坐巴士，然後到定點就下去走走的，巴士停的地方都不會離景點太遠，上午都是走馬看花，不過下午橘線時我們就有下去走 Trail - South Kaibab Trail，這條路徑可以一直走一直走，走到科羅拉多河，不過那個當然就是要紮營花個兩三天之類的，我們沒有這麼瘋狂，我們只有走到 0.75 mile 的地方，叫 Ooh-ahh Point，雖然只有 0.75 mile 可是因為是山路，有些地方女同學哎哎叫的 XD，有的坡度還蠻抖的，不過其實大部份都還算好走啦，沒什麼危險性才對。 進入之前有告示牌，寫一些警告事項，大概就是日曬要隨時注意補水，小心落石。再來就是直接衝了！ 一開始就是挑戰 XD 路其實真的還算寬啦, 只是一邊是山壁，一邊是懸崖，還是挺可怕的 沿路風景很漂亮 走啊走，花了一個多小時終於到了 Ooh-Aah Point！真的會讓人發出 (⊙o⊙) 哦~( ⊙ o ⊙ ) 啊！的風景 阿斗啊真的都超猛的 = =，我自己看都很挫了 0rz…，他們直接坐在懸崖上 Kaibab Trail 走回程也是累了 XD，上來後直接搭接駁車到 Mather Point 看日落，這裡也是最推薦的日落點，美麗的紫橘色彩霞 Page City - 佩吉市看完日落後，我們就驅車 前往 Page City 了，路程 210 km，這裡發生一件事情是友人的車帶頭，結果他們的導航是舊版的，不知道 89 號道路已經封閉 (發生坍方，我們的那台一直叫我們走 89T，我查 Google Map 也叫我走 89T，不過當下並沒有多想也就順著 89A 繼續走，直到我們到 89A 與 89 的交界時發現 89 完全封閉，走不了 0rz… 只好在回頭，損失了約一個多小時吧，結果我們到 Page City 時又晚上十點多了 XD，每天都在累，我們在 Page City 住這家 LuLu’s Sleep Ezze Motel，房間算小而美，吹風機要去中間的辦公室拿 Page City 感覺就是一個悠哉的城鎮啊…美國的郊區小鎮看起來也很有特色，跟台灣的郊郊區還是不一樣。 隔天一早我們就出發前往 馬蹄灣 Horseshoe Bend，然後再去羚羊峽谷。 一樣先找吃的順便補給水。 隨便買個什麼捲的來吃 馬蹄灣馬蹄灣的入口是一片沙漠，不過那裡有停車場，還算好認的入口 走路走約 15 ~ 20 分鐘後就會看到大大的馬蹄灣了，首先是同學示範馬蹄灣有多可怕，真的超級大的 = =，又大又可怕 不過因為我們是一早就去，所以太陽照在馬蹄灣剛好有陰影，相片照起來不美就是。走在馬蹄灣上感覺隨時風一吹就掉下去 = = 羚羊峽谷逛完馬蹄灣就繼續開去羚羊峽谷了，我們這次玩的是下羚羊峽谷 - Lower Antelope Canyon，因為網路都寫說下羚羊人比較少，因為要爬金屬樓梯，上上下下難度較高也比較危險，過去沒有導遊時曾經因為上游暴洪結果峽谷內的旅客不知道而死過人，不過進去後發現人還是有點多就是，我們途中開錯開去上羚羊峽谷，那邊停車場確實人多很多，羚羊峽谷地點在有三根煙囪的工廠附近。 下羚羊峽谷有兩家 TOUR，我們參加的是 KEN’s Tours 收費每人 US12 + US 8 permit = 20 元，全程大約一小時左右吧。 入口就很陡 羚羊峽谷是河水沖刷+風蝕而成，岩壁的曲線優美，在太陽光的反射下呈現橘黃色的線條 不過來這裡就是要玩一些白平衡，導遊通常會建議改成 Incandescent (白熾燈) 或 Fluorescent (螢光燈)。會呈現出藍紫色，有人喜歡橘色有人喜歡紫色，不過不管怎樣真的都很漂亮。 底下這張是導遊拿我的相機往上拍的，也可以說是只有當地人才知道的特殊攝影點吧，真的很美！不像地球啊 還拍了另一種白平衡，各有味道 然後出口超小的真的只能讓一個人出來，偷拍同學出來 導遊還會說幾個中文，像是照相時說「一二三」或「白平衡」，他說是遊客教他的 最後記得離開時要給導遊小費 :) 因為我們忘記給時同學說導遊拉下臉，然後韓國跟法國遊客都有給，我們事後才又跑去給 &gt; &lt;” 布萊斯峽谷離開下羚羊峽谷，沿著 89 號道路開，旅途的第三天下午目標是開到 布萊斯國家公園，途中我們就在 Google 推薦找了一個墨西哥料理 Escobar’s Mexican Restaurant，真的還不錯吃。可這份量實在太大了 = = 根本吃不完 路上風景也很優美。 繼續往裡面開，往布萊斯峽谷的公路上已經開始出現跟大峽谷不同的岩柱。藍天真的很美！ 布萊斯峽谷是臨近的峽谷中 (Grand Canyon 大峽谷國家公園、Zion 錫安國家公園) 海拔最高的，約在 2400m ~ 2700m，抵達時約四五點已經感受到很冷了… 真的是各種奇怪 白白的就是霜 一樣在布萊斯峽谷看了夕陽，真的很美 看完夕陽我們就趕緊先衝去旅館，當晚我們住的是 BEST WESTERN PLUS Bryce Canyon Grand Hotel，飯店房間超大。東西放好後就出門，晚上一樣是要出去看星星。 同學冷到受不了，直接拿飯店的毛巾當圍巾，可見有多冷！ 不過附近的餐廳可能很少，只有一家 Ruby’s Inn 有一家 Buffet，我們去的時候人已經暴多，於是就決定先去看星星，回來再看看有沒有的吃。 借同學拍的銀河，很美，可是真的他媽的超冷超冷超冷…到最後剩下我跟另一位有相機的在外面，其他人都受不了躲回車上了，我開了兩個暖暖包還是直發抖 = =… 看完八點多回到 Ruby’s Inn 內的 Buffet 已經有位置我們就去吃了，在裡面又遇到一個會說一些中文的服務生帥哥，他說是他同學有些華人教他的，美國人真的很喜歡學簡單中文欸 XDDD 隔天起來發現車體結霜，我們的水都結冰了 XDDD，看預報當晚凌晨最低溫是負 6 度 0rz… 早餐就吃飯店提供的，也是自助的，還蠻豐盛：麵包、牛奶、優格、水果、熱可可，喝到熱可可超感動的，很不錯吃。這天我們也是去走了一個布萊斯峽谷的 Trail - Navajo Loop，全長 2.16 km，高度差 167 m，海拔約 2279m ~ 2438m。 走在峽谷內真的覺得人超渺小 天氣好到走到最後覺得太熱了 = = 景點：雷神索爾的錘子 Trail 不小心走太久我們竟然走完整條，本來是沒打算要走完的，看牌子寫剩沒幾 mile 拼了命也要完成，結果超遠的 = =，不過後半段還蠻精彩的確實是值得走的。 錫安國家公園晃完布萊斯峽谷，繼續還是沿著 89 號目標是到錫安國家公園，不過錫安國家公園只是路過，我們當晚要衝去住拉斯維加斯，只是因為回程會路過，就繞進去看風景。開往錫安國家公園會經過一些 Trail，我們挑了一條 Canyon Overlook Trail 走，算是簡單型路線，不過中間有段鏤空鐵橋，女同學會害怕就在那裡等我們。 鐵橋 到了終點就是…一個大峽谷 XD 遼闊到真的不知道怎麼形容，美國的峽谷都超大的啊 渺小的人類 走完 Trail 差不多一兩點又要找午餐了，於是我們就到錫安國家公園內的一家泰式料理 Thai Sapa，還算好吃 吃飽後我們就沿著其附近的一條 Zion Canyon Scenic Drive 開，沿途風景是我覺得這次峽谷行最美的。 路上就有鹿! 有山有水有小橋 拉斯維加斯晃完之後差不多就要開往 Las Vegas 了，沿著 15 號開 路程 263 公里，當晚大約七點到我們要住的飯店 Marriott’s Grand Chateau，我們訂了一個公寓式的房間一共三房兩廳，還有廚房跟洗、乾衣機，房間很大，大概算是這次旅行訂最好的 (也是第二貴的)。一樣放完行李後我們就出去晃大街了。拉斯維加斯真的好繁榮，整片都是大飯店。 路邊就有免費的 Show，我們在這裡看了水舞 (位於 Bellagio 飯店) 跟火山爆發 (位於 Mirage 飯店) 的 show 還路過了很奢華的威尼斯人 這是室內欸！ 有種無言的感覺就是，奢華的飯店 隔天白天在拉斯維加斯的行程就是逛街，我們去的是 North Premium Outlet，可以先去他的官網加會員，去現場領 coupon，依照廠牌折扣不盡相同，像 Timberland 就是超過 100 美金打九折之類的，很划算，等於扣掉稅金。大家的戰利品。 隔天我們換一家飯店住，住的是 [New York New York](http://www.nynyhotelcasino.com/ %} 飯店外有自由女神像跟雲霄飛車，飯店內都聽得到人在尖叫 XD 當晚的活動是看 KA show，下面是 KA show 場內，偷拍的，裡面不得拍照。我們看的 KA show 最後面是播動畫當下覺得莫名其妙，因為我問我妹他說他前年去都完全沒動畫，後來同學上網查發現原來是在 2013 年底發生意外死了一個表演者，所以最後面結尾才改動畫。不過整場 KA show 還是超精彩的！ 洛杉磯隔天一早就是準備回出發地 ﹣ 洛杉磯啦，沿著 15 號公路走 共 430 公里又是長征，一早的早餐是麥當勞，不過這可是在美國第一次吃麥當勞，早餐有我最愛的比司吉！！ 比司吉實在太美味了 不過當天回洛杉磯似乎天氣很差，空氣感覺不好，突然感覺到回到大城市了。 午餐就在中國城內叫凱旋宮的餐廳吃了 發現貼在牆邊的海報，費玉清要在洛杉磯開演唱會 一群人點了一堆，感覺大家很久沒吃到中國食物的衝動 XDDD 每個都好吃啊 美國的港式飲茶不用蒸籠的嗎? 不過敗筆是我們點了炒飯跟炒麵… 這炒麵跟炒飯有事嗎 XD 也太大碗了，失焦的炒飯 這家餐廳隔壁開一家 Tea Station 是天仁茗茶的，本來想說可以買杯珍奶，結果看到價位似乎要 5.99 的樣子，就算了 = = 蓋提美術館下午的行程是到 [Getty Museum 蓋提美術館](http://en.wikipedia.org/wiki/J._Paul_Getty_Museum %} 蓋提美術館是私人美術館，免費參觀，停車場要錢就是，停車場在山下，要乘坐纜車上去美術館，整個美術館的設計也是非常優美。 園區有一片仙人掌 還有駐點的設計師 草地可以給大家躺，我們是因為看到有麻麻帶著小孩在草地滾才發現的 Urban Light晚上我們就到洛杉磯美術館 (LACMA) 旁的 Urban light，簡單來說就是一堆以前的路燈移植過來的啦 XDDD 我覺得這裡用黑白拍還不錯，旁邊也有其他人在攝影，看起來是拍家庭紀念照 離開 Urban Light 我們晚餐吃 Park’s BBQ，是一家韓式烤肉，有人會幫你料理肉，小費終於付的有感覺了 XD Griffith Observatory吃完晚餐，我們來到洛杉磯外圍的 [Griffith 天文臺](http://en.wikipedia.org/wiki/Griffith_Observatory %} 這裡在一個山上，可以看洛杉磯市區夜景，白天可以看到 Hollywood sign 這裡大概就是參觀天文臺 (免費的) 跟看看夜景 當晚我們住 Best Western Plus Hollywood，不過他的停車場入口超難找的，我們繞了三四圈才找到，結果隔天白天還是繞了兩次 = =，這裡也是我們住最貴又最小的旅館，只能說不愧是洛杉磯 QQ” 華納兄弟隔天我們到華納兄弟參訪，進去還要檢查揹包跟過金屬門，大概是檢查有沒有刀子之類的吧 只要有交錢，人人都是 VIP 票面會寫名字 參訪就是坐著高爾夫球車逛各個製片廠，導遊人也很好會先問有沒有喜歡的電影之類的，然後就是帶我們一一介紹，不過全英文介紹有點吃力，尤其是對美劇沒有很了解的我 = =a 後面那個長方形活動樹牆是用來遮住背景的 導遊說這塊草地是兩個禮拜前新鋪的，完全看不出來，不愧是拍電影，什麼都跟真的一樣，馬上就可以換新的佈置 裡面還有座博物館，一樓是蝙蝠俠的，二樓是哈利波特 有些是真實的戲服哦 二樓是哈利波特區 有個妙麗的蠟像，做得惟妙惟肖的 看看這手的膚色 催狂魔 還有魔杖的手稿 我沒找到妙麗的，因為我忘記妙麗的英文名字是什麼 XD 戲服 裡面也有兵工廠，製作木工或金屬 裡面另一座博物館收藏了蝙蝠俠各種車子，是真的可以開的 然後我們來到 Friends 的一部份佈景，是戲劇裡面的沙發跟吧台，導遊在這裡幫我們拍照 最後逛了倉庫，裡面堆放各種拍攝的道具 血跡塑膠片跟打人的假木頭 亞果出任務的場景？ 完全想不起來了 最後載我們回入口 然後我們到附近可以看到 Hollywood sign 的地方拍照片，以示到此一遊 XD 午餐我們去吃龍蝦，不過我忘記是吃哪一家了 = =” 我不想吃一堆蝦，所以點了牛排+蝦子，不喜歡美國人每次牛排五分都還是焦焦的 = =，不過這蝦子真的超鮮甜的，很嫩！ Santa Monica下午我們去 Santa Monica 逛逛，順便看海，終於看到 Apple Store，來朝聖一下，生意超級好的 公園也還蠻有趣的 Santa Monica 的夕陽 超多海鷗 夕陽之 2 沙灘旁有遊樂園 遊樂園那邊整條街都有在賣紀念品的，也有街頭藝人 個人覺得他們的市徽很有趣 好萊塢大道隔天也是在洛杉磯的最後一天，同學是下午的飛機回台，我則是搭晚上到奧蘭多的飛機，所以早上還是有時間晃，我們去了 [好萊塢大道](http://zh.wikipedia.org/zh-tw/%E5%A5%BD%E8%8E%B1%E5%9D%9E%E5%A4%A7%E9%81%93 %} 這裡的好萊塢大道只有星星，沒有香港的手印，我們一開始找很久 = =” 有手印的是在一家中國戲院前面，一點都不中國風 = =，很妖魔 XD 是要嚇誰 這裡可以看到哈利波特的手印 沿路走到末端，拜了拜 Google 大神，我們最後早餐在 Tiago 吃 店內佈置 這是我點的藍莓鬆餅 很好吃，非常推薦！ 吃完就沿著原路回去旅館 check out 然後開車回去還車了，抬起頭看到飛機一台一台的掠過上空，才突然有種旅程結束的感覺。 洛杉磯機場國際廳 美國真的很有趣很好玩，東西除了牛排每次都很焦不習慣之外其他都覺得也不錯吃 (不過這是因為我們這次沒吃什麼華人食物就是，速食也吃不多)，有機會一定會再來玩第二次！","categories":[{"name":"遊記","slug":"遊記","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E8%A8%98/"}],"tags":[{"name":"美國","slug":"美國","permalink":"https://blog.littlero.se/tags/%E7%BE%8E%E5%9C%8B/"}]},{"title":"NCLP 11 考試","slug":"NCLP-11-考試","date":"2014-12-05T03:05:40.000Z","updated":"2015-03-14T05:40:55.000Z","comments":true,"path":"post/NCLP-11-考試/","link":"","permalink":"https://blog.littlero.se/post/NCLP-11-%E8%80%83%E8%A9%A6/","excerpt":"今年十一月中因緣際會去奧蘭多參加了 SUSEcon14，會後有提供 NCLA、NCLP 11&amp;12 的認證。因為小弟已經有 NCLA (考過 LPIC-1 就會送了)，所以本次想說順便拿個 NCLP 的認證。 考試前就很不順，我考試的場次是 11:00 ~ 2:00，大約 10:40 就去報到，等啊等，等到 10:55 突然考試人員出來考場說，因為他們的資料中心發生網路問題，現在連不上考試系統，當下一囧，想說不知道要等多久…我的飛機不等人啊，幸好後來在 11:20 左右排除了。","text":"今年十一月中因緣際會去奧蘭多參加了 SUSEcon14，會後有提供 NCLA、NCLP 11&amp;12 的認證。因為小弟已經有 NCLA (考過 LPIC-1 就會送了)，所以本次想說順便拿個 NCLP 的認證。 考試前就很不順，我考試的場次是 11:00 ~ 2:00，大約 10:40 就去報到，等啊等，等到 10:55 突然考試人員出來考場說，因為他們的資料中心發生網路問題，現在連不上考試系統，當下一囧，想說不知道要等多久…我的飛機不等人啊，幸好後來在 11:20 左右排除了。 考前 Novell 會寄一封信，裡面有 candidate ID (Novell 網站上的數字 ID) &amp; registration key，考官會開啟系統界面要你輸入，登入後就開始考試啦，考試界面有四五個標籤頁，最重要的只有考試內容那個而已，題目大約是四大題，每題約四五小題，各大題可說有關係也沒關係。 考試系統界面上還會有兩個按鈕可以按，分別是 Server 1 &amp; Server 2，按下去會跑出遠端的 X-window 畫面，基本上就可以開始作答了，對了順道一提，我以為考試時間會從我按下開始開始計算三小時，結果似乎是原本的考試時間算，所以我的考試時間一樣到下午兩點而已 = = 我的題目第一大題是 Account management，主要就是在兩台各創一些無密碼的帳號與有密碼的帳號跟群組，然後再無密碼帳號裡建立 ssh-key，利用 key 做 ssh 登入，這樣就完成了。 第二題其實我忘記了 XD，只記得要用 vim 改設定的樣子，不過考到第二題時，我的那台筆電鍵盤上下左右壞了，不受控制，按下就會送 enter，叫主考官來他說他也不知道為什麼，不過他說可以幫我重新開始，我說不過我等等有飛機時間不允許= =，我繼續考好了…，不過因為不習慣 vim 的 hjkl 移動游標，最後索性開 gedit 完成 XD 第三題是在第一台 Server 設定 Apache，這年代有點古老啊…我現在都玩 nginx 早就沒在用 Apache 都忘記的差不多了，題目是建立資料夾然後用 htpasswd 建立指定的帳號密碼在指定的檔案位置上，然後在 /etc/apache2/default-server.conf 設定剛剛的資料夾只有那些帳號密碼能登入看 (AuthType basic)，最後是要讓第一題的兩台電腦都可以用特定 hostname 存取第一台 Server (設定 /etc/hosts)，不過因為小弟已經很久沒用 Apache 其實早就忘記怎麼設定 Auth，man 了半天也看不到結果，最後索性想說直接在 /etc/apache2/ 直接 grep 看有沒有類似的關鍵字 XD，運氣還真的很好，那台預裝有 nagios 是監控系統的套件，他的 admin 界面也是需要 htpasswd 的檔案來 auth，所以小弟直接 copy 在改改就完成了 XDDD。 第四題是考 shell script 的撰寫，大意是利用 top 留 log 來記錄系統狀態，然後參數只有一個，是控制間隔時間，所以大概就是考考 $# 跟 if 的使用，top 稍微 man 一下就知道參數怎麼用，最後就是 &gt;&gt; 或 &gt; 導到指定位置 (有時間當檔名所以 date 也要稍微知道怎麼用)，大致來說也不難。 最後其實寫不到兩個小時我就交了，還不到一點半，題目看起來都不難，而且因為是上機考其實可以一直 man，或者像我一樣亂 grep XD，最後按下送出，等個幾分鐘，他就會顯示你有沒有過了。當然最後是順利拿到 NCLP 11，本來他還有提供 NCLA &amp; NCLP 12 的考試，不過小弟時間不夠，加上我沒有 NCLA 12 先考 12 也是拿不到證書，索性作罷。 順道一提，我以為我拿到的是 NCLP (Novell Certified Linux Professional)，不過不知道是不是我參加的是 SUSE 辦的，最後我拿到的是 SCLP (SUSE Certified Linux Professional)，很妙…","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"}]},{"title":"build static link nginx","slug":"build-static-link-nginx","date":"2014-04-09T10:06:43.000Z","updated":"2015-03-14T05:38:01.000Z","comments":true,"path":"post/build-static-link-nginx/","link":"","permalink":"https://blog.littlero.se/post/build-static-link-nginx/","excerpt":"","text":"因為敝公司系統的環境有 OpenSUSE 跟 SUSE Linux Enterprise Sever SP2/SP3 混合，所以要更新 nginx 時往往要生出三個版本，實在有點搞人，不過其實也可以不要理會 libcrypt 版本不合的訊息啦，可是還是覺得編譯一個萬用的版本比較方便維護。 nginx 一共需要用到 libpthread, libcrypt, libpcre, libssl, libcrypto, libz, libdl，其中可以另外設定的有 OpenSSL, PCRE, Zlib 這三種，可以提供 libcrypt, libpcre, libssl, libcrypto, libz, libdl，然後 pthread 的就靠系統提供的 static 的 .a 了，所以要生出編譯的指令如下： 備註：假設 我們自己 Download 的 openssl, pcre, zlib 的原始碼都放在 /usr/src 底下","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.littlero.se/tags/nginx/"}]},{"title":"Conky","slug":"conky","date":"2014-02-27T09:52:09.000Z","updated":"2017-11-02T15:08:24.000Z","comments":true,"path":"post/conky/","link":"","permalink":"https://blog.littlero.se/post/conky/","excerpt":"Conky 是一款類似 Mac OS X GeekTool 的桌面小工具 (其實 Conky 比較早出生，不過我比較晚發現 XD)。 他們都可以透過一些內建的 Function 或者寫 shell script 來顯示電腦的狀態 (或者想印在桌面的狀態)，例如我現在的桌面是這樣的 大致上就是顯示天氣，網路速度、流量，CPU、記憶體、硬碟等使用率，然後還有 CPU 溫度跟風扇的資訊，最下面有 parse RSS (Gentoo Security) 的部分 參考網路設計師 Conky Google Now 這個主題 小弟合併了官網其他人貢獻的設定，稍微修改了一下","text":"Conky 是一款類似 Mac OS X GeekTool 的桌面小工具 (其實 Conky 比較早出生，不過我比較晚發現 XD)。 他們都可以透過一些內建的 Function 或者寫 shell script 來顯示電腦的狀態 (或者想印在桌面的狀態)，例如我現在的桌面是這樣的 大致上就是顯示天氣，網路速度、流量，CPU、記憶體、硬碟等使用率，然後還有 CPU 溫度跟風扇的資訊，最下面有 parse RSS (Gentoo Security) 的部分 參考網路設計師 Conky Google Now 這個主題 小弟合併了官網其他人貢獻的設定，稍微修改了一下 從剛剛那個 Google Now 的 theme 下載 conky_google_now_by_satya164-d628cih.zip 解壓縮之後會有個 .conky-google-now 複製到家目錄 (也就是 ~/.conky-google-now) 底下即可 以下是我的設定 直接存檔成 ~/.conkyrc 然後用 conkyrc -d 啟動就可以看到程式了 最後面的 RSS 是取自 conky-rss.sh 另外天氣的部分如果要改地區，可以先到 Yahoo Weather 查詢地區碼，我的設定裡面是用 9807 也就是溫哥華的代碼","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"}]},{"title":"Graylog2 安裝","slug":"install-graylog2","date":"2014-01-24T13:55:56.000Z","updated":"2018-06-02T06:48:53.000Z","comments":true,"path":"post/install-graylog2/","link":"","permalink":"https://blog.littlero.se/post/install-graylog2/","excerpt":"Graylog2 是一個開源的 log 收容器，主要有兩個部份集合而成 server 與 web interface，兩個都是由 Java 寫的，Server 的部份可以收容 syslog over TCP/UDP, 同時他也有自己的格式 GRLF (Graylog Extended Log Format)，背後的儲存是搭配 mongodb，而搜尋引擎則由 elasticsearch 提供。另外的 web interface 也是 Java 寫成的 (早期好像是 Ruby on Rails)，主要的功能就是提供一個漂亮的搜尋與分析的界面。 所以要使用 Graylog2 需要安裝五個元件 軟體 版本 Java Runtime Environment 7u51 elasticsearch 0.90.10 mongodb 2.4.9 graylog2-server 0.20.1-1rc graylog2-web-interface 0.20.1-1rc 我們先從 elasticsearch 開始安裝起，以下都用目前最新的版本來示範，基本上不分什麼 Linux Distribution，我們單位都用 SUSE，不過 Gentoo 或 Ubuntu 也都適用就是","text":"Graylog2 是一個開源的 log 收容器，主要有兩個部份集合而成 server 與 web interface，兩個都是由 Java 寫的，Server 的部份可以收容 syslog over TCP/UDP, 同時他也有自己的格式 GRLF (Graylog Extended Log Format)，背後的儲存是搭配 mongodb，而搜尋引擎則由 elasticsearch 提供。另外的 web interface 也是 Java 寫成的 (早期好像是 Ruby on Rails)，主要的功能就是提供一個漂亮的搜尋與分析的界面。 所以要使用 Graylog2 需要安裝五個元件 軟體 版本 Java Runtime Environment 7u51 elasticsearch 0.90.10 mongodb 2.4.9 graylog2-server 0.20.1-1rc graylog2-web-interface 0.20.1-1rc 我們先從 elasticsearch 開始安裝起，以下都用目前最新的版本來示範，基本上不分什麼 Linux Distribution，我們單位都用 SUSE，不過 Gentoo 或 Ubuntu 也都適用就是 首先因為 elasticsearch 跟 graylog2 都需要 Java，所以我們的系統需要安裝 JRE 先，最低需求是 Java 7.0 的版本，所以我們先到 Java Download 下載 JRE 7u51 下來，假設下載到 /tmp/jre-7u51-linux-x64.tar.gz 下面，先解壓縮到 /opt 底下 tar zxvf /tmp/jre-7u51-linux-x64.tar.gz -C /opt 會產生 /opt/jre1.7.0_51/ 然後我們為了好看做一下 link ln -s /opt/jre1.7.0_51 /opt/java 這樣 Java 就裝好了。 接下來來裝 elasticsearch，curl https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-0.90.10.tar.gz -o /tmp/elasticsearch.tgz &amp;&amp; tar zxvf /tmp/elasticsearch.tgz -C /opt &amp;&amp; ln -s /opt/elasticsearch-0.90.10 /opt/elasticsearch 這樣基本上就裝好了，不過我們還需要建立一些資料夾讓 elasticsearch 可以運作起來。 build basic directory1234install -o nobody -g nogroup -d /var/log/elasticsearch/install -o nobody -g nogroup -d /var/lib/elasticsearch/datainstall -o nobody -g nogroup -d /var/lib/elasticsearch/workinstall -o nobody -g nogroup -d /var/run/elasticsearch/ 之所以給 nobody:nogroup 是希望之後我們的 elasticsearch 就用 nobody 的身份執行，其實沒有強制，如果要建立 elasticsearch 的專用帳號也是可以的。 接著改個設定 1sed -i -e 's|# cluster.name: elasticsearch|cluster.name: graylog2|' /opt/elasticsearch/config/elasticsearch.yml 這個是把 elasticsearch 的名字設定成 graylog2，這樣之後 server 才吃得到。 然後我們來建立啟動 elasticsearch 的 script 吧，貼上下列的 code 到 /etc/init.d/elasticsearch 然後 chmod +x /etc/init.d/elasticsearch。 接著/etc/init.d/elasticsearch start，理論上應該 elasticsearch 就啟動了。可以用 tail -f /var/log/elasticsearch/graylog2.log 來看情況。 接下來是安裝 mongodb，curl http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.4.9.tgz -o /tmp/mongodb.tgz &amp;&amp; tar zxvf /tmp/mongodb.tgz -C /opt &amp;&amp; ln -s /opt/mongodb-linux-x86_64-2.4.9 /opt/mongodb 這樣也裝好了，mongodb 基本上完全不需要設定 (要設定帳密增加安全性也可以)。我們來增加啟動 mongob 的 script，新增下面的內容到 /etc/init.d/mongodb 然後 chmod +x /etc/init.d/mongodb。 一樣需要增加一些資料夾才能正常使用 build basic directory123install -o nobody -g nogroup -d /var/log/mongodb/install -o nobody -g nogroup -d /var/lib/mongodb/install -o nobody -g nogroup -d /var/run/mongodb/ 接著也啟動看看/etc/init.d/mongodb start，我們透過 tail -f /var/log/mongodb/mongodb.log 可以知道啟動的狀態，如果都沒錯理論上可以繼續下一步了。 目前為止我們可以透過 netstat -ntlp 看 9300 (elasticsearch 的 port) 跟 27017 (mongodb 的 port) 有沒有在監聽著，就知道有沒有啟動成功了。 接下來就是要裝 graylog2 啦，首先是 server，curl https://github.com/Graylog2/graylog2-server/releases/download/0.20.0-rc.1-1/graylog2-server-0.20.0-rc.1-1.tgz -o /tmp/graylog2-server.tgz &amp;&amp; tar zxvf /tmp/graylog2-server.tgz -C /opt &amp;&amp; ln -s /opt/graylog2-server-0.20.0-rc.1-1 /opt/graylog2-server 然後我們需要設定一下 12345678910cp /opt/graylog2-server/graylog2.conf.example /etc/graylog2.confpass_secret=$(pwgen -s 96)sed -i -e 's|password_secret =|password_secret = '$pass_secret'|' /etc/graylog2.conf#密碼自己設定 web 登入用的 root_pass_sha2=$(echo -n password123 | shasum -a 256)sed -i -e \"s|root_password_sha2 =|root_password_sha2 = ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f|\" /etc/graylog2.confsed -i -e 's|elasticsearch_shards = 4|elasticsearch_shards = 1|' /etc/graylog2.confsed -i -e 's|mongodb_useauth = true|mongodb_useauth = false|' /etc/graylog2.confsed -i -e 's|#elasticsearch_discovery_zen_ping_multicast_enabled = false|elasticsearch_discovery_zen_ping_multicast_enabled = false|' /etc/graylog2.confsed -i -e 's|#elasticsearch_discovery_zen_ping_unicast_hosts = 192.168.1.203:9300|elasticsearch_discovery_zen_ping_unicast_hosts = 127.0.0.1:9300|' /etc/graylog2.confsed -i 's|retention_strategy = delete|retention_strategy = close|' /etc/graylog2.conf 然後一樣來增加 init script 吧，在 /etc/init.d/graylog2-server 填入下列，並 chmod +x /etc/init.d/graylog2-server 然後直接啟動了！/etc/init.d/graylog2-server start，看看 tail -f /var/log/graylog2-server.log 是不是有出現錯誤訊息，沒有錯的話 netstat -ntlp 應該可以看到 port:12900 有被監聽了，這是 server 的 REST 傳輸 port。 最後我們就可以來裝 web interface 了，curl hhttps://github.com/Graylog2/graylog2-web-interface/releases/download/0.20.0-rc.1-1/graylog2-web-interface-0.20.0-rc.1-1.tgz -o /tmp/graylog2-web-interface.tgz &amp;&amp; tar zxvf /tmp/graylog2-web-interface.tgz -C /opt &amp;&amp; ln -s /opt/graylog2-web-interface-0.20.0-rc.1-1 /opt/graylog2-web-interface這裡我們只有兩個地方要設定 123sed -i -e 's|graylog2-server.uris=\"\"|graylog2-server.uris=\"http://127.0.0.1:12900/\"|' /opt/graylog2-web-interface/conf/graylog2-web-interface.conf# 這裡填入剛剛 server 的 app_secretsed -i -e 's|application.secret=\"\"|application.secret=\"'$app_secret'\"|' /opt/graylog2-web-interface/conf/graylog2-web-interface.conf 然後我們也來寫一下 init script 吧，檔名存 /etc/init.d/graylog2-web-interface，記得一樣 chmod +x /etc/init.d/graylog2-web-interface 最後啟動/etc/init.d/graylog2-web-interface start，因為我們沒有寫 log，直接用 netstat -ntlp 觀察看看 port:9000 有沒有被聽著，這是他的 web interface 預設的 http port。 如果 port:9000 有起來的話，請用你的瀏覽器打開 http://ip:9000 看，沒有意外的話應該會出現一個登入的畫面了，帳號一開始都是 admin，密碼則是剛剛自己設定在 /etc/graylog2.conf 的 root_pass_sha2=$(echo -n password123 | shasum -a 256)，如果剛剛是直接複製貼上然後按下 enter 的話，密碼就是 password123，如果沒有意外應該就可以進去啦！恭喜，現在可以開始使用 graylog2 了。 參考資料 Ubuntu 12.04 Graylog2 Installation","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"graylog2","slug":"graylog2","permalink":"https://blog.littlero.se/tags/graylog2/"}]},{"title":"saltstack 自定 grains","slug":"saltstack-custom-grains","date":"2013-07-10T13:00:29.000Z","updated":"2015-05-04T08:56:19.000Z","comments":true,"path":"post/saltstack-custom-grains/","link":"","permalink":"https://blog.littlero.se/post/saltstack-custom-grains/","excerpt":"上一集 中，簡單的介紹了 Salt 的使用方法，這集要稍微深入的介紹 Salt 的其中一個部份 - Grains，Grains 基本上就是機器的資訊，通常指的是不會變動的部份，比方說 CPU 有幾顆、記憶體有多少、作業系統是用什麼的 (CentOS, Ubuntu, SUSE…etc)、網卡資訊，至於會變動的資訊通常會用 Salt 的 Pilar 功能，雖然 SaltStack 支援很多種 Linux Distribution，而且他的 API 也儘可能的豐富每一個 Distro，像是套件管理系統就有支援 CentOS 的 yum、 Ubuntu 的 APT、 SUSE 的 zypper，但是終究不是每一個系統的特色都能夠完整的支援 (可能需要自己貢獻上去?)，像是 SUSE Linux Enterprise Server (簡稱 SLES) 除了大版本號，還有小版本的 Service Pack，撰文的今天剛好出了 SLES 11 SP3，但是 Salt 內建的 Grains 只有偵測到 OS 是 SLES 就沒了，有時候我會依照不同的 Service Pack 需要不一樣的設定 (因為 SP2 的套件有時候會支援某些功能，但是 SP1 時候還沒有，像是 sudoer 的設定)，但是不能判斷版本怎麼辦? 沒關係 Salt 具有高度擴充性，我們可以自定想要的 Grains。","text":"上一集 中，簡單的介紹了 Salt 的使用方法，這集要稍微深入的介紹 Salt 的其中一個部份 - Grains，Grains 基本上就是機器的資訊，通常指的是不會變動的部份，比方說 CPU 有幾顆、記憶體有多少、作業系統是用什麼的 (CentOS, Ubuntu, SUSE…etc)、網卡資訊，至於會變動的資訊通常會用 Salt 的 Pilar 功能，雖然 SaltStack 支援很多種 Linux Distribution，而且他的 API 也儘可能的豐富每一個 Distro，像是套件管理系統就有支援 CentOS 的 yum、 Ubuntu 的 APT、 SUSE 的 zypper，但是終究不是每一個系統的特色都能夠完整的支援 (可能需要自己貢獻上去?)，像是 SUSE Linux Enterprise Server (簡稱 SLES) 除了大版本號，還有小版本的 Service Pack，撰文的今天剛好出了 SLES 11 SP3，但是 Salt 內建的 Grains 只有偵測到 OS 是 SLES 就沒了，有時候我會依照不同的 Service Pack 需要不一樣的設定 (因為 SP2 的套件有時候會支援某些功能，但是 SP1 時候還沒有，像是 sudoer 的設定)，但是不能判斷版本怎麼辦? 沒關係 Salt 具有高度擴充性，我們可以自定想要的 Grains。 我們先介紹一下內建的 Grains 有什麼好了，我們先隨便挑一台機器，salt 'www-01' grains.items，如果執行有成功應該會出現如下的資訊： www-01: biosreleasedate: 06/22/2012 biosversion: 6.00 cpu_flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht syscall nx lm constant_tsc arch_perfmon pebs bts nopl tsc_reliable nonstop_tsc aperfmperf pni ssse3 cx16 sse4_1 x2apic hypervisor lahf_lm dtherm cpu_model: Intel(R) Xeon(R) CPU L5420 @ 2.50GHz cpuarch: x86_64 defaultencoding: UTF8 defaultlanguage: zh_TW domain: fqdn: www-01 gpus: {'model': 'SVGA II Adapter', 'vendor': 'unknown'} host: www-01 id: www-01 ip_interfaces: {'sit0': [], 'lo': ['127.0.0.1'], 'eth0': ['192.168.1.1']} ipv4: 127.0.0.1 192.168.1.1 kernel: Linux kernelrelease: 3.9.7-neoesque localhost: www-01 manufacturer: VMware, Inc. master: salt mem_total: 8016 nodename: www-01 num_cpus: 4 num_gpus: 1 os: SUSE Enterprise Server os_family: Suse oscodename: x86_64 osfullname: SUSE Linux Enterprise Server osrelease: 11 path: /sbin:/bin:/usr/sbin:/usr/local/bin:/usr/bin/ productname: VMware Virtual Platform ps: ps -efH pythonpath: /usr/local/bin /usr/local/lib64/python2.6/site-packages/pip-1.3.1-py2.6.egg /usr/lib/python26.zip /usr/lib64/python2.6 /usr/lib64/python2.6/plat-linux2 /usr/lib64/python2.6/lib-tk /usr/lib64/python2.6/lib-old /usr/lib64/python2.6/lib-dynload /usr/lib64/python2.6/site-packages /usr/local/lib64/python2.6/site-packages pythonversion: 2.6.0.final.0 saltpath: /usr/local/lib64/python2.6/site-packages/salt saltversion: 0.15.90 serialnumber: VMware-42 30 04 4b 79 d2 c1 59-92 2b eb 2e 71 d4 7c 63 server_id: 1323040866 shell: /bin/zsh virtual: VMware 如果想要單獨知道某一個，可以這樣下 salt 'www-01' grains.item os 這樣就只會出現 www-01: os: SUSE Enterprise Server 但是從上面的資訊我們可以發現 Salt 與預設只能抓到剛剛說的 os: SLES 跟 osrelease: 11，並沒有我們想要的 service pack 的版本號，所以我們需要自己新增。 首先在 Master 的電腦的 Base 底下新增一個叫做 ___grains__的資料夾，如果是預設值也就是 __/srv/salt/_grains__，指令如下 install -d /srv/salt/_grains，然後隨便產生一個副檔名是 .py 的檔案就好，比方說我產生一個 __os.py__，然後內容如下: vi /srv/salt/_grains/os.py def patch(): ''' return Service Pack Version ''' grains = {} for line in open(\"/etc/SuSE-release\"): if \"PATCHLEVEL\" in line: patch = int(line.split(\"=\")[-1]) grains['ospatch'] = patch return grains 因為 SUSE 的 SP 版本號存在 __/etc/SuSE-release__，所以這裏只是一個小小的 python code 去把我們要的資訊取出來，注意到的幾個關鍵是 開頭不用 #!/usr/bin/python，因為這個檔案原本 salt 就會直接餵給 python 吃而已 grains 這個變數可以直接覆寫，因為最後是 merge 結果的，所以 grains[‘ospatch’] = patch 最後你的 grains.items 裡面就會多一個 ospatch 的變數 存檔後就可以準備下指令啦！首先是請各個 minion 來領檔案回去，所以就是 salt '*' state.highstate，下完之後這時候直接打 salt 'www-01' grains.item ospatch，應該會沒顯示東西，因為這時候我們還沒更新資料，前面說過 grains 是 static 的，所以要更新資料我們要下 salt '*' sys.reload_modules 這樣 minion 就會重新 scan modules 了，接著我們就可以下看看 salt '*' grains.item ospatch 如果沒錯誤應該可以看到如下的結果 www-stage: ospatch: 1 www-02: ospatch: 2 www-01: ospatch: 2 www-03: ospatch: 2 www-04: ospatch: 2 自定 Grains 大概就是這麼一回事嘍~","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"SaltStack","slug":"SaltStack","permalink":"https://blog.littlero.se/tags/SaltStack/"}]},{"title":"自拍神器 Casio TR15 開箱","slug":"casio-tr15","date":"2013-07-02T13:47:42.000Z","updated":"2015-03-14T05:39:40.000Z","comments":true,"path":"post/casio-tr15/","link":"","permalink":"https://blog.littlero.se/post/casio-tr15/","excerpt":"注意這款號稱「自拍神器」系列的相機也已經大概半年多了吧，大概是半年前小弟的女友跟小弟提起的，不過可怕的神器連價格也很可怕，此款的前兩代 TR150 台灣官方售價是一萬一，但是因為出貨速度緩慢，市場缺貨缺得要死，市場上大陸的水貨竟然叫價到接近 3 萬，實在是不知道台灣卡西歐在做什麼，製造速度有這麼慢嗎？這種水貨商實在讓人覺得坑殺小朋友不眨眼，尤其是在 Facebook 卡西歐的官方粉絲頁更有一些電信商趾高氣昂，更氣的是還買了一台兩百多萬的賓士！讓我都想去開通訊行坑殺高中生&amp;俗稱的水水 (管他是不是正妹，這台拍下去保證各個都是正咩) XD 其實我後來也就忘記這件事了，因為女友也叫我不要買，因為實在背離原價太多了，一直到六月中，再逛 Mobile01 時，突然看到消費相機版的卡西歐有人 po 了一篇文章說 TR200 的下一代 TR350 (大陸的稱呼) 已經在六月初上市了，然後台灣也會上國際版的，代號是 TR15，於是就上了 Facebook 的卡西歐粉絲頁看了一下，果然會上！！但是！他媽的卡西歐是搶劫嗎，TR15 的售價竟然是兩萬四，竟然比 TR150 貴了一倍多 = =，不過功能也多一些些就是了 (他媽的再罵一次 Casio 以為你是萊卡嗎！)，電容式觸碰螢幕，螢幕解析度也提升到 92 萬畫素，然後有 Wifi，在傳輸照片或者是自拍控制都相當方便，核心處理引擎也變成兩顆，不管是開機速度或者拍照處理速度都比之前的更快，但主要的規格都差不多還是維持 1/2.3 寸的 1210 萬畫素、光圈 2.8、超廣角的等效焦距 21mm。","text":"注意這款號稱「自拍神器」系列的相機也已經大概半年多了吧，大概是半年前小弟的女友跟小弟提起的，不過可怕的神器連價格也很可怕，此款的前兩代 TR150 台灣官方售價是一萬一，但是因為出貨速度緩慢，市場缺貨缺得要死，市場上大陸的水貨竟然叫價到接近 3 萬，實在是不知道台灣卡西歐在做什麼，製造速度有這麼慢嗎？這種水貨商實在讓人覺得坑殺小朋友不眨眼，尤其是在 Facebook 卡西歐的官方粉絲頁更有一些電信商趾高氣昂，更氣的是還買了一台兩百多萬的賓士！讓我都想去開通訊行坑殺高中生&amp;俗稱的水水 (管他是不是正妹，這台拍下去保證各個都是正咩) XD 其實我後來也就忘記這件事了，因為女友也叫我不要買，因為實在背離原價太多了，一直到六月中，再逛 Mobile01 時，突然看到消費相機版的卡西歐有人 po 了一篇文章說 TR200 的下一代 TR350 (大陸的稱呼) 已經在六月初上市了，然後台灣也會上國際版的，代號是 TR15，於是就上了 Facebook 的卡西歐粉絲頁看了一下，果然會上！！但是！他媽的卡西歐是搶劫嗎，TR15 的售價竟然是兩萬四，竟然比 TR150 貴了一倍多 = =，不過功能也多一些些就是了 (他媽的再罵一次 Casio 以為你是萊卡嗎！)，電容式觸碰螢幕，螢幕解析度也提升到 92 萬畫素，然後有 Wifi，在傳輸照片或者是自拍控制都相當方便，核心處理引擎也變成兩顆，不管是開機速度或者拍照處理速度都比之前的更快，但主要的規格都差不多還是維持 1/2.3 寸的 1210 萬畫素、光圈 2.8、超廣角的等效焦距 21mm。 後來從粉絲團有人推文得知原來台灣代理商-群光電子，早在六月中就有少量鋪貨到他們的經銷商那裡可以打電話問或者預約排隊，所以索性我就依照群光的官網一間一間打，第一間：賣完了哦，現在有預約的已經登記了一百多個了…（內心 OS： 干 那我登記個屁）。後來又打了問第二間到第四間都差不多的迴應，就說之前官方就有少量 (1~2 臺) 進貨，但是都賣出去了，價格是 33k (厲害了吧，官方售價是 24k 然後代理商可以賣 33k 還被允許，你他媽的卡西歐跟群光都沒在管的)，說要預約的話前面也很多人在排隊，而且後面的公司貨也都依照這個價格賣… 0rz… (內心的 OS：奸商！你們這群奸商！ 不過其實水貨商才可怕，叫到 35k 了，到底是可以賺多大？） 後來又得知 PCHome 會有預售的活動，而且是依照 TR15 台灣官方的定價 24k 賣，所以後來無聊就想說每天早上十點都來搶看看，這次 TR15 一共有三個顏色， PCHome 預購每天每個顏色都放出 2 臺左右 (干！我還是搞不懂台灣卡西歐在干嘛 = =)，小弟一開始第一天沒搶到，第二天還是沒有，後來從第一二天學到經驗，就是一定要先登入 PCHome 購物，然後要點 ATM 或 iBon 付費，因為這兩個都是先結帳才付款，如果選信用卡光是填卡號跟過個認證就輸了，接著是要把寄送的地址那一頁用 AutoFill 先設定好，這樣一點完 ATM 那頁進去後自動填完就可以直接送出，運氣好的話就買到了 :P，所以後來很幸運的在第三天搶到一台白色的，搶到當下超爽的 A_A，不過第四天運氣不好，進去之後點太慢沒搶到 &gt; &lt; 不然本來想說可以賣掉，補一下自己要留著這台的價錢 (放心我本來只打算賣 28k XD 應該不算奸商吧)，不過沒差至少女友的禮物有著落了 XD，很快的 6/27 訂，今天 7/2 就收到了，以下是熱騰騰的開箱文。 熱騰騰的公司貨！群光直送！ 預購內容物是相機+送的相機袋，不過老實說送的就是送的，這品質頗差 0rz… 拿出來~ 由於到處都有條碼，其實我分不出哪些是唯一的，所以通通馬賽克~ 很素的包裝，但是看起來乾淨清爽，我喜歡 換另一個角度看 ˙﹃˙ 把內盒拉出來！ 僵僵 白色的！這次的鋼琴烤漆真的很美，而且很幸運的小弟拿到的沒有刮痕 (也可能是白的看不到 XD)，網路有人預購黑機 (黑機只有第一天才有 &gt; &lt;)，有明顯的刮痕 0rz… 馬上再反面檢查一下 (有灰塵就是了，拿球吹一下就好)，左下方是開機鍵 (充電的話按一下會變成磁碟機模式，電腦會出現 microSD 卡)，中間那顆是快門鍵 台灣保卡，因為是 PCHome 買的，所以購買證明要另外從 PCHome 的網頁印出來 印出來的購買證明 保卡下面盒子裝的內容物，一共有電池、台灣插頭、大陸插頭、USB 轉 microUSB 的線、插頭轉 USB 的轉接座、吊繩、說明書 立刻拆開電池跟背蓋準備充電了！ (電池蓋打開的方式是側邊有個按鈕按下去就可以把蓋子往外推了) BTW，這電池小的跟什麼一樣 = = 感覺就很不持久啊啊啊啊 0rz… 這次的 TR15 是吃 microSD，因為小弟手邊剛好有用不到的金士頓 microSD 8G，就直接裝上去啦！ 接電腦充電！ Casio 不愧是日本商，小弟拿手邊的日本手機 N-02A 擺一起，根本就一模一樣的設計理念啊！日本的東西真的很容易一眼就看出來 = = 後來小弟充了快兩個小時才充完電，感覺還蠻久的，不知道是不是電池本來是沒電的，因為充電中沒辦法打開電源 0rz…，我一按電源鍵就變成隨身碟模式，有點懶得翻說明書不清楚是不是原本就這樣設計，來說一說把玩了一小時的使用感想好了，操作速度方面沒話說，電容式螢幕真的非常靈敏，然後整體的反應也相當流暢，選單用起來很直覺，該有的說明都有，一看就知道在幹嗎，不過選單實在做的很不吸引人，會讓人以為這是什麼古老的界面，但是操作沒有什麼障礙，跟 iPhone 的 App 搭配起來也很完美。 操作界面，雖然每個項目都很大，但是解析度有點慘就是了 一 一” 控制 Menu，中文字體解析度還是很糟 美白 12 個 Level，預設在 6 接下來就是介紹一下這次的主打 Wifi 功能啦 照相時點一下上方手機的圖案就會出現下面這個畫面 裡面說明了 Wifi 放出來的名字跟密碼，其中密碼可以在選單自己設定，不然就是一組預設的數字 馬上開手機連了，連上後 TR15 的畫面就會切換，提醒你開起 App，記得先下載如下的 Casio App iPhone 的 App 然後手機就會顯示 TR15 鏡頭的畫面了，可以看到可以拉遠拉近 (數位變焦)，然後有快門按鍵，還有切換錄影或者照相 整體反應也是很快的，Wifi 的功能都沒什麼遲滯 再來是下載照片的部份，下載到手機的速度非常快，基本上已經超越我平常在用的 Toshiba FlashAir 了，這方面沒什麼大問題，真的很方便，而且放出 Wifi 速度也很快，我用過的 FlashAir 有時候都會找不到 Wifi 0rz… 最後說一下照出來的效果好了，簡單來說兩個字「模糊」，哇靠這台相機簡直就是像單眼的 ISO 開很高然後狂抹啊！我的皮膚都被磨亮了 XD 下面這張是 TR15 照的小弟自拍照 (因為女友是不露臉的！)，首度亮相！表情很詭異，小弟是在是不怎麼上相 0rz… 小弟都只放 800 x 600 大小的，因為其實原圖就是抹得很多而已，應該也不會有人想看這台的原圖 XD 小弟的皮膚就像上了密粉一樣，而且小弟臉上的痣乍看都不見了啦，這個真的很扯耶 XD 加上小弟本來就蠻白的，現在還白到發亮！我都懷疑到底是他對焦沒對好還是真的抹很大… 下面在貼一張小弟的 E-M5 + 12mm (等效 24mm 所以比 TR15 的 21mm 稍微的沒有那麼廣角) 的自拍照當對照 &gt; //// &lt; 這張是用 Olympus 的人像模式下去拍的 12mm 這顆的顏色實在淡很多而且很冷色系，不過微單眼照起來還是跟消費性相機有很明顯的不一樣，這張比較明顯的反應了真實的顏色，而且也比較立體 (可能是比較銳利加上光圈 2.0 散景比較模糊的關係)，TR15 抹到沒什麼立體感可言，我還只開 Level 6 耶 (美白最高 12 階) 縱觀來說 TR15 主打的就是自拍，如果就自拍來說，它的確是會有女生都喜歡的那種能力 XD 只能說他的定位定的很巧妙，不過我倒是很好奇他的榮景能保持多久，因為照理說如果自拍神機真的賣的這麼好，理論上其他數位相機廠應該也會爭先恐後的跳進來才對，可是目前依然只有卡西歐在做，真的是滿匪夷所思的。","categories":[{"name":"3C","slug":"3C","permalink":"https://blog.littlero.se/categories/3C/"}],"tags":[{"name":"Casio TR15","slug":"Casio-TR15","permalink":"https://blog.littlero.se/tags/Casio-TR15/"}]},{"title":"Saltstack 使用心得&簡介","slug":"nice-to-meet-saltstack","date":"2013-06-30T03:17:28.000Z","updated":"2015-03-14T05:41:33.000Z","comments":true,"path":"post/nice-to-meet-saltstack/","link":"","permalink":"https://blog.littlero.se/post/nice-to-meet-saltstack/","excerpt":"身為一個系統管理者，當你管理的機器數量只有十來台時，你可以很輕鬆的一台一台進去管理、設定機器，但是隨著服務開始搞大了，機器數量變成數十台時，也許會需要一些工具來輔助管理，之前我都是用 Fabric 來幫忙管理，不過 Fabric 有個缺點是他只是一個下指令的管理工具，當然我之前都硬幹，用 put 硬把他當成管理 configuration 的工具，上傳完了再下一個 reload 的指令，當然這樣也不是不行，不過似乎真的是一個很土炮的方法，但是隨著機器的數量越來越大，已經到達幾百臺的時候，就算是用 Fabric + parallel 其實還是覺得很怪，一來是雖然他已經平行處理了，但是他的 output 卻變成無序的，也就是當受管理的機器有 output 他就直接顯示在管理端上，有點惱人就是，另外一個是 Fabric 需要自己寫 Group 管理，要自己定義東西，而不能透過簡單的 query 來對想要的機器下指令就好，所以最近開始想要轉型使用 configuration management tool，常見的選擇是 puppet、chef、CFEngine 之類的，不過最近有個當紅的 OpenSource 軟體出現了，那就是 SaltStack。","text":"身為一個系統管理者，當你管理的機器數量只有十來台時，你可以很輕鬆的一台一台進去管理、設定機器，但是隨著服務開始搞大了，機器數量變成數十台時，也許會需要一些工具來輔助管理，之前我都是用 Fabric 來幫忙管理，不過 Fabric 有個缺點是他只是一個下指令的管理工具，當然我之前都硬幹，用 put 硬把他當成管理 configuration 的工具，上傳完了再下一個 reload 的指令，當然這樣也不是不行，不過似乎真的是一個很土炮的方法，但是隨著機器的數量越來越大，已經到達幾百臺的時候，就算是用 Fabric + parallel 其實還是覺得很怪，一來是雖然他已經平行處理了，但是他的 output 卻變成無序的，也就是當受管理的機器有 output 他就直接顯示在管理端上，有點惱人就是，另外一個是 Fabric 需要自己寫 Group 管理，要自己定義東西，而不能透過簡單的 query 來對想要的機器下指令就好，所以最近開始想要轉型使用 configuration management tool，常見的選擇是 puppet、chef、CFEngine 之類的，不過最近有個當紅的 OpenSource 軟體出現了，那就是 SaltStack。 SaltStack 在網路的形容看起來是輕量的，而且設定極其簡單，加上是 Python 寫的，基於本人跟 Python 實在很有緣，我最愛的 Gentoo Linux 剛好他的套件管理系統 portage 就是 Python-based，然後 Fabric 也是 Python，於是就決定使用看看 (這個理由是不是很薄弱 XD) SaltStack 的架構分成 Server (叫 Master) 跟 Client (叫 Minion)，每台電腦都要安裝 salt 的程式，安裝的方法也很簡單，官網有提供一行安裝法 wget -O - http://bootstrap.saltstack.org | sudo sh 這樣就裝好 Salt Master 了，不過當然如果是比較大的 Distro 像是 Ubuntu、SuSE、Gentoo 還是建議用內建的套件管理程式安裝，不過如果套件管理程式還是沒有就只好搬出 Python 的 easy_install salt 或 pip install salt 這兩種方法也可以把 Master 跟 Minion 都裝到好。 Master 跟 Minion 裝好之後就可以開始測試啦，現在馬上啟動 Master，指令是 salt-master -l debug 這樣 console 會噴大量的 debug msg 而且會先在前景執行，至於 Minion 這端我們要先設定一下 /etc/hosts 加入 Master 的 ip 然後名字叫 salt，例如 echo -n '\\n192.168.1.1 salt\\n' &gt;&gt; /etc/hosts 因為 Minion 預設是去找 salt 這個 name 的 Server，設定好之後就可以啟動 Minion 了 salt-minion -l debug，由於 Salt 是採用類似 SSH 那樣的 key 交換機制，所以理論上兩邊有連上的話在 Master 那端的電腦打 salt-key 應該會出現 Minion 的 ID ( 也就是機器的 hostname)，如下: Accepted Keys: Unaccepted Keys: Minion-01 Minion-02 Rejected Keys: 一開始加進來的 Minion 都會被擺在 Unaccepted 這裏，這時候要下 salt-keys -a 'Minion-*' 就可以把 Minion- 開頭的機器變成 accepted 的了，設定成信賴後，我們就可以開始下一些簡單的 query 了，比方說在 Master 那端打 salt 'Minion-*' test.ping 應該就會出現: Minion-01: True Minion-02: True 這樣就表示 Minion 有回應了，如果要對 Minion 下指令則是用 cmd.run，比方說 salt 'Minion-*' cmd.run date 應該會得到這樣的回應 Minion-01: Sun Jun 30 18:55:30 CST 2013 Minion-02: Sun Jun 30 18:55:30 CST 2013 詳細可以下的指令 ( Salt 叫做 modules ) 請看這裏 本文不多做介紹。 直接進入正題，如何利用 Salt 來做 Configuration 的管理呢，首先剛剛再啟動 Server 跟 Client 時，連設定都沒設定，zero-configuration 就可以直接用了，但是要比較進階一點當然還是需要小小設定一下，首先 Master 的設定檔位置在 __/etc/salt/master__，先做如下設定 file_roots: base: - /srv/salt file_ignore_regex: - '/\\.svn($|/)' - '/\\.git($|/)' 上面的設定是說我們的檔案 ( 也就是 salt 內建的 fileserver 要以哪裏為 Base ) 都放在 /srv/salt/ 裡面，然後要同步檔案時，把 /.svn/ 跟 /.git/ 都忽略掉。因此我們建立一下目錄跟建立相關檔案 install -d /srv/salt/ &amp;&amp; touch /srv/salt/top.sls，最主要的檔案就是這個 top.sls， SLS (可能是 SaLt State) 檔案就是描述所謂的 Configuration 要如何設定，在 Salt 一個 Configuration 就是一個 State，所有指定到的機器都會遵守這個狀態，這個 top.sls 大概會長下面這樣 base: '*': - users 'www-*': - nginx.www 首先第一行是 base 這是固定的，然後下面就是進行 ID 的配對，這裡可以看到我設定了兩組，一個是 ‘*’ 表示每一台受控管的機器都要遵守的設定，要參照 users 的 state，而這個定義在哪裡呢，就是 __/srv/salt/users.sls__，基本上 Salt 的檔案組合就是依照 file_roots 所指定的位置開始找的，然後 top.sls 裡面參照的 state 則可以省略 .sls 這個檔名，接著是所有 www- 開頭的機器都還要額外看 nginx.www 這個狀態，在 top.sls 裡面出現的 . 表示真正的位置是一個資料夾，也就是這個 nginx.www 狀態檔實際是描述在 __/srv/salt/nginx/www.sls__，先來看 users.sls 怎麼定義的好了 foo: user.present: - fullname: foo - shell: /bin/bash - home: /home/foo - uid: 1000 - gid: 100 - groups: - www bar: user.present: - fullname: bar - shell: /bin/bash - home: /home/bar - uid: 1001 - gid: 100 - groups: - wheel 這裏表示每一台機器至少要有 foo &amp; bar 這兩個帳號，然後其他設定都要參照這個檔案的說明，應該不難懂我就不一一說明了，要看詳細的可以參考 salt.states.user，然後再來是 /srv/salt/nginx/www.sls 會長的如下設定 /home/nginx/conf/: file.recurse: - source: salt://nginx/www/ - user: root - group: root - dir_mode: 755 - file_mode: 644 - include_empty: True nginx: service.running: - enable: True - reload: True - watch: - file: /home/nginx/conf/* 這裏表示指定到的 minion 的 __/home/nginx/conf/__，要參考 Master 的 salt://nginx/www/ 而這個的實際路徑是哪裏呢？依照之前說的一切都從 Base 開始，所以就是在 Master 的 __/srv/salt/nginx/www/__，也就是 Minion 的 /home/nginx/conf/ 狀態改變的依據要跟隨 Master 的 /srv/salt/nginx/www/ 資料夾，然後後面有個 service.running 那段則是表示當 /home/nginx/conf/* 有任何檔案被異動時 (參照 salt.states.service)， nginx 這個 Service 要被 reload (參照 reload: True 若無此設定則為 restart)，而 enable: True 則是表示開機要自動啟動，到目前為止就算是設定完 state 了，然後當然假設你的 nginx 設定檔都已經放在 /srv/salt/nginx/www/ 裡面了，接下來要同步狀態要用的指令就是 salt '*' state.highstate 然後應該會出現下列的資訊 www-01: ---------- State: - file Name: /home/nginx/conf/ Function: recurse Result: True Comment: The directory /home/nginx/conf/ is in the correct state Changes: ---------- State: - service Name: nginx Function: running Result: True Comment: Service nginx is already enabled, and is in the desired state Changes: ---------- State: - user Name: foo Function: present Result: True Comment: User foo is present and up to date Changes: ---------- State: - user Name: bar Function: present Result: True Comment: User bar is present and up to date Changes: 如何，很簡單吧！因為我的狀態已經同步了，所以都沒有異動，如果有任何異動 (包含新增、刪除使用者)，他都會一一列出來，更貼心的是檔案的異動甚至是列出 diff，真的是很仔細，目前為止大概就是如何利用 salt 來管理機器，用了這個之後真的就很簡單的就可以一次大量的管理一堆機器了，管理者可以花更多時間喝咖啡？ 下一篇會介紹一下如何客製化 grains，也就是取得機器的資訊的部份。","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"SaltStack","slug":"SaltStack","permalink":"https://blog.littlero.se/tags/SaltStack/"}]},{"title":"solve dmesg appeared nouveau No connectors reported connected with modes after upgrading kernel to 3.8 or later","slug":"solve-dmesg-appeared-nouveau-no-connectors-reported-connected-with-modes-after-upgrading-kernel-to-3.8-or-3.9","date":"2013-05-31T14:29:10.000Z","updated":"2015-03-14T05:42:09.000Z","comments":true,"path":"post/solve-dmesg-appeared-nouveau-no-connectors-reported-connected-with-modes-after-upgrading-kernel-to-3.8-or-3.9/","link":"","permalink":"https://blog.littlero.se/post/solve-dmesg-appeared-nouveau-no-connectors-reported-connected-with-modes-after-upgrading-kernel-to-3.8-or-3.9/","excerpt":"My Linux box installed a nVidia GeForce GT210 (a.k.a. Chipset GT218) graphic card. Before kernel 3.7, I append video=VGA-1:1440x900@60 to kernel parameters. Because I use a 2-meter-long VGA line to connect my computer and monitor, I have to enforce using VGA port as display output. And it works perfectly. The dmesg before kernel 3.7 says 123456789101112131415161718192021222324252627282930313233343536373839404142434445[drm] Initialized drm 1.1.0 20060810[drm] nouveau 0000:01:00.0: Detected an NV50 generation card (0x0a8280a2)[drm] nouveau 0000:01:00.0: Checking PRAMIN for VBIOS[drm] nouveau 0000:01:00.0: ... appears to be valid[drm] nouveau 0000:01:00.0: Using VBIOS from PRAMIN[drm] nouveau 0000:01:00.0: BIT BIOS found[drm] nouveau 0000:01:00.0: Bios version 70.18.2c.00[drm] nouveau 0000:01:00.0: TMDS table version 2.0[drm] nouveau 0000:01:00.0: MXM: no VBIOS data, nothing to do[drm] nouveau 0000:01:00.0: DCB version 4.0[drm] nouveau 0000:01:00.0: DCB outp 00: 01000302 00020030[drm] nouveau 0000:01:00.0: DCB outp 01: 02000300 00000000[drm] nouveau 0000:01:00.0: DCB outp 02: 02011362 0f220010[drm] nouveau 0000:01:00.0: DCB outp 03: 01022310 00020010[drm] nouveau 0000:01:00.0: DCB conn 00: 00001030[drm] nouveau 0000:01:00.0: DCB conn 01: 00202161[drm] nouveau 0000:01:00.0: DCB conn 02: 00000200[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 0 at offset 0xD0B7[drm] nouveau 0000:01:00.0: 0xD40D: Condition still not met after 20ms, skipping following opcodes[drm] nouveau 0000:01:00.0: 0xD411: Condition still not met after 20ms, skipping following opcodes[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 1 at offset 0xD608[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 2 at offset 0xE0DA[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 3 at offset 0xE10F[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 4 at offset 0xE2C2[drm] nouveau 0000:01:00.0: Parsing VBIOS init table at offset 0xE327[drm] nouveau 0000:01:00.0: 0xE327: Condition still not met after 20ms, skipping following opcodes[TTM] Zone kernel: Available graphics memory: 3051544 kiB[TTM] Zone dma32: Available graphics memory: 2097152 kiB[TTM] Initializing pool allocator[TTM] Initializing DMA pool allocator[drm] nouveau 0000:01:00.0: Detected 512MiB VRAM (DDR2)mtrr: type mismatch for e0000000,10000000 old: write-back new: write-combining[drm] nouveau 0000:01:00.0: 512 MiB GART (aperture)[drm] Supports vblank timestamp caching Rev 1 (10.10.2010).[drm] No driver support for vblank timestamp query.[drm] nouveau 0000:01:00.0: 3 available performance level(s)[drm] nouveau 0000:01:00.0: 0: core 135MHz shader 270MHz memory 135MHz voltage 850mV[drm] nouveau 0000:01:00.0: 1: core 405MHz shader 810MHz memory 405MHz voltage 900mV[drm] nouveau 0000:01:00.0: 3: core 589MHz shader 1402MHz memory 400MHz voltage 1000mV[drm] nouveau 0000:01:00.0: c: core 405MHz shader 810MHz memory 405MHz voltage 900mV[drm] nouveau 0000:01:00.0: allocated 1440x900 fb: 0x310000, bo ffff8801a78dc000fbcon: nouveaufb (fb0) is primary device[drm] nouveau 0000:01:00.0: no native mode, forcing panel scalingConsole: switching to colour frame buffer device 180x56fb0: nouveaufb frame buffer device The kernel 3.7 or prior version was enforced using VGA as output successfully. And the resolution is right. But after upgrading to 3.8 or above, I found that the parameter video=VGA-1:1440x900@60 causes a faulty screen after booting. I google it, and find some people bump into the same problem. No signal to monitor after kernel modesetting fails Problems with kernel-3.8 and kernel-3.9 modesetting The kernel 3.8 or above says 12345678910111213141516171819202122232425262728293031323334353637383940414243[drm] Initialized drm 1.1.0 20060810nouveau [ DEVICE][0000:01:00.0] BOOT0 : 0x0a8280a2nouveau [ DEVICE][0000:01:00.0] Chipset: GT218 (NVA8)nouveau [ DEVICE][0000:01:00.0] Family : NV50nouveau [ VBIOS][0000:01:00.0] checking PRAMIN for image...nouveau [ VBIOS][0000:01:00.0] ... appears to be validnouveau [ VBIOS][0000:01:00.0] using image from PRAMINnouveau [ VBIOS][0000:01:00.0] BIT signature foundnouveau [ VBIOS][0000:01:00.0] version 70.18.2c.00.04nouveau [ PFB][0000:01:00.0] RAM type: DDR2nouveau [ PFB][0000:01:00.0] RAM size: 512 MiBnouveau [ PFB][0000:01:00.0] ZCOMP: 960 tagsnouveau [ PTHERM][0000:01:00.0] FAN control: none / externalnouveau [ PTHERM][0000:01:00.0] fan management: disablednouveau [ PTHERM][0000:01:00.0] internal sensor: yes[TTM] Zone kernel: Available graphics memory: 3050978 kiB[TTM] Zone dma32: Available graphics memory: 2097152 kiB[TTM] Initializing pool allocator[TTM] Initializing DMA pool allocatormtrr: type mismatch for e0000000,10000000 old: write-back new: write-combiningnouveau [ DRM] VRAM: 512 MiBnouveau [ DRM] GART: 512 MiBnouveau [ DRM] TMDS table version 2.0nouveau [ DRM] DCB version 4.0nouveau [ DRM] DCB outp 00: 01000302 00020030nouveau [ DRM] DCB outp 01: 02000300 00000000nouveau [ DRM] DCB outp 02: 02011362 0f220010nouveau [ DRM] DCB outp 03: 01022310 00020010nouveau [ DRM] DCB conn 00: 00001030nouveau [ DRM] DCB conn 01: 00202161nouveau [ DRM] DCB conn 02: 00000200[drm] Supports vblank timestamp caching Rev 1 (10.10.2010).[drm] No driver support for vblank timestamp query.nouveau [ DRM] 3 available performance level(s)nouveau [ DRM] 0: core 135MHz shader 270MHz memory 135MHz voltage 850mVnouveau [ DRM] 1: core 405MHz shader 810MHz memory 405MHz voltage 900mVnouveau [ DRM] 3: core 589MHz shader 1402MHz memory 400MHz voltage 1000mVnouveau [ DRM] c: core 405MHz shader 810MHz memory 405MHz voltage 900mVnouveau [ DRM] MM: using COPY for buffer copiesnouveau 0000:01:00.0: No connectors reported connected with modes[drm] Cannot find any crtc or sizes - going 1024x768nouveau [ DRM] allocated 1024x768 fb: 0x70000, bo ffff8801a7c37c00fbcon: nouveaufb (fb0) is primary device The kernel 3.8 says it cannot find a connector? I read the documents of KMS, and then I solved the problem.","text":"My Linux box installed a nVidia GeForce GT210 (a.k.a. Chipset GT218) graphic card. Before kernel 3.7, I append video=VGA-1:1440x900@60 to kernel parameters. Because I use a 2-meter-long VGA line to connect my computer and monitor, I have to enforce using VGA port as display output. And it works perfectly. The dmesg before kernel 3.7 says 123456789101112131415161718192021222324252627282930313233343536373839404142434445[drm] Initialized drm 1.1.0 20060810[drm] nouveau 0000:01:00.0: Detected an NV50 generation card (0x0a8280a2)[drm] nouveau 0000:01:00.0: Checking PRAMIN for VBIOS[drm] nouveau 0000:01:00.0: ... appears to be valid[drm] nouveau 0000:01:00.0: Using VBIOS from PRAMIN[drm] nouveau 0000:01:00.0: BIT BIOS found[drm] nouveau 0000:01:00.0: Bios version 70.18.2c.00[drm] nouveau 0000:01:00.0: TMDS table version 2.0[drm] nouveau 0000:01:00.0: MXM: no VBIOS data, nothing to do[drm] nouveau 0000:01:00.0: DCB version 4.0[drm] nouveau 0000:01:00.0: DCB outp 00: 01000302 00020030[drm] nouveau 0000:01:00.0: DCB outp 01: 02000300 00000000[drm] nouveau 0000:01:00.0: DCB outp 02: 02011362 0f220010[drm] nouveau 0000:01:00.0: DCB outp 03: 01022310 00020010[drm] nouveau 0000:01:00.0: DCB conn 00: 00001030[drm] nouveau 0000:01:00.0: DCB conn 01: 00202161[drm] nouveau 0000:01:00.0: DCB conn 02: 00000200[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 0 at offset 0xD0B7[drm] nouveau 0000:01:00.0: 0xD40D: Condition still not met after 20ms, skipping following opcodes[drm] nouveau 0000:01:00.0: 0xD411: Condition still not met after 20ms, skipping following opcodes[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 1 at offset 0xD608[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 2 at offset 0xE0DA[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 3 at offset 0xE10F[drm] nouveau 0000:01:00.0: Parsing VBIOS init table 4 at offset 0xE2C2[drm] nouveau 0000:01:00.0: Parsing VBIOS init table at offset 0xE327[drm] nouveau 0000:01:00.0: 0xE327: Condition still not met after 20ms, skipping following opcodes[TTM] Zone kernel: Available graphics memory: 3051544 kiB[TTM] Zone dma32: Available graphics memory: 2097152 kiB[TTM] Initializing pool allocator[TTM] Initializing DMA pool allocator[drm] nouveau 0000:01:00.0: Detected 512MiB VRAM (DDR2)mtrr: type mismatch for e0000000,10000000 old: write-back new: write-combining[drm] nouveau 0000:01:00.0: 512 MiB GART (aperture)[drm] Supports vblank timestamp caching Rev 1 (10.10.2010).[drm] No driver support for vblank timestamp query.[drm] nouveau 0000:01:00.0: 3 available performance level(s)[drm] nouveau 0000:01:00.0: 0: core 135MHz shader 270MHz memory 135MHz voltage 850mV[drm] nouveau 0000:01:00.0: 1: core 405MHz shader 810MHz memory 405MHz voltage 900mV[drm] nouveau 0000:01:00.0: 3: core 589MHz shader 1402MHz memory 400MHz voltage 1000mV[drm] nouveau 0000:01:00.0: c: core 405MHz shader 810MHz memory 405MHz voltage 900mV[drm] nouveau 0000:01:00.0: allocated 1440x900 fb: 0x310000, bo ffff8801a78dc000fbcon: nouveaufb (fb0) is primary device[drm] nouveau 0000:01:00.0: no native mode, forcing panel scalingConsole: switching to colour frame buffer device 180x56fb0: nouveaufb frame buffer device The kernel 3.7 or prior version was enforced using VGA as output successfully. And the resolution is right. But after upgrading to 3.8 or above, I found that the parameter video=VGA-1:1440x900@60 causes a faulty screen after booting. I google it, and find some people bump into the same problem. No signal to monitor after kernel modesetting fails Problems with kernel-3.8 and kernel-3.9 modesetting The kernel 3.8 or above says 12345678910111213141516171819202122232425262728293031323334353637383940414243[drm] Initialized drm 1.1.0 20060810nouveau [ DEVICE][0000:01:00.0] BOOT0 : 0x0a8280a2nouveau [ DEVICE][0000:01:00.0] Chipset: GT218 (NVA8)nouveau [ DEVICE][0000:01:00.0] Family : NV50nouveau [ VBIOS][0000:01:00.0] checking PRAMIN for image...nouveau [ VBIOS][0000:01:00.0] ... appears to be validnouveau [ VBIOS][0000:01:00.0] using image from PRAMINnouveau [ VBIOS][0000:01:00.0] BIT signature foundnouveau [ VBIOS][0000:01:00.0] version 70.18.2c.00.04nouveau [ PFB][0000:01:00.0] RAM type: DDR2nouveau [ PFB][0000:01:00.0] RAM size: 512 MiBnouveau [ PFB][0000:01:00.0] ZCOMP: 960 tagsnouveau [ PTHERM][0000:01:00.0] FAN control: none / externalnouveau [ PTHERM][0000:01:00.0] fan management: disablednouveau [ PTHERM][0000:01:00.0] internal sensor: yes[TTM] Zone kernel: Available graphics memory: 3050978 kiB[TTM] Zone dma32: Available graphics memory: 2097152 kiB[TTM] Initializing pool allocator[TTM] Initializing DMA pool allocatormtrr: type mismatch for e0000000,10000000 old: write-back new: write-combiningnouveau [ DRM] VRAM: 512 MiBnouveau [ DRM] GART: 512 MiBnouveau [ DRM] TMDS table version 2.0nouveau [ DRM] DCB version 4.0nouveau [ DRM] DCB outp 00: 01000302 00020030nouveau [ DRM] DCB outp 01: 02000300 00000000nouveau [ DRM] DCB outp 02: 02011362 0f220010nouveau [ DRM] DCB outp 03: 01022310 00020010nouveau [ DRM] DCB conn 00: 00001030nouveau [ DRM] DCB conn 01: 00202161nouveau [ DRM] DCB conn 02: 00000200[drm] Supports vblank timestamp caching Rev 1 (10.10.2010).[drm] No driver support for vblank timestamp query.nouveau [ DRM] 3 available performance level(s)nouveau [ DRM] 0: core 135MHz shader 270MHz memory 135MHz voltage 850mVnouveau [ DRM] 1: core 405MHz shader 810MHz memory 405MHz voltage 900mVnouveau [ DRM] 3: core 589MHz shader 1402MHz memory 400MHz voltage 1000mVnouveau [ DRM] c: core 405MHz shader 810MHz memory 405MHz voltage 900mVnouveau [ DRM] MM: using COPY for buffer copiesnouveau 0000:01:00.0: No connectors reported connected with modes[drm] Cannot find any crtc or sizes - going 1024x768nouveau [ DRM] allocated 1024x768 fb: 0x70000, bo ffff8801a7c37c00fbcon: nouveaufb (fb0) is primary device The kernel 3.8 says it cannot find a connector? I read the documents of KMS, and then I solved the problem. The document Kernel Mode-setting says if you want to enforce some output, you should append “e” after the parameter. So that’s how I solved my problem. The parameter is just modified to video=VGA-1:1440x900@60e, and that’s all. Test your new kernel now! :) That’s what my kernel (3.9.3) says now 12345678910111213141516171819202122232425262728293031323334353637383940414243[drm] Initialized drm 1.1.0 20060810nouveau [ DEVICE][0000:01:00.0] BOOT0 : 0x0a8280a2nouveau [ DEVICE][0000:01:00.0] Chipset: GT218 (NVA8)nouveau [ DEVICE][0000:01:00.0] Family : NV50nouveau [ VBIOS][0000:01:00.0] checking PRAMIN for image...nouveau [ VBIOS][0000:01:00.0] ... appears to be validnouveau [ VBIOS][0000:01:00.0] using image from PRAMINnouveau [ VBIOS][0000:01:00.0] BIT signature foundnouveau [ VBIOS][0000:01:00.0] version 70.18.2c.00.04nouveau [ PFB][0000:01:00.0] RAM type: DDR2nouveau [ PFB][0000:01:00.0] RAM size: 512 MiBnouveau [ PFB][0000:01:00.0] ZCOMP: 960 tagsnouveau [ PTHERM][0000:01:00.0] FAN control: none / externalnouveau [ PTHERM][0000:01:00.0] fan management: disablednouveau [ PTHERM][0000:01:00.0] internal sensor: yesnouveau [ PTHERM][0000:01:00.0] programmed thresholds [ 90(3), 95(3), 105(5), 135(5) [TTM] Zone kernel: Available graphics memory: 3051030 kiB[TTM] Zone dma32: Available graphics memory: 2097152 kiB[TTM] Initializing pool allocator[TTM] Initializing DMA pool allocatormtrr: type mismatch for e0000000,10000000 old: write-back new: write-combiningnouveau [ DRM] VRAM: 512 MiBnouveau [ DRM] GART: 512 MiBnouveau [ DRM] TMDS table version 2.0nouveau [ DRM] DCB version 4.0nouveau [ DRM] DCB outp 00: 01000302 00020030nouveau [ DRM] DCB outp 01: 02000300 00000000nouveau [ DRM] DCB outp 02: 02011362 0f220010nouveau [ DRM] DCB outp 03: 01022310 00020010nouveau [ DRM] DCB conn 00: 00001030nouveau [ DRM] DCB conn 01: 00202161nouveau [ DRM] DCB conn 02: 00000200[drm] Supports vblank timestamp caching Rev 1 (10.10.2010).[drm] No driver support for vblank timestamp query.nouveau [ DRM] 3 available performance level(s)nouveau [ DRM] 0: core 135MHz shader 270MHz memory 135MHz voltage 850mVnouveau [ DRM] 1: core 405MHz shader 810MHz memory 405MHz voltage 900mVnouveau [ DRM] 3: core 589MHz shader 1402MHz memory 400MHz voltage 1000mVnouveau [ DRM] c: core 405MHz shader 810MHz memory 405MHz voltage 900mVnouveau [ DRM] MM: using COPY for buffer copies[drm] forcing VGA-1 connector ONnouveau [ DRM] allocated 1440x900 fb: 0x70000, bo ffff8801a83f8000fbcon: nouveaufb (fb0) is primary device As you can see the line shows “[drm] forcing VGA-1 connector ON”. I think the problem maybe cause by the parameter check is more strict now.","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"}]},{"title":"E-M5 木質手把","slug":"e-m5-wooden-grip","date":"2013-05-16T12:15:54.000Z","updated":"2016-12-20T14:23:18.000Z","comments":true,"path":"post/e-m5-wooden-grip/","link":"","permalink":"https://blog.littlero.se/post/e-m5-wooden-grip/","excerpt":"再次從 HOSON 團隊拿到了一個測試手把。 不同的是這次手柄是木質的 ！ E-M5 的主人們不用再羡慕只有 E-P5 有限量版的木質手柄了 :P 借用一下 E-P5 木質手柄的圖 因為選用的木頭不同所以顏色是不一樣的，E-P5 是加拿大楓木，而版友所選的是質地經過測試很堅固的柚木。 設計團隊測試了柚木跟槐木，發現槐木還是軟了一點，他們更看過紫檀木，不過後來因為成本過高就作罷了。 註: 柚木在 wiki 裡面記載 「機械性質極強、乾燥性良好，收縮率小、木質強韌、耐久性高、對菌類及蟲害抵抗力強 … 木理通直、質地堅硬、細緻，材面含油脂之觸感，乾燥性良好，耐久性高，為所有木材中膨脹收縮最少者一，尺寸安定性佳。材面木紋美觀優雅、且加工容易、為世界上高級木材之一。」","text":"再次從 HOSON 團隊拿到了一個測試手把。 不同的是這次手柄是木質的 ！ E-M5 的主人們不用再羡慕只有 E-P5 有限量版的木質手柄了 :P 借用一下 E-P5 木質手柄的圖 因為選用的木頭不同所以顏色是不一樣的，E-P5 是加拿大楓木，而版友所選的是質地經過測試很堅固的柚木。 設計團隊測試了柚木跟槐木，發現槐木還是軟了一點，他們更看過紫檀木，不過後來因為成本過高就作罷了。 註: 柚木在 wiki 裡面記載 「機械性質極強、乾燥性良好，收縮率小、木質強韌、耐久性高、對菌類及蟲害抵抗力強 … 木理通直、質地堅硬、細緻，材面含油脂之觸感，乾燥性良好，耐久性高，為所有木材中膨脹收縮最少者一，尺寸安定性佳。材面木紋美觀優雅、且加工容易、為世界上高級木材之一。」 而且柚木手把本身就散發著十分清香的木頭味 這應該是 E-P5 的手把不會有的。 在大小 (形狀) 上跟原本的金屬手把一模一樣。 內層更是用鐳射刻上了品牌跟 MADE IN TAIWAN 讚 (≧▽≦)/ 但同時也有個壞消息就是了，因為這是用鐳射刻的，原本團隊設想的是透過鐳射刻字讓木頭內部的紋路暴露出來增加特色，不過他們試了幾次發現好像跟原本想的不一樣 0rz… 加上鐳射一塊木頭成本要增加 200 元，所以設計團隊說有可能正式的不會鐳射刻字。 因為木頭材質的關係，原本設計團隊最擔心下面螺絲的部份後來也都很巧妙的解決了： 答案就是… 電腦的銅柱 XD 可以發現這個銅柱邊緣是多角狀的，剛好可以順利的嵌入木頭，完全咬住木頭，而且柚木強度也足以支撐這個銅柱的邊邊，絲毫沒有裂掉的痕跡。 不過目前有個問題是這個銅柱比原本金屬底座接合處留的洞 (鎖螺絲的地方) 還要小一點 (設計團隊說寬度約小了 1mm 左右)，目前他們已經在大陸找到廠商有在做這個寬度的橡皮圈，還在訂購中，所以理想上最後的成品會無縫的接合原本的底座。 但是現在的試驗品都還沒有橡皮圈，所以我只好先自行解決了… 左想右想…結果只好拿了牙線 (正是你想的剔牙的牙線 - -;)，綁個幾圈增加寬度 XD 不過總算是解決了銅柱寬度不足的問題。 最後附上兩張換上底座的圖 下面這張好像被我的 12mm 廣角拉斜了 = =” 實際上是非常方正的 這個手把的表面塗有日本的漆 (應該是日本的 XD 我忘了)，設計團隊說最後會推出三種顏色，不過我忘記問是哪三種了，喜歡的版友可以期待最後推出的色系，不過目前看來木頭原色大好！ 另外除了顏色的差異，木頭本身的紋路也是重點，設計團隊說他們針對木頭的紋路有分幾個等級，不過我不知道會不會反應在售價就是了，喜歡的板友應該是可以挑自己喜歡的紋路，創造個人化。 重量上也減少了約 20g，原本的手把約 6x g 現在只來到了 4x g，更沒有負擔的增加握持感。 至於手把拿起來其實就跟金屬的一模一樣 (因為形狀都一模一樣啊 XD)，不同的地方在於沒有冰冰涼涼了 所以就不附上手把實握圖啦~ 這木頭手柄馬上變成我的最愛，原本的金屬手柄就被我收起來了 XD","categories":[{"name":"3C","slug":"3C","permalink":"https://blog.littlero.se/categories/3C/"}],"tags":[{"name":"E-M5","slug":"E-M5","permalink":"https://blog.littlero.se/tags/E-M5/"}]},{"title":"Safari 無法建立 nginx ssl_ciphers 使用 RC4 的連線","slug":"nginx-ssl-cipher-rc4-safari","date":"2013-04-27T05:52:58.000Z","updated":"2015-03-14T05:41:29.000Z","comments":true,"path":"post/nginx-ssl-cipher-rc4-safari/","link":"","permalink":"https://blog.littlero.se/post/nginx-ssl-cipher-rc4-safari/","excerpt":"前幾天幫部門把原本提供 HTTPS 的 squid 換成 nginx，結果馬上被反應 Mac 上面的 Agent 不能連線但是又不知道為什麼，因為其他的瀏覽器 Chrome Firefox 不管作業系統 Windows Linux Mac 上的都可以連真的很弔詭，麻煩同事用跟 Agent 一樣的 Framework 重寫一個簡單的版本也不行，測了很久也找不太到癥結點，後來靈機一動，何不試看看 Safari … 結果果然不出所料… Unable to establish a secure connection XDDD 搞什麼連 Safari 也連不了，這樣子要 Debug 我就可以自己來了，不然要一直麻煩同事跟我對測不好意思，一開始先用 tcpdump 發現 Server 送 Certificate 給 Client 之後 Client 就自己斷掉 connection ?! WTF 這太沒有頭緒了吧，後來上網搜尋 ssl connection fail safari，結果一路看看看就看到了這個 HTTPS requests fail on sites which immediately close the connection if TLS 1.1 negotiation is attempted, on Ubuntu 12.04，起因是 OpenSSL 1.0.1 的一個 Bug，版上建議降成 OpenSSL 1.0.0 就可以了，因為我要啟用 nginx 的 spdy 所以一定要用 OpenSSL 1.0.1 才可以，不過秉持實驗的精神只好先解除這個功能，於是我就編譯了 nginx with openssl 1.0.0k，然後結果…靠背還是一樣 Safri 不能連其他都可以！不信邪改用 0.9.8y，結果在一模一樣的設定下這個 Safari 就可以連了 = = (這哪招)，總之越來越神秘，只好先回到 nginx with openssl 1.0.1e，(就是死命要 spdy 就對了 XD)，後來在沒什麼想法的情況下只好打開 nginx 的 debug modeerror_log xxxxx debug;，瞧瞧裡面有什麼。 結果就看到 123456SSL handshake handler: 0[debug] 7585#0: *1 SSL_do_handshake: 0[debug] 7585#0: *1 SSL_get_error: 5[info] 7585#0: *1 peer closed connection in SSL handshake while SSL handshaking, client: x.x.x.x, server: 0.0.0.0:443 [debug] 7585#0: *1 close http connection: 14[debug] 7585#0: *1 SSL_shutdown: 1","text":"前幾天幫部門把原本提供 HTTPS 的 squid 換成 nginx，結果馬上被反應 Mac 上面的 Agent 不能連線但是又不知道為什麼，因為其他的瀏覽器 Chrome Firefox 不管作業系統 Windows Linux Mac 上的都可以連真的很弔詭，麻煩同事用跟 Agent 一樣的 Framework 重寫一個簡單的版本也不行，測了很久也找不太到癥結點，後來靈機一動，何不試看看 Safari … 結果果然不出所料… Unable to establish a secure connection XDDD 搞什麼連 Safari 也連不了，這樣子要 Debug 我就可以自己來了，不然要一直麻煩同事跟我對測不好意思，一開始先用 tcpdump 發現 Server 送 Certificate 給 Client 之後 Client 就自己斷掉 connection ?! WTF 這太沒有頭緒了吧，後來上網搜尋 ssl connection fail safari，結果一路看看看就看到了這個 HTTPS requests fail on sites which immediately close the connection if TLS 1.1 negotiation is attempted, on Ubuntu 12.04，起因是 OpenSSL 1.0.1 的一個 Bug，版上建議降成 OpenSSL 1.0.0 就可以了，因為我要啟用 nginx 的 spdy 所以一定要用 OpenSSL 1.0.1 才可以，不過秉持實驗的精神只好先解除這個功能，於是我就編譯了 nginx with openssl 1.0.0k，然後結果…靠背還是一樣 Safri 不能連其他都可以！不信邪改用 0.9.8y，結果在一模一樣的設定下這個 Safari 就可以連了 = = (這哪招)，總之越來越神秘，只好先回到 nginx with openssl 1.0.1e，(就是死命要 spdy 就對了 XD)，後來在沒什麼想法的情況下只好打開 nginx 的 debug modeerror_log xxxxx debug;，瞧瞧裡面有什麼。 結果就看到 123456SSL handshake handler: 0[debug] 7585#0: *1 SSL_do_handshake: 0[debug] 7585#0: *1 SSL_get_error: 5[info] 7585#0: *1 peer closed connection in SSL handshake while SSL handshaking, client: x.x.x.x, server: 0.0.0.0:443 [debug] 7585#0: *1 close http connection: 14[debug] 7585#0: *1 SSL_shutdown: 1 啊靠，搞屁 Safari 直接斷掉 connection，這哪招，於是再用 Chrome 連看看 12345SSL handshake handler: 0[debug] 8398#0: *1 ssl new session: 67979935:32:139[debug] 8398#0: *1 SSL_do_handshake: 1[debug] 8398#0: *1 SSL: TLSv1.1, cipher: \"ECDHE-RSA-RC4-SHA SSLv3 Kx=ECDH Au=RSA Enc=RC4(128) Mac=SHA1\"[debug] 8398#0: *1 reusable connection: 1 Bingo，看到一個關鍵的地方，在 SSL handshake 中，client 發一個簡單的 Hello 給 Sever 後，Server 也會回一個 Hello 給 Client，其中這兩個 Hello 會把自己支援的 SSL 版本、加密法包在裡面給對方知道，於是這就回到 nginx 的 ssl 設定了，在 nginx 的 doc Configuring HTTPS servers 中，提到了因為要防禦 CVE-2011-3389 BEAST Attack，建議把 SSL 設置如下 123ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers RC4:HIGH:!aNULL:!MD5;ssl_prefer_server_ciphers on; 這個表示優先使用 RC4 的加密，然後是高安全 (超過 128bit) 的加密法，不接受 MD5 digest 的方式，所以我們可以看到 Chrome 是採用了 ECDHE-RSA-RC4-SHA (Firefox 也是)，但是 Safari 就這樣直接斷掉 connection… 我真是搞不懂你啊！這時候只好參考一些網路網站 (就是拜一拜 Google 大神了)，就看到有個網站可以列出你的瀏覽器支援的 SSL cipher 在此 SSL Cipher Suite Details of Your Browser 用 Safari 開了一下，如下 12345678910111213141516171819202122232425262728293031323334353637Cipher Suites Supported by Your Browser (ordered by preference):SpecCipher Suite NameKey SizeDescription(00,ff)EMPTY-RENEGOTIATION-INFO-SCSV0 BitUsed for secure renegotation.(c0,0a)ECDHE-ECDSA-AES256-SHA256 BitKey exchange: ECDH, encryption: AES, MAC: SHA1.(c0,09)ECDHE-ECDSA-AES128-SHA128 BitKey exchange: ECDH, encryption: AES, MAC: SHA1.(c0,07)ECDHE-ECDSA-RC4128-SHA128 BitKey exchange: ECDH, encryption: RC4, MAC: SHA1.(c0,08)ECDHE-ECDSA-3DES-EDE-SHA168 BitKey exchange: ECDH, encryption: 3DES, MAC: SHA1.(c0,14)ECDHE-RSA-AES256-SHA256 BitKey exchange: ECDH, encryption: AES, MAC: SHA1.(c0,13)ECDHE-RSA-AES128-SHA128 BitKey exchange: ECDH, encryption: AES, MAC: SHA1.(c0,11)ECDHE-RSA-RC4128-SHA128 BitKey exchange: ECDH, encryption: RC4, MAC: SHA1.(c0,12)ECDHE-RSA-3DES-EDE-SHA168 BitKey exchange: ECDH, encryption: 3DES, MAC: SHA1.(c0,04)ECDH-ECDSA-AES128-SHA128 BitKey exchange: ECDH, encryption: AES, MAC: SHA1.(c0,05)ECDH-ECDSA-AES256-SHA256 BitKey exchange: ECDH, encryption: AES, MAC: SHA1.(c0,02)ECDH-ECDSA-RC4128-SHA128 BitKey exchange: ECDH, encryption: RC4, MAC: SHA1.(c0,03)ECDH-ECDSA-3DES-EDE-SHA168 BitKey exchange: ECDH, encryption: 3DES, MAC: SHA1.(c0,0e)ECDH-RSA-AES128-SHA128 BitKey exchange: ECDH, encryption: AES, MAC: SHA1.(c0,0f)ECDH-RSA-AES256-SHA256 BitKey exchange: ECDH, encryption: AES, MAC: SHA1.(c0,0c)ECDH-RSA-RC4128-SHA128 BitKey exchange: ECDH, encryption: RC4, MAC: SHA1.(c0,0d)ECDH-RSA-3DES-EDE-SHA168 BitKey exchange: ECDH, encryption: 3DES, MAC: SHA1.(00,2f)RSA-AES128-SHA128 BitKey exchange: RSA, encryption: AES, MAC: SHA1.(00,05)RSA-RC4128-SHA128 BitKey exchange: RSA, encryption: RC4, MAC: SHA1.(00,04)RSA-RC4128-MD5128 BitKey exchange: RSA, encryption: RC4, MAC: MD5.(00,35)RSA-AES256-SHA256 BitKey exchange: RSA, encryption: AES, MAC: SHA1.(00,0a)RSA-3DES-EDE-SHA56 BitKey exchange: RSA, encryption: 3DES, MAC: SHA1.(00,33)DHE-RSA-AES128-SHA128 BitKey exchange: DH, encryption: AES, MAC: SHA1.(00,39)DHE-RSA-AES256-SHA256 BitKey exchange: DH, encryption: AES, MAC: SHA1.(00,16)DHE-RSA-3DES-EDE-SHA168 BitKey exchange: DH, encryption: 3DES, MAC: SHA1.Further information:User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/536.29.13 (KHTML, like Gecko) Version/6.0.4 Safari/536.29.13Preferred SSL/TLS version: TLSv1SNI information: cc.dcsec.uni-hannover.deSSL stack current time: Sat, 27 Apr 2013 08:20:54This connection uses TLSv1 with AES128-SHA and a 128 Bit key for encryption. 干，Safari 有支援 RC4 卻不給我使用，跑去用什麼 AES128-SHA 0rz…，所以我就想說奇怪為什麼有支援但是 nginx 單純設定 RC4 卻會失敗，於是在好奇之下就改成設定了 1ssl_ciphers RC4-SHA:HIGH:!aNULL:!MD5; 結果… Safari 就好了… Fxck 真的很想罵髒話，nginx 送 RC4 給 curl、Chrome、Firefox 都看的懂，你 Safari 就看不懂直接中斷連線是怎樣 = = Okay~ anyway，後來在網路也查不到什麼相關文章，不過我在網路上找到 BEAST Attack 的白皮書 裡面推薦把 Web Server Cipher 設定成!aNULL:!eNULL:!EXPORT:!DSS:!DE S:!SSLv2:RC4-SHA:RC4-MD5:ALL，經過測試這樣的順序 Safari 也可以正確的判讀 (因為 RC4-SHA:RC4-MD5 都明確說明了啊！)，不過基於 MD5 的 digest 似乎有 collision 的機率現在好像都不推薦使用，所以原本有個!MD5，於是最後我在我們 Server 上就改成了 1ssl_ciphers !aNULL:!eNULL:!EXPORT:!DSS:!DES:!MD5:RC4-SHA:ALL; 也就是不要 NULL， EXPORT 家族的，也不要 DSS、DES 的加密法，不要 MD5 的 digest，優先使用 RC4-SHA 跟剩下的其他加密/訊息驗證法，因為 RC4 跟 3DES 幾乎所有的 OS 都有支援，但是 3DES 效能是在太低會把 Server 拖一些下來，所以建議儘量使用 RC4 優先，這個網頁有速度的比較 OpenSSL: Cipher Selection 可以看到 RC4 是快很多的，但是在有支援 AESNI 指令集的 CPU 上用 AES 速度更快 (可用 grep aes /proc/cpuinfo 檢查)，所以目前使用 RC4 是安全又快速的。最後如果要檢查 HTTPS 到底是不是安全，可以使用 SSL Server Test 來檢查。 如果對 BEAST 攻擊有興趣可以看這篇 SSL Beast – SSL Assessments and How to Fix 後來在測試 Mac 的 Agent 也可以連了，看起來是底層的 Framework 可能有問題。 後記關於 SSL 其實有很多傳說 XDD，我還有看到人家說 OpenSSL 1.0.0 產生的憑證不能用在 Apache 上，跟我們的問題有點類似，因為我們自己內部網站用的 SSL 加一模一樣的 nginx 設定 (也就是只開 RC4) Safari 是完全沒問題的，這次出事的是我們對外服務的網站，但是因為憑證當初不是我申請的，所以問題已經無從追了，網路沒什麼反應也許 nginx 官網推薦的設定是真的 OK 的只是我們剛好踩到這個雷 %&gt;_&lt;% 另外也許文章一開始提到的，nginx 改用 OpenSSL 0.9.8y 可以是因為 Safari fallback 回去 SSLv3 的連線，所以就沒有使用奇奇怪怪的加密法，不然預設 Safari 也會優先使用 TLSv1。然後一用 TLSv1 配上我們的憑證也許 Safari 就傻了之類的 XD 後記 x2目前 SSL/TSL key 都是直接交換的方式也就是同一把 key 用久久，去年爆出 NSA 其實有在偷偷側錄 SSL/TSL 的流量，所以有個名詞突然紅了起來，就是 Perfect Forward Secrecy (PFS)，他是建立在 D-H 上，也就是動態產生一組 session key 交換，這樣可以確保全部訊息沒有辦法被用同一把 key 給解開。因此參考 Configuring Apache, Nginx, and OpenSSL for Forward Secrecy 這裡，建議把設定改成下列： 123ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4-SHA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS\"; 我把原文章的 RC4 改成 RC4-SHA，經過測試後，Safari 也可用！ 不過需要注意的是因為要打開橢圓曲線加密所以搭配 nginx 的 OpenSSL 最低需求要 1.0.1c 以上。 參考資料 SSL/TLS &amp; Perfect Forward Secrecy SSL Ciphersuite Configuration for External HTTPS Connections","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://blog.littlero.se/tags/Mac/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.littlero.se/tags/nginx/"}]},{"title":"用 map 的功能把 nginx 變成簡單的應用程式防火牆","slug":"nginx---using-map-as-a-simple-web-application-firewall","date":"2013-04-14T03:44:22.000Z","updated":"2015-03-14T05:41:20.000Z","comments":true,"path":"post/nginx---using-map-as-a-simple-web-application-firewall/","link":"","permalink":"https://blog.littlero.se/post/nginx---using-map-as-a-simple-web-application-firewall/","excerpt":"要幫 nginx 增加安全性的話，大概首推 modsecurity 這個模組了，不過目前他只有支援 nginx 1.2 穩定版，尚未支援 1.3 開發版，基本上具有下列功能 超過 16000 規則防範下列攻擊 SQL injection Cross-site Scripting (XSS) Local File Include Remote File Include 可客製化規則，保護下列的應用 WordPress cPanel osCommerce Joomla 包含了 OWASP Core Rule Set IP 聲望偵測 Malware Detection 不過有一些在更簡單的功能，像是有時候會自己想擋一些 bot，或者要判斷合法的 referrer 才給過之類的就不在這個之內了，這時候我們可以利用 map 來幫我們做簡單的過濾。","text":"要幫 nginx 增加安全性的話，大概首推 modsecurity 這個模組了，不過目前他只有支援 nginx 1.2 穩定版，尚未支援 1.3 開發版，基本上具有下列功能 超過 16000 規則防範下列攻擊 SQL injection Cross-site Scripting (XSS) Local File Include Remote File Include 可客製化規則，保護下列的應用 WordPress cPanel osCommerce Joomla 包含了 OWASP Core Rule Set IP 聲望偵測 Malware Detection 不過有一些在更簡單的功能，像是有時候會自己想擋一些 bot，或者要判斷合法的 referrer 才給過之類的就不在這個之內了，這時候我們可以利用 map 來幫我們做簡單的過濾。 首先 map 只能夠放在 http 的 scope 內，所以我們可以在 http 內擺下列規則 12345678910111213141516map $request_method $bad_method { default 1; ~*(get|head|post) 0;}map $http_user_agent $bad_bot { default 0; ~*^curl 1; ~*^flashget 1; ~*^java 1; ~^$ 1;}map $query_string $bad_query { default 0; ~[a-zA-Z0-9_]=(\\.\\.%2F(%2F)?)+ 1; ~[a-zA-Z0-9_]=%2F([a-z0-9_.]+%2F(%2F)?)+ 1;} map 的用法很簡單，第一個參數給的是要做比較的對象通常就是 http core 可以使用的那些變數可以參考 這裡，然後第二個參數就是覆寫過後的變數名稱，再來大刮號內首先給這個變數一個預設值也就是 default xxx;，後面就開始接比較的方法跟如果 match 到要給第二個變數什麼值，通常有三種表示法以 ~ ~* 跟不是這兩個開頭的，以 ~ 跟 ~* 開頭的表示要用正規表示式來比對，沒有的就表示是常規的方式比對 (直接比對)，所以剛剛的範例來說可以用下面的來解釋 12345678910111213141516171819202122232425262728# 比對 $request_method 然後比對後的值放 $bad_methodmap $request_method $bad_method { # 把 $bad_method 設定成 0 default 1; # 如果 $request_method 是 GET 或 HEAD 或 POST 就把 $bad_method 設成 0 ~*(get|head|post) 0;}# 比對 $http_user_agent 比對的值放 $bad_botmap $http_user_agent $bad_bot { # $bad_bot 預設是 0 default 0; # user agent 遇到 curl / flashget / java 或者完全是空的就設成 1 ~*^curl 1; ~*^flashget 1; ~*^java 1; ~^$ 1;}# 比對 ? 後面的參數map $query_string $bad_query { default 0; # 如果遇到要 access 檔案的 比方說 a=..%2Fetc%2Fpasswd 之類的 $bad_query 就設成 1 ~[a-zA-Z0-9_]=(\\.\\.%2F(%2F)?)+ 1; # 這個是 a=%2Fetc%2F 之類的 ~[a-zA-Z0-9_]=%2F([a-z0-9_.]+%2F(%2F)?)+ 1;}# 註: %2F 就是 / 然後我們要在 server 的 context 擺下面的設定才會生效 (建議擺在最上面就可以了 123456789if ($bad_method = 1) { return 444;}if ($bad_bot = 1) { return 444;}if ($bad_query = 1) { return 444;} 這樣就會把我們不想要的 request 都過濾掉了。","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.littlero.se/tags/nginx/"}]},{"title":"E-M5 副廠手把","slug":"e-m5-grip-base","date":"2013-04-13T12:30:03.000Z","updated":"2016-12-20T14:22:45.000Z","comments":true,"path":"post/e-m5-grip-base/","link":"","permalink":"https://blog.littlero.se/post/e-m5-grip-base/","excerpt":"E-M5 的手感雖然有做出手把的弧形但是因為實在是太淺了，所以還是稍微差了一點，像我是手小的都覺得 E-M5 不好握的話，手大的應該就更難了，原廠賣的手把是跟電池底座一起賣的要九張小朋友多一點的價格，真的是見鬼了，而且不喜歡加個電池底座多一個累贅，不過現在救星來了！ HOSON 團隊帶來了一個鋁鎂合金手把 MA-1 沒錯！他叫做阿魯把，是把不是八，剛看到時覺得挺妙的，作者補充說是阿嚕咪 (aluminum) 的手把啦~ 而且設計製造都是在台灣，純正的 MIT！","text":"E-M5 的手感雖然有做出手把的弧形但是因為實在是太淺了，所以還是稍微差了一點，像我是手小的都覺得 E-M5 不好握的話，手大的應該就更難了，原廠賣的手把是跟電池底座一起賣的要九張小朋友多一點的價格，真的是見鬼了，而且不喜歡加個電池底座多一個累贅，不過現在救星來了！ HOSON 團隊帶來了一個鋁鎂合金手把 MA-1 沒錯！他叫做阿魯把，是把不是八，剛看到時覺得挺妙的，作者補充說是阿嚕咪 (aluminum) 的手把啦~ 而且設計製造都是在台灣，純正的 MIT！ 內容物因為在試握會已經開箱了，所以以下就不從開箱開始了，直接分享組裝好的成品 (其實也只是兩個螺絲，但我懶得拆了 XD) 正面 背面 注意的是底座的上面有作者用手工裁切、黏合的緩衝墊，這樣在上鎖時可以有效地保護 E-M5 的機身，不會被刮到。另外右邊有一根金屬針，左邊有兩個小圓點，都是對應到 E-M5 機身的孔或者螺絲的凸出點，可見作者對於小細節也是相當注重的。 底部 注意到的是底部的兩個螺絲，因為這個手把是兩件式的，底座跟手把處是可以分開的，未來會單獨賣上面的手把部，因為作者一直想做木製的 XD，目前是柚木跟檜木在實驗，真的很下重本！只是目前還卡在技術沒有突破 (木頭鎖螺絲強度會不夠)，所以就拭目以待吧，期待有好消息。 接下來就是跟 E-M5 的合體照啦！ 當然換電池是不需要拆的 這張照片可以看出來握把的部份上半段大約有一公分厚的半圓形，然後下半段才是兩段式弧狀的部份，後面會有手握的實際圖，這樣的設計作者有他的道理！底部的部份基本是平整的，有個腳架孔。 然後是手拿的照片 上視圖 握起來就是中指勾住半圓形的上段，剩下的就勾住下面的弧狀，整體受力就自然很多，不會像沒裝之前那種拇指硬拉的感覺，另外為什麼要在最上半段做半圓形而不是兩段式弧狀，除了中指比較長這樣可以比較有支撐之外另外一個重點是半圓才會靠住原本的 E-M5 機身，如果鏡頭重一點這樣的設計才支撐的比較好。 最後講一下價錢，入手價是 2.6k，算是很好的價位，因為一樣是鋁製的，iPhone 的鋁製底座 elevationdock 價位也大概是 2.5k 左右，而且參加試握會跟作者聊天感覺得到作者真的很用心在做產品，希望他們團隊未來可以開發更多好用的配件。 最後來一張說明書，還有出貨檢驗過的哦！另外他們有多付一顆螺絲做備品。 更多的照片可以參考下列文章或者是他們的 Facebook 粉絲團！ 相關資料: Mobile01 - 【持續分享】Olympus OMD E-M5 手把 (握把) 友人自行開發 Mobile01 - (開箱文）Em-5 omd 副廠把手（握把） Mobile01 - (圖多) EM5 交流俱樂部小聚!","categories":[{"name":"3C","slug":"3C","permalink":"https://blog.littlero.se/categories/3C/"}],"tags":[{"name":"E-M5","slug":"E-M5","permalink":"https://blog.littlero.se/tags/E-M5/"}]},{"title":"E-M5 12mm 25mm","slug":"e-m5-12mm-25mm","date":"2013-03-24T03:05:58.000Z","updated":"2016-12-20T14:24:02.000Z","comments":true,"path":"post/e-m5-12mm-25mm/","link":"","permalink":"https://blog.littlero.se/post/e-m5-12mm-25mm/","excerpt":"三年前原本買了 GF2 + LUMIX G 14mm F2.5 ASPH 要給我妹，結果他竟然嫌棄說 14mm 沒辦法變焦… 0rz… 這實在是，結果後來還是買了一般的小 DC 給她 = =+，然後去年入手了 LEICA DG SUMMILUX 25mm F1.4 ASPH 大光圈的加持真的不是蓋的等效 50mm 也相當的好取景，但是最近對焦距離 30cm 真的稍遠不過他本來就被定位在人像鏡所以其實還好，整體來說還是超級棒的一顆鏡頭，只是去參觀室內的展覽 (像是小叮噹誕生前百年特展) 難免又被我妹嫌棄說為什麼拍照都要站這麼遠 XDDD，以下是 GF2 搭 25mm 拍出來的照片。","text":"三年前原本買了 GF2 + LUMIX G 14mm F2.5 ASPH 要給我妹，結果他竟然嫌棄說 14mm 沒辦法變焦… 0rz… 這實在是，結果後來還是買了一般的小 DC 給她 = =+，然後去年入手了 LEICA DG SUMMILUX 25mm F1.4 ASPH 大光圈的加持真的不是蓋的等效 50mm 也相當的好取景，但是最近對焦距離 30cm 真的稍遠不過他本來就被定位在人像鏡所以其實還好，整體來說還是超級棒的一顆鏡頭，只是去參觀室內的展覽 (像是小叮噹誕生前百年特展) 難免又被我妹嫌棄說為什麼拍照都要站這麼遠 XDDD，以下是 GF2 搭 25mm 拍出來的照片。 25mm 這顆在 f1.4 的加持下散景非常明顯，拍食物的話坐在餐桌前面也不用太刻意的後退，算是人像/食物都可以拍的鏡頭。 後來我妹要出國玩，想說幫他補一顆 14-42mm F3.5-5.6 X Lens，然後 GF2 終於沒有被他嫌棄了 Q_Q，好吧其實是自己的敗家慾望起來 XD，想趕快把 GF2 脫手，這樣才有下一個目標，整體說起來 GF2 在少了轉盤的狀況下並沒有犧牲很多操作感，因為觸碰真的很方便，不過 GF2 的噪點就是會很多，蠻奇怪的在 ISO100 的狀況下黑色的地方還是會有紅綠小噪點，這也是之前一隻想把 GF2 出掉的原因，無奈 Panasonic 後來出了一堆 m43 的機身… 想賣也賣不到好價錢了，而且我的還是公司貨，賠更多 0rz…，所以就自己留著繼續用，其實搭了 x14-42 後，GF2 也算是稍稍的被解放了，因為這顆變焦體積更小，而且不會有定焦如果是直拍照片不會自己旋轉的問題 (因為 GF2 機身沒有 sensor)，所以其實 GF2 + x14-42 真的是不錯的組合，不過！該敗家的計劃還是要實行 XD 這次在收集到足夠的情報下，在過農曆年前發了年終後，就去抱了一台 E-M5 回來啦~ 主要是相中他文青般的機身 (誤)，沒有啦，主要是因為傳聞中 O 家的天空藍，加上這次 E-M5 有新的 Sony Sensor 的加持讓工作可用 ISO 一舉推到 3200 (原本 P 家最新的 G5 大概也是在 1600 而已，不過 GH3 好像也是用這片 Sensor 所以其實兩家目前最好的機身算是打平了)，不過吸引我的是傳說的外星科技五軸防震，因為設計理念不同， P 家是把防震做在鏡頭上、機身則沒有此設計，但是 O 家剛好完全相反，鏡頭都沒有防震 (即便是變焦鏡也是沒有的)、而防震做在機身上，這樣的好處是鏡頭防震比較省電，以及機身比較不會過熱 (據說的 XD) 而且鏡頭防震好像效果會比較好 (望遠端)，但是機身防震的好處是不管接什麼奇怪的鏡頭，自動鏡、手動鏡都會有防震的保護，於是在 E-M5 這麼多好處下，我就跳槽了，反正現有的 25mm f1.4 鏡頭可以繼續用 :)，以下是 E-M5 + 25mm 拍出來的照片。 其實在室內拍小朋友往往會因為燈光比較暗，快門會拉長導致拍照失敗，但是有 E-M5 的加持真的比較不會失敗 (但是手或腳可能還是會有殘影啦，畢竟手速比較快 XD)。 以拍人來說，我覺得 E-M5 拍出來的確實比 GF2 拍出來的還要好看，色調上還是有些微的差距，而且 O 家無恥濾鏡真的很有趣，GF2 Panasonic 都一直不肯下放… P 家真的滿卑鄙的 ╮(╯﹏╰）╭，而且 25mm 這顆因為原本就沒有數位修正，所以搭在 O 家的機身也完全沒有問題，除了光圈葉片偶爾會給你咔咔聲 (縮光圈)，然後對焦慢了一點 (在 GF2 對焦比較快)，其餘的相片品質真的是沒話說，搭在 E-M5 發色真的很漂亮。不過還是要回到老問題，室內不夠廣真的是一個問題，而且對焦速度不是很快會稍微拉一下風箱，算算銀行盤纏，還有些許預算 XD，於是就在盤算要買 12-35mm F2.8 X Lens 還是 12mm F2.0，考量是前者是恒定變焦鏡，也就是光圈都在 f2.8，而且防塵滴的機身搭配 E-M5 剛好，變焦也很方便，真的要說有缺點就是比較大 (沒辦法是 m43 變焦鏡皇)，而且是 P 家機身有數位修正，後者則是 O 家最高的工藝水準「辰野製作所」做的，而且是金屬機身、小顆很輕、定焦鏡畫質不用說，而且 O 家搭 O 家自身的最好，價位上其實差不多，所以考量點其實就在定焦、變焦而已…經過幾經考量，最後還是入手了 12mm。 不過因為剛買，還沒有什麼機會帶出去試拍，只有下面北投的照片參考。 這兩張可以發現邊角的紫光有稍微的明顯，因為我不小心都 F2.0 拍了，其實當天都陰天，但是不暗，其實可以縮光圈拍，據說收到 F4.0 就比較不會有。 最後幾張照片可以發現 12mm 幾乎沒有桶狀變形，但是只要視角稍微變一下，營造出來的的透視變形還是蠻有感覺的，照片的解析度 (100%檢視下) 也都相當好，不用說縮圖了 XD，不過 F2.0 的確沒有這麼簡單的可以營造出淺景深就是了，除了身價不凡，這顆真的沒什麼好挑剔的 Q_Q”，是一個很棒的鏡頭蓋，不過不得不說 12mm 在構圖上真的沒有 25mm 這麼簡單 &gt; &lt;”，有時候覺得自己站的位置好像可以了，結果一拿相機才發現還站太遠 (因為習慣 25mm 拍東西的距離)，而且透視變形有時候真的很煩人 XD，這點是兩者比較需要習慣適應的，但是兩個在拍照的結果都一樣是非常棒的鏡頭。","categories":[{"name":"3C","slug":"3C","permalink":"https://blog.littlero.se/categories/3C/"}],"tags":[{"name":"E-M5","slug":"E-M5","permalink":"https://blog.littlero.se/tags/E-M5/"}]},{"title":"nginx 設定檔規則概要","slug":"notices-about-nginx-rewrite-rule","date":"2013-02-26T09:47:44.000Z","updated":"2015-03-14T05:41:45.000Z","comments":true,"path":"post/notices-about-nginx-rewrite-rule/","link":"","permalink":"https://blog.littlero.se/post/notices-about-nginx-rewrite-rule/","excerpt":"這篇是記錄一些 lighttpd 轉 nginx rewrite rule 的實作與一些注意事項，最後會講一些 squid 轉 nginx 的技巧。 這裡先講一些跟 nginx rewrite 有關的重點。 首先 nginx 算是分成 location 跟 rewrite，lighttpd 是有 url.rewrite、url.rewrite-repeat 跟 url.redirect，其中 lighttpd 的 url.rewrite 就是 rewrite once 而 url.rewrite-repeat 則是重複一直 rewrite 的意思，這個則對應到 nginx rewrite 後面接的參數，也就是 break 跟 last，break 就是 rewrite 到此為止不要再跑 rewrite 了，但是 last 就會在重頭跑 rewrite 一次，而且 last 也是 rewrite 這個 directive 的預設值，所以如果你的 rewrite 不小心變成 loop (nginx 預設是 rewrite 10 次後就噴 500) 請加上 break。至於 lighttpd 的 url.redirect 其實在 nginx 也是透過 rewrite 完成的，主要是加 redirect 跟 permanent 的參數，分別是回 302 跟 301。rewrite 的用法大約如下：","text":"這篇是記錄一些 lighttpd 轉 nginx rewrite rule 的實作與一些注意事項，最後會講一些 squid 轉 nginx 的技巧。 這裡先講一些跟 nginx rewrite 有關的重點。 首先 nginx 算是分成 location 跟 rewrite，lighttpd 是有 url.rewrite、url.rewrite-repeat 跟 url.redirect，其中 lighttpd 的 url.rewrite 就是 rewrite once 而 url.rewrite-repeat 則是重複一直 rewrite 的意思，這個則對應到 nginx rewrite 後面接的參數，也就是 break 跟 last，break 就是 rewrite 到此為止不要再跑 rewrite 了，但是 last 就會在重頭跑 rewrite 一次，而且 last 也是 rewrite 這個 directive 的預設值，所以如果你的 rewrite 不小心變成 loop (nginx 預設是 rewrite 10 次後就噴 500) 請加上 break。至於 lighttpd 的 url.redirect 其實在 nginx 也是透過 rewrite 完成的，主要是加 redirect 跟 permanent 的參數，分別是回 302 跟 301。rewrite 的用法大約如下： 123rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;rewrite ^ http://example.com$request_uri? permanent; 注意的是 rewrite 可以擺在 server location if 這三種 block 裡。 在完成了 rewrite 這個階段之後，也就是不管是被 break 或是 last 後重跑了一輪沒比對到，之後會開始比對所謂的 location，location 是用來處理 url 地址 (被 rewrite 後) 真正的地方，大概會長的像下面這樣。 123456789101112131415location = / { [ configuration A ] }location / { [ configuration B ] }location /documents/ { [ configuration C ] }location ^~ /images/ { [ configuration D ] }location ~* \\.(gif|jpg|jpeg)$ { [ configuration E ] } 要注意的是 location 有比對的順序，依序是先從有 = 的，然後是^~，再來就是依照順序，而 location / 則可以當成一個預設值，因為他會 match 到剩下的所有 url。location 可以放在 server block 裡。 粗略的介紹完，接下來進入一些實務的介紹： lighttpd 原本的 url.redirect 就對應成 nginx 的 rewrite http://foo.bar/ redirect 如果原本的 lighttpd 後端因為是 zend 所以就會有一些 rewrite (像是特定的 static file) 是不能送到 zend 去做的，在 lighttpd 就會在 url.rewrite-once 看到一些 \"^/images/.*$\" =&gt; \"$0\" 這種的寫法，但是 nginx 沒有 $0 這種東西，這時候就直接把 $0 轉成 $uri 即可，也就是 rewrite ^/images/ $uri last 承上面那點，如果 nginx 背後的 php 是跑 zend 這類有 single entry point (什麼都交給 index.php 做 route) 的架構，那樣設定會如下 1234567891011location ~ \\.php$ { try_files $uri =404; include fastcgi.conf; fastcgi_pass unix:/tmp/php.socket;}location / { try_files $uri $uri/ /index.php$is_args$args;}rewrite ^/images/ $uri last; 因為 lighttpd 的 rewrite 可以連 arguments (也就是 ? 後面的那串參數) 都一起 rewrite，但是 nginx 不行，所以就變成需要在 location 裡面做 (也就是先 rewrite 完 uri)，因此會變成類似這樣 123456location ^~ /abc { if ($args ~* \"(post|put)\"){ set $args type=$1; rewrite ^ /dispatch; }} 像這個例子就會把 /abc?post 變成 /dispatch?type=post 然後丟給 dispatch 這個 location (假設存在 location = /dispatch 之類的) 前面提到的 location 有比較順序，要注意的是只有兩種是可以接正規表示式的也就是 ~ 跟~*，~ 是有大小寫區分的，~* 則不分大小寫，然後 = 跟 ^~ 後面都是接一般的表示法，也就是下面這種都是不合法的 123# misusinglocation = ^/regular$ {}location ^~ ^/regular2$ {} 但是下列的就是合法的 12345# rightlocation ~ ^/regular$ {} # matches $uri = '/regular'location ^~ ^/regular2$ {} # matches $uri = '/Regular2' or '/rEgular2' ...location = /regular3 {} # matches exactly $uri = '/regular3' with higher prioritylocation ^~ /regular4 {} # matches $uri = '/regular4' or '/regular41' or 'regular4a' ... 另外就是關於 last 跟 break 的詳細用法，rewrite 預設是 last，兩個最基本的差異前面有提到 break 會停止任何 rewrite 進入找 location 的階段，但是 last 會從第一個 rewrite 重新 rewrite 階段，但是這裡其實隱含了一個潛規則，就是如果你的 rewrite 是在 location 裡面的話，搭配 last 就會回到 server 這個 scope 的 rewrite 重新跑一次，但是搭配 break 就只會在這個 location 裡面找 location，這是值得注意的規則，所以有時候建議把 location ~ .php$ {…} 擺在第一個，因為有時候 location 內的 rewrite 又會不小心掉回來這個 location，把 ~ .php$ 擺最前面時，這樣 rewrite ... last 回到 server scope 遇到 php 就會給 ~ .php$ 處理了。","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.littlero.se/tags/nginx/"}]},{"title":"Linux cgroups","slug":"linux-cgroups","date":"2013-01-01T11:16:00.000Z","updated":"2015-03-14T05:40:32.000Z","comments":true,"path":"post/linux-cgroups/","link":"","permalink":"https://blog.littlero.se/post/linux-cgroups/","excerpt":"cgroups 是 Linux 的一個特色，全名是 control groups，最簡單的概念就是控制資源的分配包含了隔離、記錄的功能，最早是由 Google 的工程師開發的，並且在 2.6.24 正式進了 Kernel，後來也陸續加了不少功能，而且在 3.3 之後又加了網路優先權 (priority) 功能。後來的 LXC (LinuX Containers) 就是用了 cgroups 的功能來的。 由於是從 Kernel 控制的所以幾乎什麼都可以管理，舉凡 blkio (管理輸入輸出的 block device，像是硬碟、USB)、cpu (設定忙碌時能使用的 CPU time)、cpuacct (做統計用的)、cpuset (設定由那顆 CPU 執行運算)、device (限制能使用的設備)、memory (限制記憶體用量)、net_cls (似乎跟網路有關)，管理的範圍是以 Group 為主，所謂的 Group 可以是同一個使用者、同一個群組、同樣的 Process。 最簡單使用 cgroups 的方式就是裝 libcgroup 來管理","text":"cgroups 是 Linux 的一個特色，全名是 control groups，最簡單的概念就是控制資源的分配包含了隔離、記錄的功能，最早是由 Google 的工程師開發的，並且在 2.6.24 正式進了 Kernel，後來也陸續加了不少功能，而且在 3.3 之後又加了網路優先權 (priority) 功能。後來的 LXC (LinuX Containers) 就是用了 cgroups 的功能來的。 由於是從 Kernel 控制的所以幾乎什麼都可以管理，舉凡 blkio (管理輸入輸出的 block device，像是硬碟、USB)、cpu (設定忙碌時能使用的 CPU time)、cpuacct (做統計用的)、cpuset (設定由那顆 CPU 執行運算)、device (限制能使用的設備)、memory (限制記憶體用量)、net_cls (似乎跟網路有關)，管理的範圍是以 Group 為主，所謂的 Group 可以是同一個使用者、同一個群組、同樣的 Process。 最簡單使用 cgroups 的方式就是裝 libcgroup 來管理，他有幾個跟 cgroups 相關的指令跟服務可以使用，Gentoo 要安裝相當簡單，因為 libcgroup 已經在 portage 裡面了，直接 emerge dev-libs/libcgroup 就裝好了，而 SUSE 則需要先加其他的 repos 才可以使用 (下列範例使用 SLES11sp2 當範例): zypper ar http://download.opensuse.org/repositories/Virtualization/SLE_11_SP2/Virtualization.repo &amp;&amp; zypper -n ref &amp;&amp; zypper --no-gpg-checks --non-interactive install --auto-agree-with-licenses libcgroup-tools &amp;&amp; zypper rr Virtualization 裝好之後系統裡面就會多了 cg 開頭的指令以及 /etc/init.d/cgconfig 跟/etc/init.d/cgred，要使用這兩個服務會參照到 /etc/cgconfig.conf 跟 /etc/cgrules.conf 這兩個檔案，下面講解我使用到的情境搭配的設定。 因為我們的伺服器會做轉檔的動作，有時候量大就會讓轉檔用的程式 (以下叫 convert) 咬死 CPU，讓 web server (以下叫 httpd) 跟 php-cgi 因為吃不到 CPU 所以就讓服務中斷了，因此在這裡會用到的是 cpuset 的功能，要注意到的是 cpu 跟 cpuset 的差異在設定 cpu 是限制佔用 CPU 的時間比，也就是當 process A CPU 100％ 跟 process B CPU 也 100% 時，才會看 cpu 這個參數的設定限制 CPU 使用時間，如果只有 process B CPU 100% 其他的 Process 沒有要資源，這樣 Kernel 還是會讓 B 使用全部的資源，因為轉檔時只有 convert 會 100% 其他的程序並沒有 100% 所以單純限制 cpu 還是沒什麼用，所以這時候就要用 cpuset，讓某個 Group 的程序只能使用某幾顆 CPU (現在都是 multi-core 的系統)，我的設定如下 wwwrun:httpd * httpd wwwrun:php-cgi * php wwwrun:convert * convert /etc/cgrules.conf 是給 cgred 這個服務看的，它會監視系統新 fork 出來的 process 有沒有被這個檔案 mapping 到，有的話就會參照每行的第三個參數再去參考 /etc/cgconfig.conf 裡面的設定，至於第一個參數的 wwwrun:httpd 表示是 wwwrun 這個 user 身份執行的 httpd 這個 process，第二個星號 (*) 表示有哪些資源要管理，可以是 cpu memory cpuset 如果是 * 表示任何資源都要被管理 (一樣會參照 /etc/cgconfig.conf 這個檔案)，所以第一行讀起來就是以 wwwrun 身份執行的 httpd 這個 process 要參考 httpd 這個 group 的設定來管理任何資源，而 /etc/cgconfig.conf 看下面 group httpd { cpuset { cpuset.cpus = 1; cpuset.mems = 0; cpuset.cpu_exclusive = 1; } } group php { cpuset { cpuset.cpus = 2,3,4; cpuset.mems = 0; cpuset.cpu_exclusive = 1; } } group convert { cpuset { cpuset.cpus = 5,6,7; cpuset.mems = 0; cpuset.cpu_exclusive = 1; } } mount { cpuset = /cgroup/example; } 這幾行說明了一共定義了三個 Grouphttpdphpconvert，然後都只有定義了 cpuset 這個管理項目，其中 cpuset 又可以看到分別定義了三個變數 cpuset.cpus (必須)、cpuset.mems (必須)、cpuset.cpu_exclusive (非必要)， cpuset.cpus 就是這個群組的 process 只能使用哪幾顆 CPU，注意是從 0 開始數，這裏我示範的是如何錯開 CPU 的資源，在 convert 這個群組的 process 只能使用 3 顆 CPU，而 cpuset.mems 似乎是對 NUMA 的系統設定的，因為我們是跑在 VMware 上記憶體只有一個，所以定為 0，而 cpuset.cpu_exclusive 就是要不要讓 cpuset.cpus 裡面的 CPU 只能執行這個群組的 process，最後面的 mount 是管理 cgroups 的地方，會以資料夾跟檔案的方式呈現。 一切都設定好之後就直接 /etc/init.d/cgconfig start 跟/etc/init.d/cgred start，沒有錯誤的話 /cgroup/example 底下應該會出現資料夾跟一堆檔案，其中可以看到 tasks 這個檔案裡面就有一堆 pid 表示現在這些 pid 是套用到這個 group 的設定。","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"SUSE","slug":"SUSE","permalink":"https://blog.littlero.se/tags/SUSE/"},{"name":"Gentoo","slug":"Gentoo","permalink":"https://blog.littlero.se/tags/Gentoo/"},{"name":"cgroups","slug":"cgroups","permalink":"https://blog.littlero.se/tags/cgroups/"}]},{"title":"刪除 memcachedb log 檔","slug":"clear-memcachedb-log","date":"2012-11-20T02:56:00.000Z","updated":"2015-03-14T05:38:38.000Z","comments":true,"path":"post/clear-memcachedb-log/","link":"","permalink":"https://blog.littlero.se/post/clear-memcachedb-log/","excerpt":"","text":"memcachedb 用的是 BerkeleyDB 每 10M 會輸出一次 log file，所以久而久之你的資料夾會充滿一堆 log.xxxxxxxxxx x 是數字，依序編列，在正常的 Production 環境大概不出三天就會比原本的 DB 還多了一倍的大小，如果沒有要還原的需求的話是不需要這些 log 的，清除的方法有兩個，一個是手動刪，一個是透過 memcachedb 清。 手動刪的話基本上就是用 find 就可以了，find /home/memcachedb_data/ -iname 'log*' | awk '{if (NR &gt; 50) print}' | xargs -i -t rm -f {}，如果是要透過 memecachedb 清則可以透過 telnet 或 netcat，指令是 db_archive。不過如果每次都要手動下未免也太累了，所以我們可以放在 crontab 裡自動化，要放在 crontab 裡面一定要搭配 netcat，因爲 telnet 不支援檔案重導符號 &lt;，只要隨便開一個檔案填入下列內容 db_archive quit 然後在 crontab 裏面增加 0 * * * * /usr/bin/netcat localhost 5566 &lt; /root/cmd/memcachedb_rotate_logs 即可每小時自動清一次，其中 5566 就是 memcachedb 開的 port。","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"memcachedb","slug":"memcachedb","permalink":"https://blog.littlero.se/tags/memcachedb/"}]},{"title":"高寫入系統 Linux 效能調教","slug":"linux-tuning-for-write-heavy-system","date":"2012-11-06T13:26:00.000Z","updated":"2016-12-20T14:20:07.000Z","comments":true,"path":"post/linux-tuning-for-write-heavy-system/","link":"","permalink":"https://blog.littlero.se/post/linux-tuning-for-write-heavy-system/","excerpt":"在我們使用 squid 的環境裡，常常遇到一個瓶頸，就是面對高 I/O 的環境底下，整個系統的效能表現會變的特別差，如果看系統的 CPU 線圖會如下 (下圖爲 cacti 畫的日圖)：","text":"在我們使用 squid 的環境裡，常常遇到一個瓶頸，就是面對高 I/O 的環境底下，整個系統的效能表現會變的特別差，如果看系統的 CPU 線圖會如下 (下圖爲 cacti 畫的日圖)： 可以看到在深夜時段 (也就是大量 request 圖片) 時 I/O wait 整個就咬死 CPU，因爲在大量的 request 進來時 squid 會有同時的磁碟寫入跟讀取，不過我們的系統是 IBM 的 blade server 配有 ServerRAID 8k 的卡，上面有 256MB 的 Read/Write Cache/Buffer，所以總覺的讀寫性能應該可以不錯才對，可是偏偏就是在晚上很容易拖慢系統的速度。後來找到了幾個可能的參數調一調之後，現在系統的線圖如下 (此爲周圖)： 可以看到在中間過後 (也就是修改後)，整體系統的 I/O waiting 就降低了，這中間的修改其實是動了下列的 Linux kernel 參數： 主要都是在 /etc/sysctl.conf 這個檔案 新增/修改 以下參數 (影響的資料夾在 /proc/sys/vm/) vm.dirty_background_ratio = 1 這個參數主要是降低 Linux 寫檔案 (dirty page) 的 buffer 大小，如果是寫入的量很大的系統建議降低此值，因爲這樣會讓寫入更連續而且一致，而不會分批次每次都寫入大量的資料，Linux 原本預設的值太大了，這個值的算法是 MemFree + Cached - Mapped (指令 cat /proc/meminfo 可以看到) 假設我們算出來系統有 3G 而這個值爲 10 時表示 10% 則相當於超過 300MB 的 dirty page 才開始回寫硬碟，我猜是因爲這樣讓 Linux 的 I/O 變的很慢，因爲這個值也大於 RAID 卡的記憶體了，而且邊寫入又一直有 dirty page 一直進來，所以建議把這個值降低，我是直接設定成 1 也就是 1% 約 30M 就開始寫；相對於百分比，Linux 後來的 2.6.29 kernel 加入了 vm.dirty_background_bytes 是以 bytes 來計算 vm.dirty_ratio = 2 相對於 vm.dirty_background_ratioad 是所謂的” 背景” 寫入，實際上是透過 Linux 裏面的一隻叫 pdflush kernel thread 來回寫，vm.dirty_ratio 是如果 dirty page 真的超過多少就強制回寫，而不是透過背景慢慢回寫，所以 vm.dirty_ratio 更硬性，而 vm.dirty_background_ratio 則相對較於軟性，也因爲這個特性當然 vm.dirty_background_ratio 是不會超過 vm.dirty_ratio 的，預設上 (或者設定錯誤時) vm.dirty_background_ratio = vm.dirty_ratio /2 , 所以如果 vm.dirty_background_ratio = 1 則我們可以設定 vm.dirty_ratio = 2，同樣的 2.6.29 之後也有一個 vm.dirty_bytes vm.dirty_writeback_centisecs = 100 單位是百分之一秒，這個就是多久要觸發回寫，預設也蠻大的好像有 500，也就是 5 秒才寫一次，建議在高寫入的系統設定短一點，我設定成 100 也就是每秒寫入一次 (反正是先寫回 raid 卡的 cache)，這樣以來可以讓寫入更均勻。 vm.dirty_expire_centisecs = 1000 單位也是百分之一秒，這個是表示 dirty page 過了多久之後下次 pdflush kernel thread 醒來時就會被寫回硬碟，預設是 3000 也就是 30 秒，一樣可以設低一點讓寫入均勻化，不過太低會一直寫，也不宜太低。 參考資料: Android/Linux Kernel 記憶體管理-入門筆記 The Linux Page Cache and pdflush","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"squid","slug":"squid","permalink":"https://blog.littlero.se/tags/squid/"}]},{"title":"大腸鏡檢查 - 輝雄診所","slug":"colonoscopy","date":"2012-11-05T12:57:00.000Z","updated":"2016-12-20T14:24:39.000Z","comments":true,"path":"post/colonoscopy/","link":"","permalink":"https://blog.littlero.se/post/colonoscopy/","excerpt":"每年九月一到就是年度的健康檢查，大概大家都是一片哀嚎 XD 不過其實也還好似乎年紀越大紅字越多好像是正常的，其實每年也沒什麼要注意的，我都只注意 GOT, GPT 而已，其他的向來都不會紅字，不過不幸的今年健康檢查竟然紅字出現在一個不可思議的地方…糞便潛血反應，當下的表情已經不是「囧」可以表現的了。既來之則安之，當下想的就是乖乖照大腸鏡，準備被「月工」吧 = =","text":"每年九月一到就是年度的健康檢查，大概大家都是一片哀嚎 XD 不過其實也還好似乎年紀越大紅字越多好像是正常的，其實每年也沒什麼要注意的，我都只注意 GOT, GPT 而已，其他的向來都不會紅字，不過不幸的今年健康檢查竟然紅字出現在一個不可思議的地方…糞便潛血反應，當下的表情已經不是「囧」可以表現的了。既來之則安之，當下想的就是乖乖照大腸鏡，準備被「月工」吧 = = 由於這次的檢查是「免疫法」，有別於傳統的「化學法」，免疫法可以直接有效的測試人體血紅素，也就是不會收到吃紅肉啦、豬血啦、維他命 C 的影響，所以檢測出來有血就是真的有人類的血 (除非我是食人族，不然血絕對是我的吧 XD)，看了網路的一些文章想說看來免疫法的 false alarm 機率很低，直接硬著頭皮做大腸鏡比較快。 看了網路的一些文章似乎衆多部落客都很推薦輝雄診所，這間診所專職健康檢查，也有很多日本人會去，不過缺點是他是自費的診所，其實網路的評價似乎是真的很好，所以在考慮了一下後，決定就自費的做吧，畢竟人生第一次被 月工月工 還是檢查的完整一點好，所以就在網頁上線上預約，隔天就會有人跟你確認時間了。然後檢查前三天還會有護士打電話跟你確認注意事項，像是什麼東西要避免不能吃 (深色蔬菜、有子的水果、牛奶、起司這類脂肪…等，詳細可以查閱網路 低渣飲食)，不過我在前兩天就開始只吃土司、豆漿、水煮蛋之類的。 當天一早八點就到了醫院，填了初診的資料卡，量量血壓，然後護士會介紹一下他們的檢查內容跟簽同意書，我只做檢查 + 允許切片 (一處 2700, 兩處好像 3500…)，因爲想說如果要切除瘜肉等於手術還是等有家人陪伴再說。然後就是再到大廳先繳錢 (檢查費+掛號費，文章最後有價格) 再等護士拿藥水來，等待的時候照了一張他們的海報。 大致上就是 NBI + 放大 80 倍 (不知道爲什麼海報寫 100 倍 = = 可能四捨五入了) 的儀器，不用透過傳統的染色劑也能分辨粘膜組織，然後非全身麻醉 (所以是鎮定劑?)，風險較低。 在一樓的大廳等了一會兒，護士就拿了準備好的瀉藥來了，大約是 2000 cc 一小時內要喝完，一開始要吃三顆藥丸，護士說是軟便劑，然後就是長期抗戰喝大量的藥水了，這個藥水鹹鹹的，護士說喝這個不會讓肚子痛，一開始護士會要求直接喝一整杯 (右邊那杯的大小，一壺藥水大概可以裝四杯)，其實喝第一口會覺得還不錯喝，因爲鹹鹹的，不過後來我錯了，大概第三杯開始就開始覺得噁心…雖然還不至於想吐啦，不過真的覺得很糟糕…至於藥效每個人都不一樣，我慢慢喝大概喝到第三杯的時候，時間是過了 30 分鐘大約 8:50 就開始有感覺了！跑了幾次廁所，來回又繼續灌藥水，最後在 9:10 喝完一整壺，肚子整個就是脹死了，然後又繼續跑了幾次廁所，護士說大概第五次就要請他們看 (廁所內有緊急鈴)，不過我大概第六次才請護士看，結果還是沒到標準，標準是要跟小便一樣-清澈的黃色液體不能有任何固體，護士就叫我繼續努力多喝水，然後就這樣喝溫水坐廁所來回又跑了幾次，一直到第九次或第十次 (數不清了) 拉出來真的是清澈無比的液體 (這時候會覺得很神奇就是 = = 用屁股小號-有點噁但是真的是這樣 XD) 護士才說可以上樓準備照了，然後會再給四顆藥丸，好像是腸胃鬆弛，吃完就準備上樓了，接下來就都不能喝水，想上廁所一樣可以上，此時大約是十點十分左右。邊喝水邊等待肚子反應的中間會有院長問診，大概就是問爲什麼回來，有什麼舊有疾病之類的例行性問診。在跑廁所時中間還發生小插曲，因爲一樓男廁只有一間大號的，裏面剛好有人，在外面走來走去，護士看到就帶我去女廁，這輩子第一次正大光明走進去女廁。而且拉到後來肛門痛死了，不知道是不是一開始衛生紙太用力擦過頭，後來輕輕碰就會痛，幸好後來都是拉水只要輕輕壓就好了 = =… 接着護士會先帶到 2F 的更衣室準備更換他們的衣物，有以下配件：上衣、褲子、紙內褲、紙拖鞋，然後會給一個可以繫在手腕上的鑰匙 (或網路有人是電子鎖，最下面會說)。基本上可以帶在身邊的只剩手機、眼鏡、綁在手腕的鑰匙，其他的都要收到置物櫃裡，換完大概就是下面這樣 換好後會被帶到 3F 準備做檢查，3F 空間蠻大的，有雜誌、電視、一個吧檯 (檢查完提供餐點吃)，另外值得一提的是 3F 的廁所比較高級，是免治馬桶，我在 3F 又拉了最後一次，看到免治馬桶想說終於不用衛生紙了，就很開心的點了洗屁屁，結果靠…雖然是溫水滿溫和的但是水壓蠻強的，林杯的月工…差點痛死! 趕快按停還是用衛生紙擦 = = 這個大概比較適合一開始用… 然後等了一會兒大概是 10:40，就會有護士來叫你，準備進預備室，一進去就看到幾個人已經躺著應該是在恢復了，在更往裏面走就是一間一間的檢查室，然後護士會要求把身上的東西都卸掉，包含手機、眼鏡都要放在他們準備的收納盒裡，鑰匙可以照樣繫在手上，接着就是躺上去病床了，護士會先打點滴 (電解液，可能怕我們拉到脫水)，還提醒說現在打的不是鎮定劑還不會想睡覺是正常的，等等才會打，然後又補了一針腸胃鬆弛在手臂上 (酸的磊…)，接着會用一塊木板固定手，因爲他們怕檢查過程手會移動到，等到固定好了會叫你屈膝側睡，然後就是三針的鎮定劑了…網路有人說三針還沒打完就睡着，是有沒有這麼神奇 XD 我三針打完之後還有精神，護士叫我移動一下姿勢還可以移動，不過大概過了不知道幾秒，我就不醒人事了 0rz…，在此之前護士說有的人打完後還是不會睡着，不過至少屁屁是沒感覺的可以不用怕。 等到再次恢復意識已經是 11 點 30、40 分了，然後會靜待點滴吊完，護士才會過來問頭還昏不昏，不暈基本上就可以起來了，然後會還手機、眼鏡，然後會被帶到 3F 的吧檯附近的桌椅等待今天的餐點。基本上我好像沒有很昏所以是自己走，網路有的人是被護士攙扶出去。 餐點很簡單，可能是久沒進食不能吃太油膩的，土司 + 熱可可，飲料可以選有咖啡、紅茶 (? 有點忘了，護士念了一串，可能當時還在暈 XD)、可可，邊看電視邊吃，慢慢吃完之後護士就會帶下去二樓換回衣服，然後在帶到一樓，由院長本人解說今天的檢查情形。 院長本人還蠻不錯的啦，他會說今天把大腸從頭檢查到尾，然後指着醫院常掛的那種構造圖說大概就是從鵝鑾鼻 (用鐳射筆指着肛門口) 檢查到基隆 (大腸接小腸的地方)，然後就是給你看照出來的圖跟解說這邊是怎樣怎樣，基本上我的大腸很健康，有兩三處瘜肉，都是良性的所以以後觀察就好，不過我有輕微的痔瘡，！驚 = = 所以就是被叮嚀了一下，然後開個一個禮拜的藥就好，所以我的潛血反應可能剛好來自於痔瘡流血 v_v”，不過大腸都沒事就好。談完之後就是去拿藥然後補藥費。 基本上診所的環境從一樓大廳到二樓更衣室到三樓診療可以說相當舒適，在一樓大廳時還真的有不少日本人來，院長本人會說臺語，所以基本上我都是用臺語應答，還蠻親切的 XD，最後今天的金額是照大腸鏡 7000、掛號費 250、藥 560，說實在自費還真是他媽的貴 = =，不過我覺得好處是時間可以自由安排整個檢查也很舒服，反正是這輩子第一次做！而且也不怕去醫院遇到雷，還有看到報導說有的醫院只檢查大腸前 80 公分 (大腸全長約 150 公分)，花大錢讓自己也安心一點 XD。 後記 好像如果做全身健康檢查的一開始就會被帶去 3F，因爲網路有人是全程都在 3F 免治馬桶 XD，然後在 2F 更衣室用的置物櫃也是電子鎖的，我是傳統的鑰匙鎖那區 = =”，吃的也比我豐盛 (看倒數第三張圖），我左邊的那個男生 (照的時候他去吧檯) 就吃得比我豐盛 q_q” 做大腸鏡好像越來越貴了，我在網路有看到以前檢查費只要 5000、 6200，然後我今年做要 7000 真是嚇死人 = =","categories":[{"name":"健康","slug":"健康","permalink":"https://blog.littlero.se/categories/%E5%81%A5%E5%BA%B7/"}],"tags":[{"name":"Healthy","slug":"Healthy","permalink":"https://blog.littlero.se/tags/Healthy/"}]},{"title":"popclip upgrading to Mountain Lion","slug":"popclip-upgrading-to-mountain-lion","date":"2012-08-06T12:55:00.000Z","updated":"2016-11-09T09:25:11.000Z","comments":true,"path":"post/popclip-upgrading-to-mountain-lion/","link":"","permalink":"https://blog.littlero.se/post/popclip-upgrading-to-mountain-lion/","excerpt":"最近把 MacBook Pro 從 OS X 10.7 (aka. Lion) 升級成 OS X 10.8 (aka. Mountain Lion) 之後，大部分的軟體都還蠻無痛升級的，其中 PopClip 在升級之後就開始秀逗秀逗，在 Safari 裡面有時 Work 有時不 Work (就是不太靈敏-偶爾會出現彈出選項，偶爾又沒有)，官方有一個解決方法是把原本的設定刪除掉讓她重新產生即可。步驟如下","text":"最近把 MacBook Pro 從 OS X 10.7 (aka. Lion) 升級成 OS X 10.8 (aka. Mountain Lion) 之後，大部分的軟體都還蠻無痛升級的，其中 PopClip 在升級之後就開始秀逗秀逗，在 Safari 裡面有時 Work 有時不 Work (就是不太靈敏-偶爾會出現彈出選項，偶爾又沒有)，官方有一個解決方法是把原本的設定刪除掉讓她重新產生即可。步驟如下 結束 PopClip (到 Finder 點開 PopClip 後看到工作列，關了它 %} 打開 終端機 (終端機的位置在 應用程式 裡面的 工具程式 資料夾裡面)，輸入下列指令： defaults delete com.pilotmoon.popclip 如下圖 打開 PopClip 這樣應該就解決了 PopClip 偶爾不靈敏的問題了 : %}","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://blog.littlero.se/tags/Mac/"}]},{"title":"nginx cache - last step of optimization","slug":"nginx-cache-last-step-of-optimization","date":"2012-07-15T13:00:00.000Z","updated":"2016-11-09T09:24:54.000Z","comments":true,"path":"post/nginx-cache-last-step-of-optimization/","link":"","permalink":"https://blog.littlero.se/post/nginx-cache-last-step-of-optimization/","excerpt":"最近在把敝單位的 Web Server 從原本的 lighttpd 轉換成 nginx，當然除了複雜的 rewrite rule 要寫，還有就是想盡量榨出 nginx 的效能及所有功能，而 nginx 除了很多參數可以調整之外當然也有更多內建的功能有點類似現在的 All-in-One 小巧但是功能完整！ 調整了很多參數之後，說實在的也不知道有什麼可以調整了，查一查網路發現：對呀！ nginx 有 cache 的模組可以用阿，因為這次轉換的機器有 php 的部分，而且大部分是出圖跟利用 php 來做 javascript 模組的合併 (就是所謂的 combo loader)，這些幾乎都是做一次就不會在更改結果的，所以就查了一下 nginx 的 fastcgi cache 的設定： 在 http 的 section 加入 fastcgi_cache_path /dev/shm/cache/ levels=1:1 keys_zone=PHP:8m inactive=60m max_size=256m; 然後在 location ~ \\.php$ 的 section 裡面加入","text":"最近在把敝單位的 Web Server 從原本的 lighttpd 轉換成 nginx，當然除了複雜的 rewrite rule 要寫，還有就是想盡量榨出 nginx 的效能及所有功能，而 nginx 除了很多參數可以調整之外當然也有更多內建的功能有點類似現在的 All-in-One 小巧但是功能完整！ 調整了很多參數之後，說實在的也不知道有什麼可以調整了，查一查網路發現：對呀！ nginx 有 cache 的模組可以用阿，因為這次轉換的機器有 php 的部分，而且大部分是出圖跟利用 php 來做 javascript 模組的合併 (就是所謂的 combo loader)，這些幾乎都是做一次就不會在更改結果的，所以就查了一下 nginx 的 fastcgi cache 的設定： 在 http 的 section 加入 fastcgi_cache_path /dev/shm/cache/ levels=1:1 keys_zone=PHP:8m inactive=60m max_size=256m; 然後在 location ~ \\.php$ 的 section 裡面加入 fastcgi_cache PHP; fastcgi_cache_valid 200 7d; 這樣 nginx 就會利用 /dev/shm/cache 當作快取，由於 /dev/shm 是記憶體所以速度相當的快，而記憶體的 cache 則是在 keys_zone 的第二部分也就是開了 8MB，而這塊快取的名字叫做 PHP 之後會用到，至於 inactive 就是用來指定快取裡面的物件多久之後沒有用到就要被剔除掉，然後最後面的 max_size 則是硬碟要用多少當 cache，由於通常 /dev/shm 預設會是記憶體大小的一半所以這裡就適當的調整大小。接著在用到 fastcgi 的地方，通常就是 location ~ \\.php$ 這段，加入 fastcgi_cache PHP; 的設定，這樣就會讓經過 fastcgi 的 request 也收進 PHP 這塊的暫存區了，但是什麼東西才要記起來呢？這個則要透過 fastcgi_cache_valid 來指定。 來看看啟用後神奇的效果 : %} 可以看到啟用後… php 就不工作了 (誤)，因為大部分的都在 cache 的階段就出去了，不過注意的是當 nginx 看到 header 有 Pragma:no-cache 就不會加進去快取了。所以這個比較適合前面提到的 php 是用來出圖或者合併 javascript 等所謂的靜態內容。當然除了 CPU 的閒置，另外 response time 也增快很多，因為不需要經過 php 的運算了。 結論就是：最佳化的最後一步就是加快取什麼就都解決了 XD 參考資料: [nginx fastcgi_cache](http://wiki.nginx.org/HttpFastcgiModule#fastcgi_cache %}","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.littlero.se/tags/nginx/"}]},{"title":"squid nginx http1.1 gzip","slug":"squid-nginx-http1-dot-1-gzip","date":"2012-07-07T11:23:00.000Z","updated":"2015-03-14T05:42:18.000Z","comments":true,"path":"post/squid-nginx-http1-dot-1-gzip/","link":"","permalink":"https://blog.littlero.se/post/squid-nginx-http1-dot-1-gzip/","excerpt":"在 nginx 中要啟用 gzip 非常簡單，只要在 http 的段落裡面加入 gzip on; gzip_http_version 1.0; gzip_comp_level 9; gzip_proxied any; gzip_min_length 1400; gzip_types text/css application/x-javascript text/javascript; gzip_vary on; 但是加了之後，因為我們前端還有先過 squid，結果發現怎麼有的 css 檔就是沒有被 gzip，但是有些 js 檔卻又有，在網路查到原來是還要在 squid.conf 加入 cache_vary on broken_vary_encoding allow all 這是因為啟用 gzip 後，HTTP Header 也會加入 Vary:Accept-Encoding，加了上面的設定才可以讓 squid 保存 gzip 的內容，不會很自作聰明的解壓縮在傳給 client 端，不過網路另有一說是因為 squid 不是完整的支援 HTTP1.1 的 protocol，所以在面對 gzip HTTP1.0 跟 HTTP1.1 的版本的時候就會有問題，不過我有在 nginx 加了 gzip_http_version 1.0 了還是一樣有問題，加了那兩行才 ok。","text":"在 nginx 中要啟用 gzip 非常簡單，只要在 http 的段落裡面加入 gzip on; gzip_http_version 1.0; gzip_comp_level 9; gzip_proxied any; gzip_min_length 1400; gzip_types text/css application/x-javascript text/javascript; gzip_vary on; 但是加了之後，因為我們前端還有先過 squid，結果發現怎麼有的 css 檔就是沒有被 gzip，但是有些 js 檔卻又有，在網路查到原來是還要在 squid.conf 加入 cache_vary on broken_vary_encoding allow all 這是因為啟用 gzip 後，HTTP Header 也會加入 Vary:Accept-Encoding，加了上面的設定才可以讓 squid 保存 gzip 的內容，不會很自作聰明的解壓縮在傳給 client 端，不過網路另有一說是因為 squid 不是完整的支援 HTTP1.1 的 protocol，所以在面對 gzip HTTP1.0 跟 HTTP1.1 的版本的時候就會有問題，不過我有在 nginx 加了 gzip_http_version 1.0 了還是一樣有問題，加了那兩行才 ok。 另外一個問題是在 nginx 裡面預設是有支援 Connection:Keep-Alive，但是經過 squid 之後每次 Header 都只有直接出 Connection:Close，在網路好像沒什麼相關的討論，後來突然想到會不會也是因為 squid 沒有完整支援 HTTP1.1 的 protocol 害得，後來查了 squid 的 Document 發現可以手動打開 HTTP1.1 的方法 (不過不是完全支援)，打開的方式如下 http_port 80 accel vhost http11 cache_peer 127.0.0.1 parent 80 0 originserver proxy-only no-digest no-query http11 對於 http_port http11 來說就是對 Client 端啟用支援 HTTP1.1，我們可以在加入後看到 Header 的部分都會回傳 HTTP/1.1 200 OK 而原本沒有 http11 的話則預設就是 HTTP/1.0 200 OK，後者 cache_peer http11 則是對後端 Server 啟用 HTTP1.1，我們可以在 nginx 的 access_log 看到 GET /xxxx/xxxx.jpg HTTP/1.1 而如果沒有 http11 的話則會是 GET /xxxx/xxxx.jpg HTTP/1.0，在加了 cache_peer http11 之後我們也要把剛剛 nginx gzip 用 1.0 的方式改一下所以把剛剛 nginx 的設定改成 gzip_http_version 1.1; 改成 HTTP1.1 的方式回給 Client 之後，由於 1.1 的 protocol 規範，預設是啟用 Persistent Connections 的除非 Header 出現 Connection:Close 才表示關閉長連接，但是在 HTTP1.0 當中預設是關閉的，除非出現 Connection： keep-alive 才表示啟用，在打開 HTTP1.1 之後目前還沒有什麼問題，雖然也不知道到底 Persistent Connections 有沒有生效 = =” 最後在 squid 啟用 HTTP1.1 會跟 POST 的方法打架，因為 HTTP1.1 規定 POST 之後不得有任何符號，但是有些瀏覽器會自己補上去 CRCL，結果就是 squid 會回看不懂，不過由於這次的 Server 沒有要收 POST，所以還是給她大力的開下去！如果真的要避掉 POST 出錯可以在 squid.conf 加入 ignore_expect_100 on 參考資料: broken_vary_encoding Compatibility with HTTP/1.0 Persistent Connections Squid TCP_MISS / 417 ignore expect 100","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.littlero.se/tags/nginx/"},{"name":"squid","slug":"squid","permalink":"https://blog.littlero.se/tags/squid/"}]},{"title":"ifconfig.me - the web ifconfig","slug":"ifconfig-dot-me-the-web-ifconfig","date":"2012-06-26T07:57:00.000Z","updated":"2016-11-09T09:24:37.000Z","comments":true,"path":"post/ifconfig-dot-me-the-web-ifconfig/","link":"","permalink":"https://blog.littlero.se/post/ifconfig-dot-me-the-web-ifconfig/","excerpt":"","text":"前幾天公司同事在問我們的機器出去的 public ip 是多少，突然發現原來大家好像都不知道有一個方便的網站可以查，對於會 Unix 的來說網址是在好記不過了，就是跟 Unix 看 ip 的 ifconfig 同樣的名稱 http://ifconfig.me ifconfig.me 可以取得你現在 ip 資訊的網站，不過他跟一般顯示 ip 的網站不同的是他功能比較強！ 除了會顯示一些基本的資訊 他還支援了不同的網址只顯示需要的部分，比方說我們可以在 Terminal 打 curl ifconfig.me/ip 就會得到 61.219.37.20，又或者 curl ifconfig.me/port 就可以知道本地端出去的 port51081，如果有經過 Proxy 的話 curl ifconfig.me/forwarded 還會顯示 61.219.66.125, 172.30.4.166, 61.219.37.20 甚至更有趣的是他也支援 XML / json，網址分別是 http://ifconfig.me/all.xml 與 http://ifconfig.me/all.json 詳細的內容可以看 [ifconfig.me](http://ifconfig.me %}","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"}]},{"title":"fabric - Machine Manager","slug":"fabric-machine-manager","date":"2012-04-30T02:13:00.000Z","updated":"2015-03-14T05:39:57.000Z","comments":true,"path":"post/fabric-machine-manager/","link":"","permalink":"https://blog.littlero.se/post/fabric-machine-manager/","excerpt":"Python Fabirc 是一個類似 Ruby capistrano 的自動化部署跟系統管理工具，安裝指令是 pip install -U fabric 或者 easy_install fabric 都可以。fabric 的使用也非常的簡單，只要寫好一個檔名是 fabfile.py 的檔案，在同一個資料夾底下打 fab --list 就可以看到有哪些參數可以下 (就是 fabfile.py 裡面的 function)。 以下是一個簡單的範例 template","text":"Python Fabirc 是一個類似 Ruby capistrano 的自動化部署跟系統管理工具，安裝指令是 pip install -U fabric 或者 easy_install fabric 都可以。fabric 的使用也非常的簡單，只要寫好一個檔名是 fabfile.py 的檔案，在同一個資料夾底下打 fab --list 就可以看到有哪些參數可以下 (就是 fabfile.py 裡面的 function)。 以下是一個簡單的範例 template import fabric from fabric.api import run, env from fabric.operations import put env.warn_only = True # Broken machine env.skip_bad_hosts = True env.parallel = True env.pool_size = 5 env.timeout = 5 message = \"\"\" fabric.state.output[\"status\"] = False \"\"\" fabric.state.output[\"running\"] = False fabric.state.output[\"user\"] = False fabric.state.output[\"warnings\"] = False fabric.state.output[\"stderr\"] = False def web(): for x in xrange(1,9): env.hosts.append('192.168.0.' + str(x)) for x in xrange(11,19): env.hosts.append('192.168.0..' + str(x)) for x in xrange(31, 39): env.hosts.append('192.168.0.' + str(x)) def cache(): for x in xrange(1, 9): env.hosts.append('192.168.1.' + str(x)) def all(): web() cache() # define needed functions here. def host_info(): print 'Checking lsb_release of host: ', env.host run('lsb_release -a') def uptime(): run('uptime') def date(): run('date') 然後我們打 fab –list 應該會顯示 Available commands: all cache date host_info uptime web 如果我們要知道 web 的 uptime 是多少就可以這樣使用 fab web uptime，那如果要知道 cache 的 host_info 就可以下 fab cache host_info，相同的如果要知道全部的機器的時間準不準就打 fab all date，使用了 fabric 之後管理就變簡單了吧！ 進階的還有用 put 指令來做類似 rsync 的工作，請參閱 fabric 的文件即可。","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"}]},{"title":"使用 vGhetto 管理 VMware vCenter","slug":"use-vghetto-manage-vmware-vcenter","date":"2012-04-21T13:57:00.000Z","updated":"2015-03-14T05:42:41.000Z","comments":true,"path":"post/use-vghetto-manage-vmware-vcenter/","link":"","permalink":"https://blog.littlero.se/post/use-vghetto-manage-vmware-vcenter/","excerpt":"vGhetto 是一個由社群主導的專案，主要的目的當然是簡化管理 VMware 的工作，不用使用最原始的 vmrun 這個指令或者 Perl SDK 做管理，整個專案放在 SourceForge，到 專案頁面 下載，抓下來的目錄長這樣 (或者直接用 svn co https://vghetto.svn.sourceforge.net/svnroot/vghetto vghetto 也可以) . ./INSTALL ./TODO ./bitmaps/ ./build/ ./demo/ ./installers/ ./other/ ./scripts/ ./vGhetto.pl* ./wbin/ 其中的 scripts 資料夾就是放置管理用 script 的地方，裡面是一堆 .pl 的 perl 檔案","text":"vGhetto 是一個由社群主導的專案，主要的目的當然是簡化管理 VMware 的工作，不用使用最原始的 vmrun 這個指令或者 Perl SDK 做管理，整個專案放在 SourceForge，到 專案頁面 下載，抓下來的目錄長這樣 (或者直接用 svn co https://vghetto.svn.sourceforge.net/svnroot/vghetto vghetto 也可以) . ./INSTALL ./TODO ./bitmaps/ ./build/ ./demo/ ./installers/ ./other/ ./scripts/ ./vGhetto.pl* ./wbin/ 其中的 scripts 資料夾就是放置管理用 script 的地方，裡面是一堆 .pl 的 perl 檔案，不過也有用 php 寫的，在使用這些 perl 檔案之前要先安裝 VMware vSphere SDK for Perl，使用 Gentoo 的可以在 layman 增加 vmware 這個 repository layman -a vmware 設定之後就可以裝 SDK 了，接著再下 emerge app-emulation/vmware-vsphere-cli 裝完 scripts 裡面的指令就都可以使用了。我們先用一個簡單的來試看看。 ./listVMByFolder.pl --server VI_SERVER --user VI_USERNAME --password VI_PASSWORD (VI_SERVER, VI_USERNAME, VI_PASSWORD 請自行代換或者填成 shell variable) 成功的話應該會列出這台 Server 底下的所有 VM (註：Server 可以是 ESX 或者 vCenter) 不過我一開始執行結果會出現下列訊息 Error: Server version unavailable at 'https://VI_SERVER/sdk/vimService.wsdl' 由於 vmrun 的指令都是基於 https，因此原因可能有兩個： openssl 的 libs 沒有裝 https 的 certificate 是 self-signed (所以預設不被接受) 前者裝上 openssl 即可 (Gentoo 預設應該都有裝了)，後者要在 shell variable 加上不要驗證 https 的 certificate，請使用下列指令： export PERL_LWP_SSL_VERIFY_HOSTNAME=0 不過主要是利用這個可以簡單的對 VM 下指令 (vmrun 當然也可以啦)，下面是範例： ./guestOpsManagement.pl --server VI_SERVER --username VI_USERNAME --vm Name_of_VirtualMachine --operation Operation_to_perform --guestusername Username_for_guestOS --working_dir /tmp --program_path program_to_start --program_args Arguments_to_program 可惜 operaion 的種類真的不多，只有下列 validate | ps | startprog | kill | ls | mkdir | rmdir | rm | mv | mvdir | copyfromguest | copytoguest | env 小秘訣因為每次都要打帳號密碼實在太麻煩，因此 VMware 貼心的準備了 session 的連接方法 (因為本來就是對 Https 操作)，有個程式叫做 save_session.pl 可以幫我們存起來，以後就用這個 Session 就可以直接下指令了，Gentoo 這個指令放在 _/opt/vmware/vsphere/cli/apps/session/save_session.pl_，因此我們用下列指令就可以存了，/opt/vmware/vsphere/cli/apps/session/save_session.pl --savessionfile PATH_of_SESSION --server VI_SERVER，會提示打帳號密碼，存起來的 Session 以後就可以用 shell variable 的 VI_SESSIONFILE 代表，以後就不用在打帳密了。","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Gentoo","slug":"Gentoo","permalink":"https://blog.littlero.se/tags/Gentoo/"},{"name":"VMware","slug":"VMware","permalink":"https://blog.littlero.se/tags/VMware/"}]},{"title":"設定 SPF 跟 DomainKeys 在 postfix 和 tinydns","slug":"postfix-spf-domainkeys-tinydns","date":"2012-04-18T12:22:00.000Z","updated":"2018-06-21T14:59:52.267Z","comments":true,"path":"post/postfix-spf-domainkeys-tinydns/","link":"","permalink":"https://blog.littlero.se/post/postfix-spf-domainkeys-tinydns/","excerpt":"部門最近有架 Mail Server 的需求，要架 Mail Server 首先要搞定不讓自己寄出去的信被當作 Spam，參考 Google 的 電子郵件驗證 中說的，要可以被 驗證和識別，通常就是 Domain 要發佈 SPF 跟簽署 DKIM(DomainKeys Identified Mail) 或最古老的 DomainKeys，不過有了 DKIM 後原本單純 DomainKeys 就被廢棄了 (當然目前還是可以用的)。我們單位用的 mail server 是 Postfix 而 DNS 則是 tinydns (djbdns %} 設定 SPFSPF 只是簡單的 DNS TXT 發佈而已，可以利用 easySPF 製作。於是在 tinydns 的設定檔加入下列資訊： 'foo.bar:v=spf1 ip4\\07211.22.33.44/32 ~all:600 這裡用 foo.bar 當作 domain，而 11.22.33.44 則是 Server 寄信出來的 public ip，這樣子就完成啦~ 我們用 dig TXT foo.bar @8.8.8.8 +tcp 可以觀察到 ;; ANSWER SECTION: foo.bar. 600 IN TXT \"v=spf1 ip4:11.22.33.44/32 ~all\" 設定 DKIM","text":"部門最近有架 Mail Server 的需求，要架 Mail Server 首先要搞定不讓自己寄出去的信被當作 Spam，參考 Google 的 電子郵件驗證 中說的，要可以被 驗證和識別，通常就是 Domain 要發佈 SPF 跟簽署 DKIM(DomainKeys Identified Mail) 或最古老的 DomainKeys，不過有了 DKIM 後原本單純 DomainKeys 就被廢棄了 (當然目前還是可以用的)。我們單位用的 mail server 是 Postfix 而 DNS 則是 tinydns (djbdns %} 設定 SPFSPF 只是簡單的 DNS TXT 發佈而已，可以利用 easySPF 製作。於是在 tinydns 的設定檔加入下列資訊： 'foo.bar:v=spf1 ip4\\07211.22.33.44/32 ~all:600 這裡用 foo.bar 當作 domain，而 11.22.33.44 則是 Server 寄信出來的 public ip，這樣子就完成啦~ 我們用 dig TXT foo.bar @8.8.8.8 +tcp 可以觀察到 ;; ANSWER SECTION: foo.bar. 600 IN TXT \"v=spf1 ip4:11.22.33.44/32 ~all\" 設定 DKIM 先到 DKIM 的官網下載，然後編譯的參數用./configure --with-openssl --with-milter， make install 裝好之後我們先編輯 /etc/postfix/opendkim.conf Domain foo.bar KeyFile /etc/postfix/rsa.private InternalHosts /etc/postfix/ilist Selector dk Socket inet:8891@localhost Syslog Yes UserID postfix 以下分開說明每個參數的作用： Domain : 就是我們要 sign 的 domain KeyFile : 由於 DKIM 或者 Domainkeys 都是靠非對稱加解密方式 (像 RSA) 作驗證，所以需要一把 private/public key，這裡填入的是 sign 需要的 private key 這裡先說明怎麼建立這兩把 key openssl genrsa -out /etc/postfix/rsa.private 512 openssl rsa -in /etc/postfix/rsa.private -out /etc/postfix/rsa.public -pubout -outform PEM 其中第二把分離出來的 public key 就有我們要填到 DNS 的資訊， cat /etc/postfix/rsa.public 大概會長的像下面一樣 -----BEGIN PUBLIC KEY----- MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAL+BLtIPf6o3YlrLJUO8b++v4Jc9ppkf tBdRZfTB0jprUosjt+QHmY8t8bPFEK83XmRrSTEh94MJOjbXwN7AhGcCAwEAAQ== -----END PUBLIC KEY----- 從 MF…(略)…Q== 就是我們要填的資訊 InternalHosts：這個檔案就是告訴 DKIM 從哪些 ip 來的 relay 我們都要 sign mail，格式如下： 127.0.0.1 10.0.0.0/8 事實上官方文件說從 2.2 之後不需要這個檔案， opendkim 會自動判斷 header 的 From 只要等於 Domain 就會自動 sign，可是我實驗的結果沒有成功 = =，所以還是加上去了。 Selector：這個是驗證時候要用的 subdomain，就隨便定一個名稱吧。 Socket：由於 opendkim 是一個 daemon，這是他要 listen 的 socket (unix domain socket 也是 ok 的 %} Syslog：要不要使用 syslog 來記錄，會被歸類在 mail facility。 UserID：daemon 的 UID 設定也好了之後我們就來啟動 daemon 吧！指令很簡單 opendkim -x /etc/postfix/opendkim.conf -A -l，搞定收工。這樣 opendkim 就會 listen 在 port 8891 了。 然後我們要設定讓 postfix 吃到這個 milter，在 /etc/postfix/main.cf 加入下列資訊： smtpd_milters = inet:localhost:8891 non_smtpd_milters = inet:localhost:8891 然後 /etc/init.d/postfix restart 就完成了 opendkim 的設置。 接下來是 tinydns 的設定，還記得剛剛的 public key 嗎? 我們需要它了，打開 tinydns 的設定，加入下列資訊： '_domainkey.foo.bar:o=-:600 'dk._domainkey.foo.bar:k=rsa; p=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAL+BLtIPf6o3YlrLJUO8b++v4Jc9ppkftBdRZfTB0jprUosjt+QHmY8t8bPFEK83XmRrSTEh94MJOjbXwN7AhGcCAwEAAQ==:600 其中的 _domainkey. 這個 subdomain 是固定的一定要叫這樣才會 work，我後來才發現 (因為懶得慢慢嗑 SPEC 試了好久 QQ)，而第二行的 dk._domainkey. 的這個 dk 則是對應前面 /etc/postfix/opendkim.conf 的 Selector 這樣整個 DKIM 驗證設定就完成了。 Domainkeys由於我們已經設定好了 key，所以接下來要設定 Domainkeys 就簡單多了，首先到 domainkeys-milter 下載，然後編譯的指令是 sh Build -c &amp;&amp; sh Build install 裝好之後，由於 dk-milter 比較傳統只有支援 command line 的指令所以沒有設定檔支援，要啟動他的指令如下 /usr/bin/dk-filter -i /etc/postfix/ilist -l -b sv -p inet:8892@localhost -d foo.bar -H -s /etc/postfix/rsa.private -S dk &amp; 指令的內容其實都跟 opendkim 一樣 (其實是 opendkim 跟他一樣才對 XD)，應該不難理解，所以就這樣啦，然後注意的是我讓 dk-milter listen 在 8892，而 key 則用剛剛產生的，然後我們一樣要修改 /etc/postfix/main.cf smtpd_milters = inet:localhost:8891, inet:localhost:8892 non_smtpd_milters = inet:localhost:8891, inet:localhost:8892 簡單來說就是有幾個 milter 就一直加上去就對了！ 至於 DNS 的部分由於 DKIM 跟 domainkeys 都吃一模一樣的 key 所以就不用在設定一次拉~ 驗證有沒有成功最簡單的方式就是從 Server 寄一次看看啦~ telnet localhost 25 MAIL FROM:xxx@foo.bar RCPT TO:xxx@gmail.com DATA From: xxx@foo.bar To: xxx@gmail.com Subject: test message This is test message! . QUIT 然後到 GMail 收信，看信件的 Header 應該會有：spf=pass 跟 dkim=pass 的字樣就表示成功了！而 Yahoo 也是一樣會有 pass 的字樣哦~","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"}]},{"title":"Server 收到 SYN packet 後沒有 SYN/ACK 回應","slug":"no-syn-slash-ack-after-receive-syn-packet","date":"2012-04-17T07:40:00.000Z","updated":"2015-03-14T05:41:37.000Z","comments":true,"path":"post/no-syn-slash-ack-after-receive-syn-packet/","link":"","permalink":"https://blog.littlero.se/post/no-syn-slash-ack-after-receive-syn-packet/","excerpt":"","text":"這是最近管發生的怪現象，就是公司某個單位一直跟我們說他們的 Server 要連我們的 Server，結果我們這邊時好時壞，… 什麼?! 我們這邊時好時壞? 從沒有聽過用戶說我們的 Server 連不上阿，於是就跟他們一起 Debug，開了 tcpdump 來看，發現我們這邊的確有時候收到 SYN 結果就不回 SYN/ACK kernel 直接 drop 封包 XD 這是什麼鬼，kernel 也太不聽話了，不過我們這邊 kernel 沒有打開 iptables 也沒有什麼 drop 封包的規則，於是就 Google 了一下，原來有人跟我們遇到一樣的狀況 Why would a server not send a SYN/ACK packet in response to a SYN packet 簡單的來說跟我們一模一樣，隨機的不回 SYN，根據那篇文章說的，解法有下列兩種： 關掉 client 的 tcp window scaling 不過這個顯然不是什麼好的方法，因為我們不能限制 client 阿 關掉 server 的 tcp window scaling 跟 tcp timestamps 看起來是因為 client 送的 tcp window size 不被 server 接受所以就 drop 掉，可是為什麼是 SYN 就被 drop 實在是不可得知。不過我們的 Server 後來加了以下設定後的確就好了： net.ipv4.tcp_tw_reuse = 0 net.ipv4.tcp_tw_recycle = 0 net.ipv4.tcp_window_scaling = 0 net.ipv4.tcp_timestamps = 0 net.ipv4.tcp_sack&nbsp;=&nbsp;0 參考資料: sysctl Handling TCP Window Scaling Ipsysctl tutorial","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"}]},{"title":"為什麼我跳槽到 octopress","slug":"why-i-choose-octopress","date":"2012-04-09T07:59:00.000Z","updated":"2016-04-10T04:03:58.000Z","comments":true,"path":"post/why-i-choose-octopress/","link":"","permalink":"https://blog.littlero.se/post/why-i-choose-octopress/","excerpt":"When I met OctopressOctopress 是一個之前 (應該是兩年前吧 XD) 很流行的 Static Blog Generators 的產物，Based 的語言是 Ruby，底層依賴 Jekyll，由於 Jekyll 支援很多其他有的沒的，像是 Markdown Engine 支援很多種 (包含了 Maruku 或者 Kramdown )，另外也有 Syntax Highlight (可以使用 Pygment 或者 Coderay)，加上 Octopress 作者自己的延伸讓 Octopress 常見的功能 (甚至是不會用到的功能 XD) 都有提供了。 之前公司的學弟就使用 Markdown 在寫工作日誌，其實滿不明所以然","text":"When I met OctopressOctopress 是一個之前 (應該是兩年前吧 XD) 很流行的 Static Blog Generators 的產物，Based 的語言是 Ruby，底層依賴 Jekyll，由於 Jekyll 支援很多其他有的沒的，像是 Markdown Engine 支援很多種 (包含了 Maruku 或者 Kramdown )，另外也有 Syntax Highlight (可以使用 Pygment 或者 Coderay)，加上 Octopress 作者自己的延伸讓 Octopress 常見的功能 (甚至是不會用到的功能 XD) 都有提供了。 之前公司的學弟就使用 Markdown 在寫工作日誌，其實滿不明所以然不過真正跳進來之後才發現原來使用 Markdown 寫東西這麼愉快，大量簡化的語法，全部都是基於符號，像是 # 表示&lt;h1&gt; 系列、*** 表示橫列、+ - * 表示&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;，另外 img 或者 link 也都相當簡單，這個真的大幅度的降低寫 Blog 的干擾，可以更專心的寫作 (當然還是要學習一下啦，不過算是簡單就可以上手)。 不過坊間這麼多 Static Blog Generators，要怎麼挑個好的，當然先從自己熟悉的語言開始，原本是想用基於 node.js 大概有以下選擇： Pretrify DocPad Wintersmith 其中大概以 DocPad 知名度最高，當然功能也最豐富，Markdown、CoffeeScript、SASS，不過看來看去好像都沒有支援 Syntax Highlight(當然要自己加也可以，BTW 前一陣子有個不錯的 Javascript Syntax Highlighter Rainbow)，所以接下來第二程式選大概就是 Ruby 啦。 我覺得 Ruby 在網頁開發上一直有著類似 Python 的特色：沒得選擇 XD，這個當然我覺得是一種不錯的形態，大家都走一樣的路資源也會集中，尤其在 OpenSource 我想 Feedback 的力量會很大 (啊，離題了)，回到 Ruby，大概就下面兩樣選擇 (其實也可以說是同一樣)： Jekyll Octopress 前面提到 Octopress 其實底層就是從 Jekyll 改的，之前有小用過 Jekyll 一下，官網提到 Octopress 比 Jekyll 的優異處在於： A semantic HTML5 template A Mobile first responsive layout (rotate, or resize your browser and see) Built in 3rd party support for Twitter, Google Plus One, Disqus Comments, Pinboard, Delicious, and Google Analytics An easy deployment strategy using Github pages or Rsync Built in support for POW and Rack servers Easy theming with Compass and Sass A Beautiful Solarized syntax highlighting 不過我覺得上面列的都還是小事 (當然第三點支援很多 social media 也很吸引人啦)，使用上最大的差異是在產生 static html 時，Jekyll 只有 jekyll --auto --safe --no-server 然後他就會 listen 在那邊聽檔案的異動要回到 shell 還要在按 ctrl + c，不過有時候我只想要產生一次就要 deploy site 了啊，Octopress 則是使用 rake generate 然後就會回到 Shell，簡單的指令是我對 Octopress 的印象。 另外 Octopress 支援的 Syntax Highlight 也是五花八門，從基本的 Pygment 到 Gist (使用 {% gist 996818 %} 即可)、甚至是 static files 或者 jsFiddler 也都有支援，這根本是替程式設計師設計的 Blogger！ 不然之前我用 BlogSpot 時每次都還要複製他們的 javascript 檔案，現在只要有 Gist ID 就可以啦~ 但是 Github 原生支援 Jekyll，只要 push source 他就會自動 build site。這點是 Octopress 不及的 (要分成 master &amp; source 兩個 branch 不過 Octopress 作者有寫好的 Script 就是)。 一些基本的 Octopress 的指令 rake generate - 用來產生 static site 在 public 資料夾底下 rake new_post[\"title\"] - 產生新的 POST rake watch - 寫新的文章時很好用，他會監聽檔案異動，及時產生 static files rake deploy - 參考 Deploying to Github","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Octopress","slug":"Octopress","permalink":"https://blog.littlero.se/tags/Octopress/"}]},{"title":"從 TextMate 2 跳到 Sublime Text 2","slug":"transfer-textmate-2-to-sublime-text-2","date":"2012-04-08T04:44:00.000Z","updated":"2016-11-09T09:25:45.000Z","comments":true,"path":"post/transfer-textmate-2-to-sublime-text-2/","link":"","permalink":"https://blog.littlero.se/post/transfer-textmate-2-to-sublime-text-2/","excerpt":"原本都是使用 TextMate 後來實在受不了不能好好支援 cjk 的輸入。 加上 TextMate 已經過了好久都沒有更新，原本說好在 Mac OS X 10.5 出來的時候就要改用 CoreText 改寫，結果也跳票了。不然實在是離不開 TextMate 的 snippet。 不過雖然 TextMate 在前一陣子推出 TextMate 2 beta 但是很多功能還是沒有完整，而且不時還會當機，所以前陣子原本就想說找個替代品，一路搜尋下來就發現了 Sublime Text 2 (beta)。 可以說 TextMate 該有的他都有，而且支援了更多的功能，加上跨 Windows, Linux, OS X 所以可以預料到未來應該會有更多人力加入寫 Sublime Text 2 packages 的行列。","text":"原本都是使用 TextMate 後來實在受不了不能好好支援 cjk 的輸入。 加上 TextMate 已經過了好久都沒有更新，原本說好在 Mac OS X 10.5 出來的時候就要改用 CoreText 改寫，結果也跳票了。不然實在是離不開 TextMate 的 snippet。 不過雖然 TextMate 在前一陣子推出 TextMate 2 beta 但是很多功能還是沒有完整，而且不時還會當機，所以前陣子原本就想說找個替代品，一路搜尋下來就發現了 Sublime Text 2 (beta)。 可以說 TextMate 該有的他都有，而且支援了更多的功能，加上跨 Windows, Linux, OS X 所以可以預料到未來應該會有更多人力加入寫 Sublime Text 2 packages 的行列。 之前試用了 Sublime Text 2 (Build 2165) 不過發現有個重大問題，就是沒辦法在 html 情境中的 script tag 使用 jQuery 的 snippet 真的很怪，所以後來評估之後之好先繼續使用 TextMate 2。 不過這幾天又使用了最新版的 (Build 2181) 又修好了，應該真的是 2165 的 bug。所以看起來是真的可以完全換到 Sublime Text 2 了。 不過沒有什麼 IDE 是原生就符合每個人的習慣的，一定要 tune 一下，裝一堆的 Plug-in，Sublime Text 2 也是一樣，不過幸好裝 Plug-in (Sublime Text 2 叫 Packages) 是很簡單的事。 基本準備首先按 ctrl + ` 然後會出現一個對話框，直接貼入下列的程式碼 import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation' 然後按下 Enter 就會安裝完成了，重開 Sublime Text 2 後，按下 cmd + shift + p 會叫出 Command Palette，輸入 package control 就會顯示相關指令： 我們下面需要用到的是 Install 所以把游標移到 Install Package 按下 Enter (以後可以搜尋 install 就好)，他會上網截取所有的 Package 列表然後再次出現輸入提示： 推薦套件接下來介紹幾個我有用到的套件 (直接在 Install 裡搜尋即可 %} [Zen Coding](https://bitbucket.org/sublimator/sublime-2-zencoding %} 可以用 zen coding 的方式展開 html tags [jQuery](https://github.com/mrmartineau/Jquery %} 是網頁設計師就要寫 jQuery 吧! [JsFormat](https://github.com/jdc0589/JsFormat %} [SublimeLinter](https://github.com/kronuz/SublimeLinter/ %} [Sublime Alignment](https://github.com/wbond/sublime_alignment %} 對齊等號… 不過對於 javascript 好像有 Bug XD [Case Conversion](https://github.com/jdc0589/CaseConversion %} 誰不合作了嗎? 這個讓你在 pascal, camel, snake 這三種變數表示法中輕鬆切換。 [BracketHighter](https://github.com/facelessuser/BracketHighlighter %} 花俏的提示成對符號 [ChangeQuotes](https://github.com/colinta/SublimeChangeQuotes %} 在單引號、雙引號中輕鬆切換。 [Twitter Bootstrap](https://github.com/devtellect/sublime-twitter-bootstrap-snippets/ %} 支援 Bootstap 的 snippet 推薦 Theme而在 Theme 方面我用的是 Prospettiva + [Soda](https://github.com/buymeasoda/soda-theme %} Prospettiva 的安裝只要把他的 prospettiva.tmTheme 下載後放到 ~/Library/Application Support/Sublime Text 2/Packages/User 即可 而 Soda 則可以利用 Package Manager 安裝 Soda 有一點類似掌管整個程式的 Decorator 而 Prospettiva 則是掌管 TextArea 的區塊，最後完成的結果像這樣：","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"TextMate","slug":"TextMate","permalink":"https://blog.littlero.se/tags/TextMate/"},{"name":"Sublime","slug":"Sublime","permalink":"https://blog.littlero.se/tags/Sublime/"}]},{"title":"FreeBSD 初體驗","slug":"freebsd-first-sight","date":"2012-02-11T16:00:00.000Z","updated":"2020-12-02T02:14:55.806Z","comments":false,"path":"post/freebsd-first-sight/","link":"","permalink":"https://blog.littlero.se/post/freebsd-first-sight/","excerpt":"其實說初體驗好像太誇張 XD大學時候有碰過一次 不過覺得好難玩 (跟 Gentoo 比的話) (¬_¬) 所以就沒有繼續碰最近因為想評估 FreeBSD 一下所以就想說來試一下安裝非常簡單 都是選單互動的 比 Gentoo 簡單很多 XD","text":"其實說初體驗好像太誇張 XD大學時候有碰過一次 不過覺得好難玩 (跟 Gentoo 比的話) (¬_¬) 所以就沒有繼續碰最近因為想評估 FreeBSD 一下所以就想說來試一下安裝非常簡單 都是選單互動的 比 Gentoo 簡單很多 XDBSD 系列的其中一大特色就是他的 ports 系統啦最傳統的使用法是移動進去他的目錄然後打 make install clean比方說要裝 vim 就要打 不過這實在太麻煩了還要移動目錄 看起來 FreeBSD 目前有幾個不錯的 managerportmanagerportupgrade我選了 portmanager 因為有人說他效能比較好 他是用 C 寫的 相較於 portupgrade 是用 Ruby 寫的當然比較好 XD所以來裝一下吧使用方法很簡單 portmanager CATEGORY/PORT -ui 即可 i 表示要 interactive 選 options比方說裝 vim 就變成 portmanager editors/vim -ui不過在此之前讓我們來調整一下 ports 編譯時候相關設定先編輯 /etc/make.conf (可能會沒有那就建立他吧)CFLAGS 就是編譯時最佳化的參數啦而 FORCE_MAKE_JOBS=yes MAKE_JOBS_NUMBER=9 則是 make 時要同時作多少個 jobs要順便加上全域的 WITHOUT_X11=yes 也行再來是我覺得 ports 很奇怪的地方ports 在編譯時可以選不同的額外套件 (Gentoo 叫 USE)不過有的時候是另外寫 options 這個檔案 (在同資料夾下) 有的時候卻只有在 Makefile 才可以看到 = =像 vim 就是只有寫在 Makefile 這時候要編譯只能在 make 時加上 WITHOUT_X11=yes 之類的但是像 svn 他有寫 options 就可以在他的資料夾下打 make config 會跳出互動選單選額外套件 (或者 portmanager 有加 -i 也是會呼叫 make config)BTW, make config 會把設定存在 /var/db/ports/portname/options對於像 vim 這類的 portmanager 有另外的解決方法 首先 cp /usr/local/etc/portmanager/{pm-020.conf.SAMPLE,pm-020.conf}然後編輯 /usr/local/etc/portmanager/pm-020.conf 加入類似以下的設定這表示編譯 vim 時要加入 perl python ruby 的支援但是把圖形界面排除而 zsh 則是加入 pcre 的支援這樣一來 ports 的基本使用好像大致完善了如果要升級 ports tree 請使用 portsnap fetch update然後檢查狀態 portmanager -s如果要升級就 portmanager -u要搜尋 ports 有三種方法whereis vim - 適用於知道完整的套件名字echo /usr/ports/*/vimcd /usr/ports &amp;&amp; make search name=vim其中第三種方法 make search 需要 /usr/ports 已經有 index fileindex file 從哪裡來 你可以自己建立 make index (不過要好久 = =我們抓別人的就好了 make fetchindex XD1M 多的檔案~快多了!後記關於 static route 只要在 /etc/rc.conf 作如下的設定 Comments Hookah FreeBSD 讚啦！","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"FreeBSD","slug":"FreeBSD","permalink":"https://blog.littlero.se/tags/FreeBSD/"}]},{"title":"Open RC ulimit","slug":"open-rc-ulimit","date":"2012-02-08T16:00:00.000Z","updated":"2015-03-14T05:41:51.000Z","comments":false,"path":"post/open-rc-ulimit/","link":"","permalink":"https://blog.littlero.se/post/open-rc-ulimit/","excerpt":"一切都是因為手賤 XD因為我們的 Server 要設定大一點的 ulimit傳統的 Linux (或者說 Gentoo 在舊的 baselayout ) 都是使用 /etc/security/limits.conf 來設 ulimit於是當然就照以前的印象做拉~結果重開機後…然後所有的 service 就都起不來了 什麼鬼 / 口 &lt;br /&gt;而且一開始還沒有想到是這個在搞鬼 以為是 PAM 或者 OpenRC 錯了一直在想是不是 emerge 的 USE flag 錯了還怎樣","text":"一切都是因為手賤 XD因為我們的 Server 要設定大一點的 ulimit傳統的 Linux (或者說 Gentoo 在舊的 baselayout ) 都是使用 /etc/security/limits.conf 來設 ulimit於是當然就照以前的印象做拉~結果重開機後…然後所有的 service 就都起不來了 什麼鬼 / 口 &lt;br /&gt;而且一開始還沒有想到是這個在搞鬼 以為是 PAM 或者 OpenRC 錯了一直在想是不是 emerge 的 USE flag 錯了還怎樣然後找網站也沒有什麼相關訊息有人說把 OpenRC 的 PAM support 關掉就好 (不能這樣解吧 XD)倒是 Gentoo 的官方論壇有人提到他把 /etc/security/limits.conf 的 * 之類的刪除就好了於是就找了一下…結果神奇的發現 /etc/rc.conf 裡面有個 #rc_ulimit=’-u 30’然後改在這裡就好了 比方說 rc_ulimit=’-n 20000’ 就等於原本的 * soft nofile 20000","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"Gentoo","slug":"Gentoo","permalink":"https://blog.littlero.se/tags/Gentoo/"},{"name":"OpenRC","slug":"OpenRC","permalink":"https://blog.littlero.se/tags/OpenRC/"}]},{"title":"解決 OS X Lion 中 Log 一直出現 sanboxd deny 的訊息","slug":"solve-os-x-lion-log-sanboxd-deny-messages","date":"2011-12-12T16:00:00.000Z","updated":"2015-03-14T05:42:13.000Z","comments":false,"path":"post/solve-os-x-lion-log-sanboxd-deny-messages/","link":"","permalink":"https://blog.littlero.se/post/solve-os-x-lion-log-sanboxd-deny-messages/","excerpt":"雖然不是什麼大不了的事情不過看了總是很不順眼 XD就是每次開 Console Log 都會噴一堆sandboxd: ([]) WebProcess() deny file-read-data /Library/Caches/com.nvidia.OpenGLsandboxd: ([]) WebProcess() deny file-write-create /Library/Caches/com.nvidia.OpenGL/之類的 deny 訊息，如下圖這看了很讓人不順眼阿！","text":"雖然不是什麼大不了的事情不過看了總是很不順眼 XD就是每次開 Console Log 都會噴一堆sandboxd: ([]) WebProcess() deny file-read-data /Library/Caches/com.nvidia.OpenGLsandboxd: ([]) WebProcess() deny file-write-create /Library/Caches/com.nvidia.OpenGL/之類的 deny 訊息，如下圖這看了很讓人不順眼阿！於是開始從源頭找…首先是 OS X 的 sandbox 機制，每個被 sandboxd (sandbox daemon) 限制住的 process 都有一個對應的設定檔裡面寫著該 process 可以 access 那些檔案 (包含 allow &amp; deny) 而且設定檔的副檔名是 .sb在以下資料夾可以發現系統預設的 sandbox 的 profile/System/Library/Sandbox/Profiles//Library/Sandbox/Profiles//usr/share/sandbox/不過這些都是系統相關的檔案而非應用程式的應用程式的 profile 通常會在他自己目錄下的 Resources例如我們這裡的 WebProcess 指的就是 WebKit2 的一個 Process 而他的 sb profile 就在/System/Library/PrivateFrameworks/WebKit2.framework/WebProcess.app/Contents/Resources/如圖所示，我們可以看到底下有個名為 com.apple.WebProcess.sb 的檔案我們只要用 vi 編輯她即可加入下列文字，表示給與 WebProcess 對於 /Library/Caches/com.nvidia.OpenGL 的讀寫權限類似這樣加在最下方後重新啟動 Safari 就大功告成啦！再看 Console Log 應該就沒有這些訊息了~不過雖然是看不到了 不過也因為把權限放大了一些不知道會不會出事 XD","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://blog.littlero.se/tags/Mac/"}]},{"title":"陶瓷蝴蝶結","slug":"ceramic-bow","date":"2011-11-26T16:00:00.000Z","updated":"2015-03-14T05:38:34.000Z","comments":false,"path":"post/ceramic-bow/","link":"","permalink":"https://blog.littlero.se/post/ceramic-bow/","excerpt":"這是女朋友在 Youtube 看到的~ 實在很勾錐~陶瓷蝴蝶結 跟其他 杯子 盤子 都很可愛~不過電視上沒有寫聯絡方式於是就找啊找的人肉了一番 XD終於找到她們的部落格跟名字 小陶器 設計師是鏡子跟金金她們專門在做可愛的陶瓷創作像是 陶瓷蝴蝶結","text":"這是女朋友在 Youtube 看到的~ 實在很勾錐~陶瓷蝴蝶結 跟其他 杯子 盤子 都很可愛~不過電視上沒有寫聯絡方式於是就找啊找的人肉了一番 XD終於找到她們的部落格跟名字 小陶器 設計師是鏡子跟金金她們專門在做可愛的陶瓷創作像是 陶瓷蝴蝶結主要出沒地點是 天母市集他們也有在四間店家寄賣分別是MILA 花園 Le Jardin de Mila泰順街 26 巷 4-3 號 營業時間:13:30~20:30pm 星期天公休 TEL: 2368-0333小確幸捷運士林站 (2 號) 出口左側 營業時間:11:00~22:00pm 星期一公休 TEL:02-28839460新北市立鶯歌陶瓷博物館 (本館三樓)新北市鶯歌區文化路 200 號 星期一休館 TEL:02-86772727小花花手作雜貨鋪 小餅乾&amp;小兔子電話：07-229-9589地址：高雄市青年一路 4 巷 23 號 1 樓營業時間：週一至週五 PM12:00~PM21:00/周六至 22:00/周日至 18:00網友介紹這兩天恰逢 第十一屆牯嶺街書香創意市集她們有在哪裡擺攤而且剛好還要再買一樣小物送女友 就去逛逛啦~摁... 只能說她們攤位真的很受歡迎主要都是 杯子 碟子 盤子 花器 之類的器皿杯子有畫的也有蕾絲壓印的也有 湯匙 攪拌棒 蝴蝶結 之類的蝴蝶結超多功能的除了可以當裝飾品類的 項鍊 別針 或 髮圈 也可以當筷架！第二天展示的東西比較多她們也有在幫人家客製化東西哦~我跟她們訂了兩份盆栽 (其實就是碗然後下面打洞 XD) 跟盛水盤 然後把想要的大小、花色跟她們說當然陶瓷是要花時間製作跟燒的 她們是估大概要一個月~也有在幫人家製作婚禮小物 (蝴蝶結那張照片最左邊的水滴狀陶片) 噢！","categories":[{"name":"敗家","slug":"敗家","permalink":"https://blog.littlero.se/categories/%E6%95%97%E5%AE%B6/"}],"tags":[{"name":"蝴蝶結","slug":"蝴蝶結","permalink":"https://blog.littlero.se/tags/%E8%9D%B4%E8%9D%B6%E7%B5%90/"},{"name":"陶瓷","slug":"陶瓷","permalink":"https://blog.littlero.se/tags/%E9%99%B6%E7%93%B7/"}]},{"title":"Wikipedia cache 架構","slug":"wikipedia-cache-structure","date":"2011-10-16T16:00:00.000Z","updated":"2015-03-14T05:43:13.000Z","comments":false,"path":"post/wikipedia-cache-structure/","link":"","permalink":"https://blog.littlero.se/post/wikipedia-cache-structure/","excerpt":"最近被 cache server 整的很慘 XD先是以為我們用的 squid 效能不行 (後來證明是我頭腦的問題 XD)改用了 nginx, varnish 甚至是 apache traffic server 結果出圖都還是不太順利結果才發現是 SLB 說 cache server 的 80 port 一直 up and down後來更慘 SLB 產生 Mac Flapping後來把 Linux kernel 的 Netfilter 關掉然後在 /etc/sysctl.conf 把 tcp 的 buffer 加大後情況就舒緩許多 於是還是換回 squid 2.7.9在穩定後 想研究一下其他網站的 cache solution 是什麼","text":"最近被 cache server 整的很慘 XD先是以為我們用的 squid 效能不行 (後來證明是我頭腦的問題 XD)改用了 nginx, varnish 甚至是 apache traffic server 結果出圖都還是不太順利結果才發現是 SLB 說 cache server 的 80 port 一直 up and down後來更慘 SLB 產生 Mac Flapping後來把 Linux kernel 的 Netfilter 關掉然後在 /etc/sysctl.conf 把 tcp 的 buffer 加大後情況就舒緩許多 於是還是換回 squid 2.7.9在穩定後 想研究一下其他網站的 cache solution 是什麼大致上離不開自己開發的 cache server, 比如說 Facebook 採用自己開發的 Cachr 後端搭配 Haystacks 儲存用 open source 的 cache server, 最知名的大概就是 squid (採用的有 wikipedia, 一些 CDN(Hinet …etc)), 或者 varnish (Gentoo 的 wiki), 或者 traffic server (Yahoo 所採用的)改 open source 的 cache server, 像大陸的淘寶就是用 squid 去改寫號稱省好幾百 MB 的記憶體也支援 sendfilewikipedia 有簡報他們的 architecture概觀如下30000 HTTP requests/s during peak-time3 Gbit/s of data traffic3 data centers:Tampa,Amsterdam, Seoul350 servers, ranging between 1x P4 to 2x Xeon Quad- Core, 0.5 - 16 GB of memory本篇只著重在 cache 的部分他們用 squid 當 cache 根據簡報所說有 55 台 squid server每一台大約 1000 HTTP requests/s 壓力時會到 2500流量每台大約 100 - 250 Mbit/s連接數每台約 14000 - 32000關於硬體每台 squid 使用 40G 的空間當 cache每台 squid 都四顆硬碟每台都有 8G 的記憶體 squid 使用一半 (也就是 4G)Hit rates 的表現 Text 有 85%, 多媒體 (img, music) 的部分則達到 98% (因為使用了 CARP)CARP 的使用如下相較之下 我們這裡…16 台 squid server每台大概 150 個 requests/s, 最多單台有來到 300 r/s, 大概總 requests/s 在 3000 左右每台流量大概 60Mb/s, 最多來到 180Mb/s 左右, 全部的 cache server 最高大概有 1.5Gb/s 的流量每台都有兩顆硬碟採用 Raid0每台記憶體都有 4Ghit rate 的表現大概在 92%~95%我們這裡沒有用 CARP 直接 squid 後端接 original server所以看起來表現好像還不錯…","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"squid","slug":"squid","permalink":"https://blog.littlero.se/tags/squid/"}]},{"title":"squid refresh_pattern","slug":"squid-refresh-pattern","date":"2011-10-14T16:00:00.000Z","updated":"2015-03-14T05:42:22.000Z","comments":false,"path":"post/squid-refresh-pattern/","link":"","permalink":"https://blog.littlero.se/post/squid-refresh-pattern/","excerpt":"在 squid 裡面最重要也是最難懂得設定大概就是 refresh_pattern 了其語法如下refresh_pattern [-i] regex min percent max [options] regex 表示要 cache 住的對象 是比對 uri-i 表示不分大小寫而 min, percent, max 則是調整 cache object 要待在 squid 裡的時間參數以 分 當單位而最重要的莫過於後面的 option 了 因為我們的 squid 是當 reverse proxy 所以可以加上一堆 違反 http 規則的選項","text":"在 squid 裡面最重要也是最難懂得設定大概就是 refresh_pattern 了其語法如下refresh_pattern [-i] regex min percent max [options] regex 表示要 cache 住的對象 是比對 uri-i 表示不分大小寫而 min, percent, max 則是調整 cache object 要待在 squid 裡的時間參數以 分 當單位而最重要的莫過於後面的 option 了 因為我們的 squid 是當 reverse proxy 所以可以加上一堆 違反 http 規則的選項原本公司的 squid 有兩台的 in-bound 還是很高 表示還是一直往後端要圖 看了 log 之後發現… 5820428 TCP_REFRESH_HIT/304 4468379 TCP_MISS/200 4390710 TCP_MISS/404 3865158 TCP_REFRESH_HIT/200 2184838 TCP_REFRESH_MISS/404 ... 以下略 這 TCP_REFRESH_HIT 也高的太可怕了查了 squid 的說明TCP_REFRESH_HIT 是表示 client 端的 header 有 Programa: no-cache所以 squid 遵循 http 規範只好往後端的 original server 再要一次圖比較原圖跟 cache 後發現一樣 所以送 304 Not Modified但是這樣一來還是會往後端要所以解決的方法就是加上違反 http 協定的 options 忽略 client no-cache 的要求不管怎樣還是從 cache 出由於我們是 reverse proxy 所以是無傷大雅的所以加上 override-expire override-lastmod reload-into-ims ignore-reload ignore-no-cache ignore-private ignore-stale-while-revalidate ignore-authreload squid config 後在觀察 發現 in-bound 果然大幅下降 而 log 也顯示 TCP_IMS_HIT / TCP_HIT / TCP_MEM_HIT 大量上升流量的表現如下圖","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"squid","slug":"squid","permalink":"https://blog.littlero.se/tags/squid/"}]},{"title":"OS X 路徑多語系","slug":"os-x-application-i18n","date":"2011-09-13T16:00:00.000Z","updated":"2015-03-14T05:41:54.000Z","comments":false,"path":"post/os-x-application-i18n/","link":"","permalink":"https://blog.littlero.se/post/os-x-application-i18n/","excerpt":"剛剛不小心砍掉家目錄的「應用程式」資料夾結果去 Finder 重建 Applications 目錄後 Finder 還是顯示 Applications 而不是「應用程式」覺得很奇怪，查了一下發現是 OS X 的多語系在搞怪OS X 的 Finder 有一個功能就是可以配合系統的語系顯示目錄的名稱系統面上 OS X 提供了一層抽象層，區隔出「真正的檔案名稱」與「Finder 顯示的名稱」比方說 Applications 在 Finder 會顯示成「應用程式」或者 Library 會顯示成 「資源庫」以下是在 OS X 做多語系的方法","text":"剛剛不小心砍掉家目錄的「應用程式」資料夾結果去 Finder 重建 Applications 目錄後 Finder 還是顯示 Applications 而不是「應用程式」覺得很奇怪，查了一下發現是 OS X 的多語系在搞怪OS X 的 Finder 有一個功能就是可以配合系統的語系顯示目錄的名稱系統面上 OS X 提供了一層抽象層，區隔出「真正的檔案名稱」與「Finder 顯示的名稱」比方說 Applications 在 Finder 會顯示成「應用程式」或者 Library 會顯示成 「資源庫」以下是在 OS X 做多語系的方法應用程式名稱多語系化應用程式要多語系要在 Info.plist 裡先加入 LSHasLocalizedDisplayName，type 是 boolean，value 是 true然後在 Resources 裡的多語系資料夾 ( 比方說 zh_TW.lproj ) 的 InfoPlist.strings 加入一個 key name 是 CFBundleDisplayName，裡面填想要的名稱就可以了資料夾名稱多語系化想要多語系化資料夾，只要在資料夾底下建立 .localized 的子目錄，裡面加入兩個字母的語言縮寫跟 .strings 為附檔名的文字檔即可比方說底下包含了日文、德文跟英文的多語系化每個 .strings 檔案裡包含了原始的名稱跟多語系化的名稱比方說要對應 Foo 資料夾到「系統」所以要恢復 Applications 變成「應用程式」只要在 ~/Applications/ 底下建立 .localized 的子目錄 (或者檔案) 即可恢復 (不用在深入建立資料夾因為 OS X 有預設內建一些對應的名稱在 /System/Library/CoreServices/SystemFolderLocalizations )","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://blog.littlero.se/tags/Mac/"},{"name":"i18n","slug":"i18n","permalink":"https://blog.littlero.se/tags/i18n/"}]},{"title":"Compile Objective-C on Gentoo","slug":"compile-objective-c-on-gentoo","date":"2011-05-27T16:00:00.000Z","updated":"2015-03-14T05:39:05.000Z","comments":false,"path":"post/compile-objective-c-on-gentoo/","link":"","permalink":"https://blog.littlero.se/post/compile-objective-c-on-gentoo/","excerpt":"要寫 Objective-C 的程式理所當然的要在 Mac OS X 上 XD不過有時候想學而手邊沒有 Mac 的話也可以在 Linux / Windows 開發這一切都要感謝 GNUStep 的計畫在 Gentoo 上如果只是要開發 non-GUI 的程式只要安裝 gnustep-base/gnustep-base 即可會連帶安裝 gnustep-base/gnustep-make都裝好後我們就可以開始寫啦!","text":"要寫 Objective-C 的程式理所當然的要在 Mac OS X 上 XD不過有時候想學而手邊沒有 Mac 的話也可以在 Linux / Windows 開發這一切都要感謝 GNUStep 的計畫在 Gentoo 上如果只是要開發 non-GUI 的程式只要安裝 gnustep-base/gnustep-base 即可會連帶安裝 gnustep-base/gnustep-make都裝好後我們就可以開始寫啦!一個最簡單的 Objective-C 如下至於要編譯他的方法指令如下很簡單吧！如果想要看完整的參數請參考 gnustep-config –help但是這樣每次要 build 好像都很麻煩要多打好多東西所以建立一個簡單的 script這樣下次要 build 只要打 build_objc.sh file如果想要開發圖形介面 需要多安裝 gnustep-base/gnustep-gui然後編譯變成要打 gcc `gnustep-config –debug-flags` -o main main.m `gnustep-config –gui-libs`","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"Gentoo","slug":"Gentoo","permalink":"https://blog.littlero.se/tags/Gentoo/"},{"name":"obj-c","slug":"obj-c","permalink":"https://blog.littlero.se/tags/obj-c/"}]},{"title":"Unix 另一個分段下載程式(也是 bt downloader) - aria2","slug":"unix-bt-downloader-aria2","date":"2011-05-19T16:00:00.000Z","updated":"2015-03-14T05:42:38.000Z","comments":false,"path":"post/unix-bt-downloader-aria2/","link":"","permalink":"https://blog.littlero.se/post/unix-bt-downloader-aria2/","excerpt":"之前我在 Gentoo 上因為 portage 都要下載原始碼做編譯安裝的動作所以為了加快下載會另外安裝 axel但是今天我發現有更多功能的程式可以用 (顯然違背 Unix 哲學 do one thing and do it well)不過不管哪個 反正好用的程式一定要多推廣的 XD就是 aria2他具有以下特色","text":"之前我在 Gentoo 上因為 portage 都要下載原始碼做編譯安裝的動作所以為了加快下載會另外安裝 axel但是今天我發現有更多功能的程式可以用 (顯然違背 Unix 哲學 do one thing and do it well)不過不管哪個 反正好用的程式一定要多推廣的 XD就是 aria2他具有以下特色支援 HTTP/HTTPS/FTP/BitTorrent支援多段下載所以就把它裝起來吧然後修改 /etc/make.conf 加入下段然後下次在 emerge 的時候就會改用 aria2 下載啦~","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"Gentoo","slug":"Gentoo","permalink":"https://blog.littlero.se/tags/Gentoo/"}]},{"title":"moinmoin wiki 跟 trac 改吃 NIS","slug":"moinmoin-wiki-trac-nis","date":"2011-05-13T16:00:00.000Z","updated":"2015-03-14T05:40:51.000Z","comments":false,"path":"post/moinmoin-wiki-trac-nis/","link":"","permalink":"https://blog.littlero.se/post/moinmoin-wiki-trac-nis/","excerpt":"最近敝單位正在將原本用 OpenLDAP 的認證方式轉成 Windows AD因為接下來還會進一步導入 VMware ViewView 限制要吃 Windows AD 的帳號 所以學長說就都改用 Windows AD 吧 反正 Windows AD 可以把 帳號密碼跟群組用 NIS 的方式吐給 Unix 吃ssh 登入吃 NIS 非常方便 敝單位現在都用 SLES11 所以用 yast 新增一下就好了!這樣 svn 就不會有問題了然後原本敝單位還有採用 trac 來做 ticket 追蹤與 moinmoin wiki 當做大家的筆記以下是如何設定這兩個讓他們可以吃到 NIS 的帳號","text":"最近敝單位正在將原本用 OpenLDAP 的認證方式轉成 Windows AD因為接下來還會進一步導入 VMware ViewView 限制要吃 Windows AD 的帳號 所以學長說就都改用 Windows AD 吧 反正 Windows AD 可以把 帳號密碼跟群組用 NIS 的方式吐給 Unix 吃ssh 登入吃 NIS 非常方便 敝單位現在都用 SLES11 所以用 yast 新增一下就好了!這樣 svn 就不會有問題了然後原本敝單位還有採用 trac 來做 ticket 追蹤與 moinmoin wiki 當做大家的筆記以下是如何設定這兩個讓他們可以吃到 NIS 的帳號首先是先改 moinmoin看到 python lib 的路徑/site-packages/moin-1.9.2-py2.6.egg/share/moin/wikiconfig.py把原本 LDAPAuth 的部份改成如下接下來是 tractrac 的 LDAP 似乎有很多 plugin 不過都大同小異我們只要把 [ldap] 的部份改成如下即可這樣就可以用 Windows AD 的帳號密碼登入了！同場加映 把 cacti 也改吃 NIS看之前我上司的文章就好 XDcacti authentication with LDAP後記如果 Windows 的帳號有 “使用者必須在下次登入時變更密碼” 的帳戶選項 那個使用者將會登入不了!(Both trac and moinmoin) (不過在 ssh 登入卻可以 = = 也太怪了)","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"moinmoin","slug":"moinmoin","permalink":"https://blog.littlero.se/tags/moinmoin/"},{"name":"trac","slug":"trac","permalink":"https://blog.littlero.se/tags/trac/"},{"name":"NIS","slug":"NIS","permalink":"https://blog.littlero.se/tags/NIS/"}]},{"title":"nodejs performance compare with PHP","slug":"node-performance-compare-with-php","date":"2011-05-09T16:00:00.000Z","updated":"2018-06-07T16:24:38.000Z","comments":false,"path":"post/node-performance-compare-with-php/","link":"","permalink":"https://blog.littlero.se/post/node-performance-compare-with-php/","excerpt":"常言道 V8 超快 XD所以心中一直有疑惑, 到底是快到哪裡去 = =node.js 真的有比其他的快嘛?所以做了一點小實驗比較 node.js 跟 php 的 performance","text":"常言道 V8 超快 XD所以心中一直有疑惑, 到底是快到哪裡去 = =node.js 真的有比其他的快嘛?所以做了一點小實驗比較 node.js 跟 php 的 performance採用的軟體如下Linux Kernel : 2.6.38-gentoo-r3 compiled with non-preemptiveweb server : nginx 0.8.53php version : PHP 5.3.6-pl1-gentoo running on php-fpm with port 8000node.js : v0.4.7php 的程式碼如下我們利用 ab (apache benchmark program)Concurrency Level 是 200Total 打 10000 次得到的資訊如下這裡可能會有人有疑惑說為什麼 php 不要用 unix socket 要用 tpc/ip socket 跑因為我發現 php-fpm 綁在 unix socket 結果當 concurrency 是 200 時有一半以上不是回傳 200 ok但是 concurrency 降到 100 時候又全部 ok反正怪怪的 後來綁 tcp/ip 的就都 ok 了! (當然效能會折損)所以 php-fpm 綁 port 8000 然後下面介紹的 node.js 是綁在 port 3000nginx 都用 proxy_pass mode而 node.js 的程式如下結果如下我大概前後都各跑了 5 次 結果數值都差不多我們可以發現 node.js on V8 比 php 快一點點 不管在 RPS (Requests per second) 或者是 Processing 上都快一點點不過比較奇怪的是最長的時間都是三秒多 XD 是 nginx 的問題嘛 - - 承受不了這麼多 request至於在 CPU 跟記憶體的比較上 我覺得好像差不多耶 沒有很明顯的差距拉出來然後我又做了一點點小延伸 這次我裝了 node.js 的 framework Express然後一樣的 output , app.js 的部份程式碼如下得到的結果是這樣效能大概降了 30% 有吧 蠻慘的 XD遠輸於 php 不過我沒有跑 Zend 試看看 我想一但有 framework 上去 不管什麼都會變慢吧尤其是 routing 最麻煩 所以應該都會慢很多所以結論是原生的 node.js 是比 php 快一點點的 (約 5%)後記:這裡有一篇類似的 不過他打的數量好高 * *Benchmarking Node.js – basic performance tests against Apache + PHP","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.littlero.se/tags/nginx/"},{"name":"nodejs","slug":"nodejs","permalink":"https://blog.littlero.se/tags/nodejs/"},{"name":"php","slug":"php","permalink":"https://blog.littlero.se/tags/php/"}]},{"title":"node.js with Express, Jade, Stylus and CoffeeScript","slug":"node-js-with-express-jade-stylus-and-coffeescript","date":"2011-05-02T16:00:00.000Z","updated":"2015-03-14T05:41:42.000Z","comments":false,"path":"post/node-js-with-express-jade-stylus-and-coffeescript/","link":"","permalink":"https://blog.littlero.se/post/node-js-with-express-jade-stylus-and-coffeescript/","excerpt":"好像不用 node.js 寫一些小東西感覺不出來他的威力 而且小郭說每次 Demo 都用 Hello World!所以決定動手寫一個小小的留言板搭配的 Framework 有 Express CoffeeScript Jade Stylus這些 Framework 功能如下Express : 是 node.js 的 Web FrameworkCoffeeScript : 是快速產生 Javascript 的好物！Jade : HTML 的 Template EngineStylus : dynamic stylesheet 簡單的語言產生 css功能有新增留言修改留言刪除留言Demo site 在 Cloud Foundry是透過 VMware 的 Cloud Foundry 執行的Source Code 在 GitHub以下是說明","text":"好像不用 node.js 寫一些小東西感覺不出來他的威力 而且小郭說每次 Demo 都用 Hello World!所以決定動手寫一個小小的留言板搭配的 Framework 有 Express CoffeeScript Jade Stylus這些 Framework 功能如下Express : 是 node.js 的 Web FrameworkCoffeeScript : 是快速產生 Javascript 的好物！Jade : HTML 的 Template EngineStylus : dynamic stylesheet 簡單的語言產生 css功能有新增留言修改留言刪除留言Demo site 在 Cloud Foundry是透過 VMware 的 Cloud Foundry 執行的Source Code 在 GitHub以下是說明首先請先確認你的環境已經裝好 node.js, npm, 與 Express接下來在想要的目錄輸入會產生如下的目錄架構大概就是這樣其中的 app.js 就是主程式裡面包含了 routing 也是 controller順帶一提的是 Express 沒有什麼 MVC 的架構 (或者說可以自己切 XD) 感覺上他只有包含了 Controller 跟 View因為我們的計畫跑在 VMware Cloud Foundry 上, 所以要加上 package.json 內容如下再下指令npm 1.0 之後用 npm install -dnpm 就會幫我們把需要的 Framework 通通裝到 node_modules 裡了所以目前目錄結構如下都準備好之後終於可以開始寫程式了 XD因為 express 在產生目錄時我們有指定 jade 跟 stylus 當 html 跟 css 的 engine 但是 CoffeeScript 還沒有指定所以為了讓 Express 能吃到 CoffeeScript 所以我們先在 app.js 的 app.configure 裡加上一行 app.use(express.compiler({src: __dirname + ‘/public’, enable: [‘coffeescript’]}));也就是會長這樣拉 這是 app.js 的片段而已所以這樣一來我們的環境也就是 express 就可以支援.jade 都放在 ./views 底下 由 Jade 翻譯.styl 都放在 ./public/stylesheets 底下 由 Stylus 翻譯.coffee 都放在 ./public/javascripts 底下 由 CoffeeScript 翻譯另外為了讓我們的環境可以吃 npm bundle 包的內容以及準備一些環境變數我們把 app.js 開頭改成express 的 Controller-View 的 架構非常簡單以下圖來說 (取自 app.js 的一段) app.get(參數 1, 參數 2) 的 參數 1 是接收的網址 比方說 當網址是 http://xxxxx/ 而且方法是 Get 時就會交由這個 Controller 的 參數 2 去處理 ( 參數 2 必須是 function!) res.render(參數 1, 參數 2) 的 參數 1 是告訴 Jade 要用哪一個 template 去 render 結果上圖表示要用 index.jade 去 render 結果 res.render(參數 1, 參數 2) 的 參數 2 就是傳遞給 index.jade 的變數 type 必須是 JSON Controller 跟 View 的合作很簡單吧 接下來我們看一下 View 怎麼做的首先看 ./views/layout.jade第一行的 !!! 5 表示要用 html5 的 doctype 輸出!再來是 ./views/index.jade如果剛剛 res.render 參數 2 的 JSON 裡沒有 layout:false 則所有的結果都會是 layout.jade + 參數 1.jade 輸出所以以剛剛的範例來說 title: ‘Hello Cloud Foundry’ 就會被 layout.jade 的 title= title 吃走而 articles: articles 就會被 index.jade 裡面 - each article, key in articles 的 articles 吃走詳細的 Jade 使用方法可以參考 Jade 官網因為要寫出類似留言板的網站所以我們要一個存檔的功能接下來我們來新增一個 save 的 Controller 方法是 POST 收的參數有一個就是 textarea 裡的 value 啦所以請在 app.js 裡新增 一個 app.post(‘/save’, function(){}) 的 method 如下POST 或 GET 收進來的變數都會由 req.body.[變數] 來取得這邊的設計上 db 裡每一筆資料都是 JSON 裡面有兩個資料 一個是文章 id (由 md5 hash) 是做刪除用的 另一個是文章內容 content而 render 的結果是由 save.jade 處理所以 res.render 的 參數 1 我們填 ‘save’參數 2 必須是個 JSON 我們傳了三個東西id : 文章 idcontent : 文章內容layout : 要不要套用 layout.jade, 這裡是 false 表示單純輸出 save.jade 的內容就好BTW, 這邊的 db 其實我是用 array 做的 可以參考 app.js 因為 VMware Cloud Foundry 目前還沒支援任何 database (之後會有 MySQL, Redis, 和 MongoDB 的支援)再來我們看一下 save.jade 吧原理很簡單 就是把整塊 div 回傳回去到網頁端的 javascript 直接整個 append 上去就好 (簡單來說我把它當 template 用 XD)再來進階一點我們還想要有修改的功能 一樣的 Controller 只是變成判斷有沒有 文章 id 如果有的話就進去 db 尋找 id 有沒有 match 有的話就修改他 沒有文章 id 表示新增文章 因此 Controller 變成這樣最後我們來稍微看一下 Stylus 跟 CoffeeScript 吧首先是 ./public/stylesheets/style.stylStylus 翻譯出來就變這樣!P.S. 我有偷偷修改 app.js 的 app.configure 裡面的 Stylus 加上了 compress : true 讓 translate 出來的 css 有壓縮!至於 javascript 的處理 我們看 ./public/javascripts/hello.coffeeㄜ… 這邊要解釋起來有點囉嗦改天再寫一篇 blog 目前請各位去看 docs 吧 XDCoffeeScript 翻譯過的結果就是這樣很酷 對吧! Comments Tim Wu 呵! 正在看這方面的資料, 想不到台灣有人 try 這麼快.","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://blog.littlero.se/tags/nodejs/"}]},{"title":"利用 nodejs 與 express 建立基本網站","slug":"build-website-with-nodejs-express","date":"2011-04-23T16:00:00.000Z","updated":"2015-03-14T05:38:07.000Z","comments":false,"path":"post/build-website-with-nodejs-express/","link":"","permalink":"https://blog.littlero.se/post/build-website-with-nodejs-express/","excerpt":"Node.js 可以說是今年蠻具有話題性的 server side 技術在官方網頁上可以看到大大的 Evented I/O for V8 JavaScript簡單來說她利用了 V8 Javascript Engine 的高速性能 加上了 non-blocking I/O 造就了特殊的程式樂趣沒想到 javascript 除了 client 端 也可以寫 server 端的程式原生的 node.js 就可以產生 server不過當然搭配一些 framework 會讓我們寫程式更輕鬆啦目前跟 node.js 搭配的 framework 有三種1. Express主要提供 view helper 跟 routing2. Jade是一個 html 的 template engine 可以減少很多寫 html 的工3. Stylus類似 ruby 的 Sass 可以用來快速產生 css","text":"Node.js 可以說是今年蠻具有話題性的 server side 技術在官方網頁上可以看到大大的 Evented I/O for V8 JavaScript簡單來說她利用了 V8 Javascript Engine 的高速性能 加上了 non-blocking I/O 造就了特殊的程式樂趣沒想到 javascript 除了 client 端 也可以寫 server 端的程式原生的 node.js 就可以產生 server不過當然搭配一些 framework 會讓我們寫程式更輕鬆啦目前跟 node.js 搭配的 framework 有三種1. Express主要提供 view helper 跟 routing2. Jade是一個 html 的 template engine 可以減少很多寫 html 的工3. Stylus類似 ruby 的 Sass 可以用來快速產生 css首先用 npm 裝好這三種然後隨便開一個資料夾吧就叫做 express_demo 然後進去接下來利用 express 幫我們快速產生基本架構!(-t 表示指定 html template engine; -c 是 css style)如下圖基本上 view 就都在 views/ 這個資料夾裡了 目前看到有 index.jade 與 layout.jade現在直接打 node app.js 基本上就會 run 起一個基本的 express 的應用程式了!不過假設我們想要 deploy 到 Cloud Foundry 一樣先編輯一個 package.json 如下然後再下npm 1.0 之後要改用 npm install -d一樣會噴一堆 info 不過基本上就是把 express, jade, stylus 跟其相依的 libs 都放進去 node_modules 裡這時候一樣改 app.js 在最前面加入 require.paths.unshift(‘./node_modules’);然後原本的 app.listen(3000); 改成 app.listen(process.env.VMC_APP_PORT||3000);這樣就可以準備發包到 Cloud Foundry 啦~我們來改一下 views/index.jade 好了改成如下存檔後發佈上去 Cloud Foundry (vmc update &lt;name&gt;)範例網址在 這裡如果要進階一點的話就是在 views 裡加額外的 .jade 頁面然後再 app.js 裡增加 routing 規則 app.get(‘/about’, function(req, res){ res.render(‘about’ …. blahblah這邊的 render(‘about’) 就會自動對應到 views 裡的 about.jade 了!然後 stylus 要改的話則是到 publics/stylesheets/style.styl 修改!BTW, 原本的 jade 是用 !!! 會產生 XHTML 我們建議改用 HTML5 所以請至 views/layout.jade 把第一行的 !!! 改成 !!! 5 這樣 Jade 就會產生 HTML 5 了","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://blog.littlero.se/tags/nodejs/"}]},{"title":"VMware Cloud Foundry 試玩小小小之在小不過的心得","slug":"vmware-cloud-foundry","date":"2011-04-22T16:00:00.000Z","updated":"2015-03-14T05:43:07.000Z","comments":false,"path":"post/vmware-cloud-foundry/","link":"","permalink":"https://blog.littlero.se/post/vmware-cloud-foundry/","excerpt":"話說十天前看到了 Cloud Foundry 的網頁 可以 Request an invite account 當下馬上就申請了一個 XD他的特色是… 就是 VMware 的雲 沒了! 屬於 PaaS (Platform as a Service) 最大的特色應該算是他們強調是 Open 的 (Open Source !) 主要是社群維護 cloudfoundry.org Source Code 在這裡 不過在 VMware 的平台 (cloudfoundry.com) 上營運要付錢 所以免費版就是下載回去自己架起來 XD (目前是 Beta 一切免費！)目前支援 Java, Ruby, Node.js (via FAQ)資料庫選擇有 MongoDB、MySQL 和 RedisJava 的話可以搭配 Spring 或其他 JVM 可以吃的 frameworkRuby 可以選用 Rails 或者 Sinatra (沒玩過 Sinatra 可是看起來好像很簡單耶)Node.js 則可以原生就可以支援或者搭配 express 與 npm 的 bundle然後九天後…也就是昨天晚上就收到通知信啦！今天早上馬上來試玩一下以下是小小小小小小試玩心得 歡迎切磋指教 :P","text":"話說十天前看到了 Cloud Foundry 的網頁 可以 Request an invite account 當下馬上就申請了一個 XD他的特色是… 就是 VMware 的雲 沒了! 屬於 PaaS (Platform as a Service) 最大的特色應該算是他們強調是 Open 的 (Open Source !) 主要是社群維護 cloudfoundry.org Source Code 在這裡 不過在 VMware 的平台 (cloudfoundry.com) 上營運要付錢 所以免費版就是下載回去自己架起來 XD (目前是 Beta 一切免費！)目前支援 Java, Ruby, Node.js (via FAQ)資料庫選擇有 MongoDB、MySQL 和 RedisJava 的話可以搭配 Spring 或其他 JVM 可以吃的 frameworkRuby 可以選用 Rails 或者 Sinatra (沒玩過 Sinatra 可是看起來好像很簡單耶)Node.js 則可以原生就可以支援或者搭配 express 與 npm 的 bundle然後九天後…也就是昨天晚上就收到通知信啦！今天早上馬上來試玩一下以下是小小小小小小試玩心得 歡迎切磋指教 :P 參考 VMware 官方手冊首先要裝好 rubygems(建議 Mac OS X 的用戶先更新 RubyGems) 因為 小於 RubyGems 1.3.6 都很 buggy (SnowLeopard 搭載 1.3.5) via Gems, Eggs and Perl Modules 升級指令也可以參考這裡裝好 gem 後打就是這麼簡單 VMware Cloud Foundry 的控制指令 - vmc 就裝好了首先要登入login 時會問 帳號 密碼接下來介紹如何 deploy node.js 順便帶過一些基本指令 (我想 Ruby on Rails 很多人玩眾高手比我熟 - - Java Spring 我不會 XD)首先 node.js 要搭配 npm bundle 所以先裝一下 npm 吧準備好 npm 後建立一個資料夾 (資料夾名稱跟計畫可以無關)如果是 node.js 的程式的話主程式一定要叫做 app.js (VMware Cloud Foundry 的要求 - -)所以先編輯 app.js內容先隨便寫吧 依照標準的 express 的 demo 就是然後編輯一個 package.json (給 npm 的 package 看的)填入下列內容所以我們的目錄現在是長這樣…接下來就是產生 bundle 啦 在同一個目錄下打npm 就會自己產生一堆鬼 info ~ (略…)成功後在看看資料夾變成這樣了!主要就是多了 hello.js 跟 node_modules 的資料夾這時候我們回頭改一下 app.js在最前面加入 require.paths.unshift(‘./node_modules’)最後面的 app.listen(3000); 改成 app.listen(process.env.VMC_APP_PORT||3000);也就是完整的檔案如下這樣就全部準備完成啦 可以 deploy 到 VMware Cloud Foundry 上了同樣在 hello 的資料夾下打 vmc push (表示要新增計畫)他會互動式的問一些問題 比方說計畫名稱 (管理用的) deploy 的網址 偵測程式的 type (Node.js/Ruby/Java) Memory 用量 如下圖成功後就可以到你設定的網址去看成果了!最後 如果計畫案有修改想要更新的話一樣先打 npm bundle 之後指令是 vmc update &lt;appname&gt; (比方說 nodejs-hello)其他的指令就打 vmc help 看吧重要的大概就start &lt;appname&gt; Start the applicationstop &lt;appname&gt; Stop the applicationrestart &lt;appname&gt; Restart the applicationdelete &lt;appname&gt; Delete the applicationrename &lt;appname&gt; &lt;newname&gt; Rename the application","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://blog.littlero.se/tags/nodejs/"},{"name":"VMware","slug":"VMware","permalink":"https://blog.littlero.se/tags/VMware/"}]},{"title":"在 Mac OS X 轉 dmg 成 iso 檔","slug":"mac-os-x-dmg-convert-to-iso","date":"2011-04-14T16:00:00.000Z","updated":"2015-03-14T05:40:48.000Z","comments":false,"path":"post/mac-os-x-dmg-convert-to-iso/","link":"","permalink":"https://blog.littlero.se/post/mac-os-x-dmg-convert-to-iso/","excerpt":"dmg (Disk iMaGe) 可以說是 Mac OS X 最常見的磁碟影像檔但是在其他的作業系統似乎 iso 更常見而 Mac 本身就提供了 iso 轉檔的功能 指令如下","text":"dmg (Disk iMaGe) 可以說是 Mac OS X 最常見的磁碟影像檔但是在其他的作業系統似乎 iso 更常見而 Mac 本身就提供了 iso 轉檔的功能 指令如下輸入完之後會生成 imagefile.iso.cdr (真奇怪明明說 output 是 imagefile.iso 硬要多 cdr)所以完成！","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://blog.littlero.se/tags/Mac/"}]},{"title":"trac, moinmoin wiki 與 svn 搬移與安裝的三兩事(二)","slug":"trac-moinmoin-wiki-svn-2","date":"2011-04-12T16:00:00.000Z","updated":"2015-03-14T05:42:28.000Z","comments":false,"path":"post/trac-moinmoin-wiki-svn-2/","link":"","permalink":"https://blog.littlero.se/post/trac-moinmoin-wiki-svn-2/","excerpt":"一 講完了 trac 與 moinmoin 之後二 這篇要講的是有關 svn敝單位有使用 LDAP 當做帳號管理所以要走 ssh+svn 的話首先要建立 LDAP 的認證機制因為是用 SLES 所以設定也不難 用 yast 建立就好了","text":"一 講完了 trac 與 moinmoin 之後二 這篇要講的是有關 svn敝單位有使用 LDAP 當做帳號管理所以要走 ssh+svn 的話首先要建立 LDAP 的認證機制因為是用 SLES 所以設定也不難 用 yast 建立就好了進去 yast 的 User and Group Administration 的功能 然後再 Authentication Settings 那邊設定 LDAP 認證基本上就是把 LDAP server ip 跟 LDAP Base DN 填進去然後按下一步 yast 會先裝好兩三個套件 (pam_ldap nss_ldap)~如果要調整更詳細的資訊就到 /etc/ldap.conf 這個檔案修改然後再修改這隻 /etc/nsswitch.conf 檔案 如下然後測試看看看看有沒有 LDAP 的帳號就知道有沒有成功了成功的話基本上 ssh 就可以吃到 LDAP 的帳號先複習一下 svn 相關資訊首先 svn 的資料假設放在 /home/svn (權限要隸屬於 svn:svn)然後程式的部份在 /usr/bin/svnserve但是因為我們要用 ssh+svn 的方式 所以要動一點小手腳首先 vi /usr/local/bin/svnserve裡面的內容是這樣透過 umask 002 去執行 svnserve 時候權限才不會有問題然後 chmod +x /usr/local/bin/svnserve這樣 svn server 也都設定好了 因為透過 ssh+svn 所以不需要啟動 svn 的 server","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"moinmoin","slug":"moinmoin","permalink":"https://blog.littlero.se/tags/moinmoin/"},{"name":"trac","slug":"trac","permalink":"https://blog.littlero.se/tags/trac/"},{"name":"svn","slug":"svn","permalink":"https://blog.littlero.se/tags/svn/"}]},{"title":"trac, moinmoin wiki 與 svn 搬移與安裝的三兩事(一)","slug":"trac-moinmoin-wiki-svn-1","date":"2011-04-11T16:00:00.000Z","updated":"2020-12-02T07:25:47.789Z","comments":false,"path":"post/trac-moinmoin-wiki-svn-1/","link":"","permalink":"https://blog.littlero.se/post/trac-moinmoin-wiki-svn-1/","excerpt":"最近在搬移 trac, moinmoin wiki 與 svn server 這篇文章記錄一下過程原本的舊 server 是跑 apache由於新的 server 是 VM 所以我覺得選用比較 light weight 的 nginx 似乎比較好首先先講解在新的 server 重新建立環境1. nginx 的安裝首先到 nginx 下載頁 下載 (BTW 今天剛好釋出 1.0 萬歲)","text":"最近在搬移 trac, moinmoin wiki 與 svn server 這篇文章記錄一下過程原本的舊 server 是跑 apache由於新的 server 是 VM 所以我覺得選用比較 light weight 的 nginx 似乎比較好首先先講解在新的 server 重新建立環境1. nginx 的安裝首先到 nginx 下載頁 下載 (BTW 今天剛好釋出 1.0 萬歲)然後依序解壓縮並且 compile 與安裝到指定位置 (敝單位 自己安裝的程式習慣裝在 /home 下面)這樣 nginx 就會裝好在 /home/nginx 底下了設定檔會在 /home/nginx/conf/nginx.conf 這裡2. uWSGI 安裝因為 trac 跟 moinmoin 都是 python 所以要找一個適合他們的 cgi 給 nginx 接而 uWSGI 似乎是不錯的選擇而且 nginx 也有原生的 uwsgi module所以一樣依照下列步驟裝起來make 完之後就會在同一個目錄下產生出 uwsgi 的執行檔在手動複製到想要的地方即可3. subversion 安裝基本上用套件管理程式裝一下就好了 敝單位目前都採用 SLES11sp1 所以指令如下4. trac 的安裝trac 要安裝可以參考這裡大概就是用 easy_install 就全部搞定了5. moinmoin wiki 的安裝首先到 http://static.moinmo.in/files/moin-1.9.3.tar.gz 抓 source 在用 python install 即可這樣 moinmoin 應該會被裝在 /usr/local/lib64/python2.6/site-packages/moin-1.9.2-py2.6.egg 之類的路徑 (SLES11sp1 是 x64 的)五個都準備好了之後就開始來搬移啦首先摘要一下搬移的方法1. trac基本上 trac 要搬移是最簡單的 把原本的目錄直接搬移過來就好了 (假設原本 trac 的 db 是用 sqlite 不然的話要連資料庫的檔案都一起搬) 所以指令大概如下在 /home/www這樣 trac 整個目錄就會被抓過來本地端了 (假設 trac 底下只有一個計畫案叫 xuite 的資料夾)2. moinmoin wikimoinmoin wiki 要搬移跟 trac 一樣簡單 基本上只要抓 moinmoin wiki 的 data 那個資料夾就夠了!在 /home/moin 底下qweqweqe這樣 data 整個目錄就會被抓過來本地端了3. svn 備份 svn 的搬移顯然不能直接複製目錄 參考這篇文章先在舊的 server dump 出資料然後再新的 server 抓 dump 的檔案回來後 倒回去稍微把權限給設定一下 首先先建立 nginx 的使用者 (與群組 [非必要]) 修復一下權限這麼一來檔案也都準備好了 開始準備建立 server 吧!稍微整理一下 假設我們的資料目錄分別是1. trac 的在 /home/www/trac/xuite2. wiki 的在 /home/moin/data3. svn 的在 /home/svn然後程式的部份1. nginx 在 /home/nginx2. trac 跟 moinmoin wiki 的 egg 應該會被裝在 /usr/local/lib64/python2.6/site-packages/前面提過 trac 跟 wiki 要用 uwsgi 跑起來 所以首先我們來設定 uwsgi 吧trac on uwsgi首先要先讓 trac generate 出 uwsgi 可以吃的設定檔所以先移動到 /home/www/trac這個指令會 generate 出各種 cgi 的設定檔 ( /home/www/trac/xuite/cgi-bin ) 與一些 static file ( js,css, etc. ) (/home/www/trac/xuite/htdocs ) 提供伺服器做網址與資料夾的 alias 用於是 uwsgi 可以用的檔案就會產生在 /home/www/trac/xuite/cgi-bin/trac.wsgi有了這個檔案我們就可以 run uwsgi 了注意! 要用 nginx 這個使用者 run 程式moinmoin on uwsgi在 run moinmoin 之前有一些設定檔要設定首先然後修改 /usr/local/lib64/python2.6/site-packages/moin-1.9.2-py2.6.egg/share/moin/moin.wsgi 裡的一部分 修改處如下然後 /usr/local/lib64/python2.6/site-packages/moin-1.9.2-py2.6.egg/share/moin/wikiconfig.py 也要做客製化的修改改完這兩個檔案後接下來就可以準備跑 uwsgi 了moinmoin 本身已經有 wsgi 的設定所以直接執行吧!如果需要 uwsgi 的最佳化可以自行查詢 uWSGI docs 所以目前我們有兩個 server 分別 listen 在 /tmp/trac.sock 與 /tmp/moin.sock接下來就是如何把 nginx 對應到這兩個 sock 上基本上在 nginx 的 server { } 那一段裡設定如下location ^~ /trac/xuite 與 location ^~ /xwiki 那兩段是把 網址分別像 http://xxxx/trac/xuite 與 http://xxxx/xwiki 送往對應的 sock 去處理 (因為要保留與舊的網址相容)設定裡都有一個 uwsgi_param SCRIPT_NAME 與 uwsgi_modifier1 30 是因為網址前面有 prefix 提醒 nginx 要記得加 prefix而 location ^~ /trac/xuite/chrome 與 location ^~ /xwiki/moin_static192 則是把 static files 做 alias 加速處理 不要送給 uwsgi 浪費資源並且加上 expires 的 header 節省網路傳輸資源都設定好之後就起動 nginx 吧然後測試網址 http://xxxx/trac/xuite 與 http://xxxx/xwiki 應該就可以看到對應的 trac 與 moinmoin wiki 的畫面了","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"moinmoin","slug":"moinmoin","permalink":"https://blog.littlero.se/tags/moinmoin/"},{"name":"trac","slug":"trac","permalink":"https://blog.littlero.se/tags/trac/"},{"name":"svn","slug":"svn","permalink":"https://blog.littlero.se/tags/svn/"}]},{"title":"讓 php 回 304 Not Modified","slug":"php-304-not-modified","date":"2011-04-08T16:00:00.000Z","updated":"2015-03-14T05:41:57.000Z","comments":false,"path":"post/php-304-not-modified/","link":"","permalink":"https://blog.littlero.se/post/php-304-not-modified/","excerpt":"在 Google Page Speed 的要點裡 有提到 減少要求 request 的數量這樣的話會有兩種作法deploy 時合併成一支大的 .js透過 php 把要求的 js 合併一次傳送出去但是前者失去了彈性，假設我們有十種不同的元件 ( js 檔)，因為不是每次都需要這十種元件的功能，所以不可能每次都 loading 這十隻，如果要選擇性的 loading 就要把全部的組合都合併出來，這樣的排列組合未免也太恐怖了。因此實務上會寫一支 php (姑且稱之 combo loader)，透過傳遞不同的 js 元件需求，這隻 combo loader 可以輕鬆的組合出想要的元件。並且可以把合併的結果 cache 起來，下次遇到一樣的需求就不必再重新組合了。因此程式碼大概會長這樣。","text":"在 Google Page Speed 的要點裡 有提到 減少要求 request 的數量這樣的話會有兩種作法deploy 時合併成一支大的 .js透過 php 把要求的 js 合併一次傳送出去但是前者失去了彈性，假設我們有十種不同的元件 ( js 檔)，因為不是每次都需要這十種元件的功能，所以不可能每次都 loading 這十隻，如果要選擇性的 loading 就要把全部的組合都合併出來，這樣的排列組合未免也太恐怖了。因此實務上會寫一支 php (姑且稱之 combo loader)，透過傳遞不同的 js 元件需求，這隻 combo loader 可以輕鬆的組合出想要的元件。並且可以把合併的結果 cache 起來，下次遇到一樣的需求就不必再重新組合了。因此程式碼大概會長這樣。但是這樣做每次要資料都還是會回應 200 OK 而不能像 js 或 css 回應 304 Not Modified所以我們還要在動一些手腳把回應的 header 加 Expires 跟 Last-Modified 因此大概變成如下這樣下次有同樣的 request 近來 php 就會先檢查 HTTP_IF_MODIFIED_SINCE 然後透過比對修改的時間決定要回 304 還是重新出檔案了!當然 request 可能會長成這樣或者防止瀏覽器的 cache 也可以像這樣 loading最後差異如下從 132KB 降到 180B ~","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"php","slug":"php","permalink":"https://blog.littlero.se/tags/php/"}]},{"title":"在 SLES 11 SP1 追加 repository","slug":"add-sles-11-sp1-repository","date":"2011-04-01T16:00:00.000Z","updated":"2015-03-14T05:37:57.000Z","comments":false,"path":"post/add-sles-11-sp1-repository/","link":"","permalink":"https://blog.littlero.se/post/add-sles-11-sp1-repository/","excerpt":"最近敝單位在更新一些機器，長官決定採用 SLES (SUSE Linux Enterprise Sever)不過我最熟悉的其實是 Gentoo 對於其他 distro 像 SLES, Ubuntu 之類的都不熟所以大概花了一整個禮拜在研究 SLES (目前最新的是 SLES 11 service pack 1)其實最大的問題在於軟體 (software) 的處理不同Gentoo 的 portage system 實在太強大，從版本控制到 USE 控制哪些小功能要編入而 SLES 因為是 rpm based 的系統，而且 Enterprise Server 版似乎又很保守，一堆套件不是舊就是根本沒有 囧 mm所以只能自己找 repository 了以下是新增 repository 的方法","text":"最近敝單位在更新一些機器，長官決定採用 SLES (SUSE Linux Enterprise Sever)不過我最熟悉的其實是 Gentoo 對於其他 distro 像 SLES, Ubuntu 之類的都不熟所以大概花了一整個禮拜在研究 SLES (目前最新的是 SLES 11 service pack 1)其實最大的問題在於軟體 (software) 的處理不同Gentoo 的 portage system 實在太強大，從版本控制到 USE 控制哪些小功能要編入而 SLES 因為是 rpm based 的系統，而且 Enterprise Server 版似乎又很保守，一堆套件不是舊就是根本沒有 囧 mm所以只能自己找 repository 了以下是新增 repository 的方法 首先到這裡 Software OpenSUSE 搜尋想要的軟體比方說 spawn-fcgi (這是原本 SLES 11 sp1 裡面沒有的)如圖 把 1. 2. 3. 都依序選好後 按搜尋瀏覽到想要的軟體後 對 4. 點右鍵複製網址 http://download.opensuse.org/repositories/openSUSE:/Tools/SLE_11_SP1 然後到終端機去打指令加進 repository 之後就可以用 zypper install spawn-fcgi 安裝了!","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"SUSE","slug":"SUSE","permalink":"https://blog.littlero.se/tags/SUSE/"}]},{"title":"讓應用程式都使用 Webkit Core","slug":"Mac-OS-all-applications-using-webkit-core","date":"2009-12-05T16:00:00.000Z","updated":"2020-12-02T02:11:49.497Z","comments":false,"path":"post/Mac-OS-all-applications-using-webkit-core/","link":"","permalink":"https://blog.littlero.se/post/Mac-OS-all-applications-using-webkit-core/","excerpt":"要讓比方說 Safari, MailPlane 或 CSSEdit 吃 Webkit 的核心的話其中一種方法是從終端機打開如以下設定export DYLD_FRAMEWORK_PATH=/Applications/WebKit.app/Contents/Frameworks/10.6/export WEBKIT_UNSET_DYLD_FRAMEWORK_PATH=YESopen /Applications/blahblah.app即可可是要從終端機太麻煩了對吧Mac OS X 提供更方便的方式讓全系統都套用","text":"要讓比方說 Safari, MailPlane 或 CSSEdit 吃 Webkit 的核心的話其中一種方法是從終端機打開如以下設定export DYLD_FRAMEWORK_PATH=/Applications/WebKit.app/Contents/Frameworks/10.6/export WEBKIT_UNSET_DYLD_FRAMEWORK_PATH=YESopen /Applications/blahblah.app即可可是要從終端機太麻煩了對吧Mac OS X 提供更方便的方式讓全系統都套用首先先新增 /.MacOSX 的資料夾然後建立 environment.plist 的檔案並編輯他新增兩筆以下資料 (直接新增 child 即可)“WEBKIT_UNSET_DYLD_FRAMEWORK_PATH” = YES;“DYLD_FRAMEWORK_PATH” = “/Applications/WebKit.app/Contents/Frameworks/10.6/“;登出在登入後打開 Safari 的關於 Safari 看看有沒有出現 版本 4.0.4 (6531.21.10, r51708) 後面的 r 表示 webkit core 的 release這樣就成功了","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://blog.littlero.se/tags/Mac/"}]},{"title":"XHTML: 連結開新視窗","slug":"open-link-with-new-window-in-xhtml","date":"2008-04-27T16:00:00.000Z","updated":"2015-03-14T05:41:48.000Z","comments":false,"path":"post/open-link-with-new-window-in-xhtml/","link":"","permalink":"https://blog.littlero.se/post/open-link-with-new-window-in-xhtml/","excerpt":"由於 XHTML 1.1 或 XHTML 1.0 strict 不支援 target=\"_blank\" 這種語法所以要繞過一大圈採用另一種方法 = =\"要利用 rel 這個 attribute 跟 javascript 達到 (汗... w3c 幹麼搞得那麼麻煩 QQ","text":"由於 XHTML 1.1 或 XHTML 1.0 strict 不支援 target=\"_blank\" 這種語法所以要繞過一大圈採用另一種方法 = =\"要利用 rel 這個 attribute 跟 javascript 達到 (汗... w3c 幹麼搞得那麼麻煩 QQ首先在 a 這個 tag 加上 rel=\"external\" 這項 attribute然後下列網址加上 javascript參考網址","categories":[{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.littlero.se/tags/JavaScript/"}]},{"title":"註解的編排","slug":"comment-styles","date":"2008-04-22T16:00:00.000Z","updated":"2013-01-03T07:20:22.000Z","comments":false,"path":"post/comment-styles/","link":"","permalink":"https://blog.littlero.se/post/comment-styles/","excerpt":"摘錄自 O’REILLY 的 C++ 風格與藝術程式寫越多註解的編排就越感重要尤其是程式的註解有比較大的有比較小的C++ 風格與藝術 這本書提供了一些不錯的編排方式為了以後方便起見 就先打在上面以後複製比較方便 XD","text":"摘錄自 O’REILLY 的 C++ 風格與藝術程式寫越多註解的編排就越感重要尤其是程式的註解有比較大的有比較小的C++ 風格與藝術 這本書提供了一些不錯的編排方式為了以後方便起見 就先打在上面以後複製比較方便 XD有侵權請告知 QQ版權都是 O’REILLY© 的 = =+直接複製就好 ( 雖然不知道為甚麼網頁對不齊 不過貼上去文字編輯器卻 ok = =?! )技巧一/********** 警告 : 這是警告訊息的例子 藉以引起程式設計師的注意 /技巧二//--------------------------&gt; 另一種比較不重要的警告 &lt;---------------------------技巧三//&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 主要部分開頭 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;技巧四/* 本書使用加框的註解來表示一段或整個程式的開始 *********/技巧五/-----------------------------------------------------------------&lt;br /&gt; 另一種裝飾框的方法 *-----------------------------------------------------------------/技巧六/* 這是一個部分的開始* ^^^^^^^^^^^^^^^^^^^^^ 在下面的段落中，我們解釋 該部分的任務及他是如何進行的。/技巧七/ 中等的註解，解釋接下來十幾行程式碼的作用。* 雖然沒有粗體字可用，但照樣可以 ** 強調 ** 文字*/技巧八// 最簡單的註解，解釋下一行","categories":[],"tags":[]},{"title":"Code::Blocks + SDCC","slug":"code-blocks-sdcc","date":"2008-04-08T16:00:00.000Z","updated":"2013-01-03T07:20:22.000Z","comments":false,"path":"post/code-blocks-sdcc/","link":"","permalink":"https://blog.littlero.se/post/code-blocks-sdcc/","excerpt":"前言所謂 \" 工欲善其事必先利其器 \"，在 8051 程式開發上，當然也有許多 compiler 選擇，最常見的不外乎 Keil C，但是由於 Keil C 是商業軟體要賣錢的，因此對於學生的我們似乎不是那麼適用，另外一個也是相當知名但非商業軟體的要算是 SDCC 了，由於 SDCC 本身只有 compiler 並沒有 IDE，所以在編譯程式上顯得格外麻煩。前幾天在想 Dec-C++ 可不可以跟 SDCC 整，網路搜尋似乎是有這種 plugin 的，可是我找不到了，而且 Dev-C++ 也很久沒開發了，因此想說換找另一個目前當紅的 IDE -- Code::Blocks (以下用 CodeBlocks 稱乎)，果然 CodeBlocks 有跟 SDCC 整在一起，這樣方便多了，以下將逐步介紹如何利用 CodeBlocks + SDCC 編譯出 8051 可以用的 Hex file。","text":"前言所謂 \" 工欲善其事必先利其器 \"，在 8051 程式開發上，當然也有許多 compiler 選擇，最常見的不外乎 Keil C，但是由於 Keil C 是商業軟體要賣錢的，因此對於學生的我們似乎不是那麼適用，另外一個也是相當知名但非商業軟體的要算是 SDCC 了，由於 SDCC 本身只有 compiler 並沒有 IDE，所以在編譯程式上顯得格外麻煩。前幾天在想 Dec-C++ 可不可以跟 SDCC 整，網路搜尋似乎是有這種 plugin 的，可是我找不到了，而且 Dev-C++ 也很久沒開發了，因此想說換找另一個目前當紅的 IDE -- Code::Blocks (以下用 CodeBlocks 稱乎)，果然 CodeBlocks 有跟 SDCC 整在一起，這樣方便多了，以下將逐步介紹如何利用 CodeBlocks + SDCC 編譯出 8051 可以用的 Hex file。準備軟體當然本文是介紹 Code::Blocks + SDCC 所以你的電腦要先灌好他們拉。以下是載點：Code::Blocks 8.0.2 Windows 版安裝程式SDCC Windows 版以下介紹如何安裝安裝 Code::Blocks首先開啟 Code::Blocks 安裝程式之後會看到如下的畫面。請點選 [Next]點選 [I Agree]這裡請 把 type of install 改成 Full 然後點 [Next]選一個你想要安裝的位置吧，然後就點 [Install]裝完後會問你要不要執行 Code::Blocks 先點 [否] 吧!裝完摟，點 [Next]點 [Finish]至此已經裝完 Code::Blocks 拉 在來看 SDCC 的安裝吧安裝 SDCCSDCC 的安裝非常簡單，將下載下來的 SDCC zip 檔解壓縮到 C: 底下就好拉，如下圖。利用 Code::Blocks + SDCC 編譯 8051 程式首先開啟安裝好的 Code::Blocks然後點選上圖中間的 [Create a new project]點選 [Console application] (上圖框框處) 然後點 [Go]點 [Next]選 C (因為 8051 都是寫 C 語言而已拉) 選完點 [Next]專案擺放位置，看你喜歡把專案擺在哪裡~ 設定完點 [Next]注意: Compiler 那邊請選 SDCC Compiler 選完點 [Finish] 專案就建完拉。點完 [Finish] 之後會出現三個 script warning 都點選確定吧~點完後視窗如下圖:把程式碼改成我們想要的 (這裡以實驗四為例) 貼完後向下面這樣貼完後點 [紅色框框處那個按鈕] 就可以 編譯 了! 編譯訊息如下最下面訊息欄顯示 0 error 2 warnings 我們只管有沒有 error 不管 warning 所以 0 error 表示編譯成功了 :P我們可以切回 Build log 看一下紅線處顯示了這次編出來的檔案有多大。到這裡程式是編完了。但是... 檔案在哪邊勒?!Hex file 的位置先進去專案開的位置，觀察紅線處裡面有個叫 bin 的資料夾，點進去裡面有有一個叫做 Debug 的資料夾點進去後如下圖。紅色細框處就是我們要燒錄的 Hex 檔拉，這裡透過 Code::Blocks + SDCC 編出來副檔名會是 .exe 不過影響，到時候要燒錄就是選他拉。燒錄打開燒錄軟體，點 open file 之後要把 [檔案類型] 選 所有檔案 才看的到我們要的 .exe 然後把目錄移進去剛剛上面說的目錄。點到我們要的檔案 (exp4.exe) 後 點 開啟舊檔那我們就可以快快樂樂的燒錄拉~調整字型可能有的人會覺得 Code::Blocks 預設的字型太小，所以請到選單列的 [Setting] -&gt; [Editor...] 如下圖 (因為 Windows 我拍不到 ScreenShot 在此用 Mac 的代替，不過選單位置沒變)點出來後 如下圖點選上圖框框處 [Choose] 會出現如下圖。調整到你想要的大小按下 [確定] 就好拉~美化程式碼這點倒是我覺得超方便的地方，因為 Linux 底下用 vi 最喜歡的就是這個功能 XDD在選單的 [Plugings] -&gt; [Source Code Format] 如下圖，同時這裡 Code 還是很亂的點下後... 將將！！ 程式碼就變成下面這樣了，是不是很讚的功能勒~ 這對於平常沒有好的 coding style 的人來說實在造福很多，尤其是有時候寫一寫程式左右大括號數目不一，利用 formatter 來 \" 修整 \" 一下程式碼實在是最好不過的東西了","categories":[],"tags":[]}],"categories":[{"name":"遊記","slug":"遊記","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E8%A8%98/"},{"name":"家庭","slug":"家庭","permalink":"https://blog.littlero.se/categories/%E5%AE%B6%E5%BA%AD/"},{"name":"資訊","slug":"資訊","permalink":"https://blog.littlero.se/categories/%E8%B3%87%E8%A8%8A/"},{"name":"3C","slug":"3C","permalink":"https://blog.littlero.se/categories/3C/"},{"name":"遊戲","slug":"遊戲","permalink":"https://blog.littlero.se/categories/%E9%81%8A%E6%88%B2/"},{"name":"健康","slug":"健康","permalink":"https://blog.littlero.se/categories/%E5%81%A5%E5%BA%B7/"},{"name":"敗家","slug":"敗家","permalink":"https://blog.littlero.se/categories/%E6%95%97%E5%AE%B6/"}],"tags":[{"name":"法律","slug":"法律","permalink":"https://blog.littlero.se/tags/%E6%B3%95%E5%BE%8B/"},{"name":"人生","slug":"人生","permalink":"https://blog.littlero.se/tags/%E4%BA%BA%E7%94%9F/"},{"name":"臺灣","slug":"臺灣","permalink":"https://blog.littlero.se/tags/%E8%87%BA%E7%81%A3/"},{"name":"臺東","slug":"臺東","permalink":"https://blog.littlero.se/tags/%E8%87%BA%E6%9D%B1/"},{"name":"日本","slug":"日本","permalink":"https://blog.littlero.se/tags/%E6%97%A5%E6%9C%AC/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.littlero.se/tags/Linux/"},{"name":"喝茶","slug":"喝茶","permalink":"https://blog.littlero.se/tags/%E5%96%9D%E8%8C%B6/"},{"name":"調查局","slug":"調查局","permalink":"https://blog.littlero.se/tags/%E8%AA%BF%E6%9F%A5%E5%B1%80/"},{"name":"美國","slug":"美國","permalink":"https://blog.littlero.se/tags/%E7%BE%8E%E5%9C%8B/"},{"name":"迪士尼","slug":"迪士尼","permalink":"https://blog.littlero.se/tags/%E8%BF%AA%E5%A3%AB%E5%B0%BC/"},{"name":"ingress","slug":"ingress","permalink":"https://blog.littlero.se/tags/ingress/"},{"name":"pushover","slug":"pushover","permalink":"https://blog.littlero.se/tags/pushover/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.littlero.se/tags/nginx/"},{"name":"graylog2","slug":"graylog2","permalink":"https://blog.littlero.se/tags/graylog2/"},{"name":"SaltStack","slug":"SaltStack","permalink":"https://blog.littlero.se/tags/SaltStack/"},{"name":"Casio TR15","slug":"Casio-TR15","permalink":"https://blog.littlero.se/tags/Casio-TR15/"},{"name":"E-M5","slug":"E-M5","permalink":"https://blog.littlero.se/tags/E-M5/"},{"name":"Mac","slug":"Mac","permalink":"https://blog.littlero.se/tags/Mac/"},{"name":"SUSE","slug":"SUSE","permalink":"https://blog.littlero.se/tags/SUSE/"},{"name":"Gentoo","slug":"Gentoo","permalink":"https://blog.littlero.se/tags/Gentoo/"},{"name":"cgroups","slug":"cgroups","permalink":"https://blog.littlero.se/tags/cgroups/"},{"name":"memcachedb","slug":"memcachedb","permalink":"https://blog.littlero.se/tags/memcachedb/"},{"name":"squid","slug":"squid","permalink":"https://blog.littlero.se/tags/squid/"},{"name":"Healthy","slug":"Healthy","permalink":"https://blog.littlero.se/tags/Healthy/"},{"name":"VMware","slug":"VMware","permalink":"https://blog.littlero.se/tags/VMware/"},{"name":"Octopress","slug":"Octopress","permalink":"https://blog.littlero.se/tags/Octopress/"},{"name":"TextMate","slug":"TextMate","permalink":"https://blog.littlero.se/tags/TextMate/"},{"name":"Sublime","slug":"Sublime","permalink":"https://blog.littlero.se/tags/Sublime/"},{"name":"FreeBSD","slug":"FreeBSD","permalink":"https://blog.littlero.se/tags/FreeBSD/"},{"name":"OpenRC","slug":"OpenRC","permalink":"https://blog.littlero.se/tags/OpenRC/"},{"name":"蝴蝶結","slug":"蝴蝶結","permalink":"https://blog.littlero.se/tags/%E8%9D%B4%E8%9D%B6%E7%B5%90/"},{"name":"陶瓷","slug":"陶瓷","permalink":"https://blog.littlero.se/tags/%E9%99%B6%E7%93%B7/"},{"name":"i18n","slug":"i18n","permalink":"https://blog.littlero.se/tags/i18n/"},{"name":"obj-c","slug":"obj-c","permalink":"https://blog.littlero.se/tags/obj-c/"},{"name":"moinmoin","slug":"moinmoin","permalink":"https://blog.littlero.se/tags/moinmoin/"},{"name":"trac","slug":"trac","permalink":"https://blog.littlero.se/tags/trac/"},{"name":"NIS","slug":"NIS","permalink":"https://blog.littlero.se/tags/NIS/"},{"name":"nodejs","slug":"nodejs","permalink":"https://blog.littlero.se/tags/nodejs/"},{"name":"php","slug":"php","permalink":"https://blog.littlero.se/tags/php/"},{"name":"svn","slug":"svn","permalink":"https://blog.littlero.se/tags/svn/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.littlero.se/tags/JavaScript/"}]}